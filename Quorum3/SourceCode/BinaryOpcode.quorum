package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type

class BinaryOpcode is QuorumOpcode
    QuorumOpcode left = undefined
    QuorumOpcode right = undefined
    JavaBytecodeMethodWriter methodWriter = undefined

    public integer opcode = -1
    public integer leftOpcode = -1
    public integer rightOpcode = -1

    action GetMethodWriter returns JavaBytecodeMethodWriter
        return methodWriter
    end

    action SetMethodWriter(JavaBytecodeMethodWriter writer)
        methodWriter = writer
    end

    action GetLeftOpcode returns QuorumOpcode
        return left
    end

    action GetRightOpcode returns QuorumOpcode
        return right
    end

    action SetLeftOpcode(QuorumOpcode op)
        left = op
    end

    action SetRightOpcode(QuorumOpcode op)
        right = op
    end

    action Write
        left:Write()
        WriteLeft()
        right:Write()
        WriteRight()

        if opcode not= -1
            methodWriter:VisitInstruction(opcode)
        end
    end

    action WriteLeft
        if leftOpcode not= -1
            methodWriter:VisitInstruction(leftOpcode)
        end
    end

    action WriteRight
        if rightOpcode not= -1
            methodWriter:VisitInstruction(rightOpcode)
        end
    end

    action GetTemplateCopy returns QuorumOpcode
        BinaryOpcode op
        Type t = GetType()
        me:SetType(t:Copy())
        op:opcode = opcode
        op:leftOpcode = leftOpcode
        op:rightOpcode = rightOpcode
        return op
    end
end