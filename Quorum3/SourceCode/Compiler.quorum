package Libraries.Language.Compile

use Libraries.System.File
use Libraries.Language.Compile.Symbol.all
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Translate.JarGenerator
use Libraries.Containers.List
use Libraries.Language.Compile.Translate.ClassOpcode

class Compiler
    public constant number VERSION = 3.0
    File main = undefined
    File outputFolder = undefined
    File pluginFolder = undefined
    File dependencyFolder = undefined
    constant text DEFAULT_BUILD_FOLDER = "Build"
    constant text DEFAULT_RUN_FOLDER = "Run"
    constant text DEFAULT_STANDARD_LIBRARY_FOLDER = "Library/Standard"
    constant text WAR_CLASS_DIRECTORY = "WEB-INF/classes"
    constant text OBJECT = "Libraries.Language.Object"
    File buildFolder = undefined
    File runFolder = undefined
    File standardLibraryFolder = undefined
    HashTable<text, Dependency> dependencies
    boolean isWebApplication = false
    text name = "Default"
    text convertedJavaScript = ""
    //Support classes
    SymbolTable symbolTable
    CompilerErrorManager compilerErrorManager
    TypeChecker checker
    public constant integer JAVA_BYTECODE = 0
    public constant integer JAVASCRIPT = 1
    integer currentOutputType = 0
    boolean outputSpeechCommands = true

    on create
    end

    action SetOutputSpeech(boolean doSay)
        outputSpeechCommands = doSay
    end

    action GetOutputSpeech returns boolean
        return outputSpeechCommands
    end

    action LoadDependency(text from, text to)
        Dependency dep
        dep:from = from
        dep:to = to
        dependencies:Add(from, dep)
    end

    /* This action sets what kind of output the compiler is going to have. By default
       this returns Java bytecode.
    */
    action GetOutputType returns integer
        return currentOutputType
    end

    /*
        This action tells the compiler what kind of output to emit.
    */
    action SetOutputType(integer type)
        if type >= JAVA_BYTECODE and type <= JAVASCRIPT
            currentOutputType = type
        else
            currentOutputType = 0
        end
    end

    action GetDependencies returns Iterator<Dependency>
        return dependencies:GetValueIterator()
    end

    /*
        This action compiles the array of files to Java Bytecode, which
        it writes to disk. By default, it generates a .jar file into the 
        folder named Run and the class files into the folder labeled
        Build.
    */
    action Compile(Array<File> files)
        boolean isInvalidCompile = false
        if files = undefined
            isInvalidCompile = true
        elseif files:IsEmpty()
            isInvalidCompile = true
        end

        if isInvalidCompile
            CompilerError error
            text message = ""
            if files = undefined
                message = "I cannot compile an array of files that is passed to me undefined"
            elseif files:IsEmpty()
                message = "I cannot compile an arry of files that is empty. Please specify which files you would like compiled."
            end
            error:SetErrorMessage(message)
            CompilerErrorType t
            t:SetCurrentType(t:MISSING_FILE)
            error:SetCompilerErrorType(t)
            error:SetLineNumber(1)
            error:SetLineNumberEnd(1)
            error:SetColumnNumber(1)
            error:SetColumnNumberEnd(1)
            compilerErrorManager:Add(error)
            return now
        end

        i = 0
        repeat while i < files:GetSize()
            File file = files:Get(i)
            Parser listener
            Parse(file, listener)
            i = i + 1
        end
        
        //This array will contain all files that must be built, 
        //including potentially some from the standard library
        //in order to build the requested files
        Array<File> allFiles = undefined
        if compilerErrorManager:IsCompilationErrorFree()
            allFiles = GetAllRequiredFiles()
        else 
            return now
        end

        if compilerErrorManager:IsCompilationErrorFree()
            TypeResolution()
        else 
            return now
        end

        Array<ClassOpcode> classOpcodes
        if compilerErrorManager:IsCompilationErrorFree()
            i = 0
            repeat while i < allFiles:GetSize()
                File file = allFiles:Get(i)
                QuorumBytecodeListener listener
                if not outputSpeechCommands
                    listener:SetOutputSpeech(outputSpeechCommands)
                end

                Parse(file, listener)
                ClassOpcode op = listener:GetClassOpcode()
                op:SetBuild(buildFolder)
                classOpcodes:Add(op)
                i = i + 1
            end
        else 
            return now
        end

        File starter = files:Get(0)
        CheckMain(starter)
        
        //at this point, if the build is compilation free, it 
        //is guaranteed to not have compile errors, as no errors
        //can be issues in the bytecode writing stage.
        //if an error is issued, it is a bug in the compiler and not
        //an intentional design decision.
        if compilerErrorManager:IsCompilationErrorFree()
            if currentOutputType = JAVA_BYTECODE
                
                //open up and begin filling the Jar
                JarGenerator generator
                text manifest = GetManifest(generator)
                File jar = GetDistributionFile()
                generator:SetManifest(manifest)
                generator:Open(jar)

                //iterate over all the class opcodes and write them to disk
                Iterator<ClassOpcode> codes = classOpcodes:GetIterator()
                repeat while codes:HasNext()
                    ClassOpcode code = codes:Next()
                    code:Write()

                    File build = code:GetBuildFile()
                    File buildInterface = code:GetBuildInterfaceFile()

                    text key = code:GetStaticKey()
                    if key = "Main"
                        a = 5
                    end
                    if build not= undefined
                        generator:Add(build)
                    end

                    if buildInterface not= undefined
                        generator:Add(buildInterface)
                    end
                end

                //ok all of the classes are written in the jar. Now fill it up
                //with any dependencies that are necessary.
                WriteDependencies(generator)
                generator:Close()
                
            elseif currentOutputType = JAVASCRIPT
                text result = ""
                Iterator<ClassOpcode> codes = classOpcodes:GetIterator()
                repeat while codes:HasNext()
                    ClassOpcode code = codes:Next()
                    Class clazz = code:GetClass()

                    Class mainClazz = me:GetMainClass()
                    text mainClazzName = mainClazz:GetStaticKey()
                    text clazzName = clazz:GetStaticKey()
                    if clazzName = mainClazzName //keep it simple in the first version.
                        result = result + code:WriteJavaScript()
                    end
                    a = 5
                end
                convertedJavaScript = result
            end
        end
    end


    //LoadDependency("/Library/Standard/Plugins/plugins", "/plugins")
    //LoadDependency("/Library/Standard/Plugins/org", "/org")
    private action WriteDependencies(JarGenerator generator)
        //first add all of the plugins folders
        
        WritePlugins(generator, pluginFolder)
        
        File file
        file:SetWorkingDirectory(standardLibraryFolder:GetAbsolutePath() + "/Plugins/")
        file:SetPath("org")
        WriteCompilerDependency(generator, file, file)
        a = 5
    end

    private action WriteCompilerDependency(JarGenerator generator, File file, File originalLocation)
        if file:IsDirectory()
            Array<File> files = file:GetDirectoryListing()
            Iterator<File> it = files:GetIterator()

            repeat while it:HasNext()
                File f = it:Next()
                WritePlugins(generator, f)
            end
        else
            text pluginPath = originalLocation:GetWorkingDirectory()
            text path = file:GetAbsolutePath()
            path = path:GetSubtext(pluginPath:GetSize())
            text wd = file:GetAbsolutePath()
            wd = wd:GetSubtext(0, pluginPath:GetSize() - 1)

            File f
            f:SetWorkingDirectory(wd)
            f:SetPath(path)
            
            //TODO: Optimize this to reduce the amount of copying that goes on
            generator:Add(f)
        end
    end

    private action WritePlugins(JarGenerator generator, File file)
        if file:IsDirectory()
            Array<File> files = file:GetDirectoryListing()
            Iterator<File> it = files:GetIterator()

            repeat while it:HasNext()
                File f = it:Next()
                WritePlugins(generator, f)
            end
        else
            text pluginPath = pluginFolder:GetWorkingDirectory()
            text path = file:GetAbsolutePath()
            path = path:GetSubtext(pluginPath:GetSize())
            text wd = file:GetAbsolutePath()
            wd = wd:GetSubtext(0, pluginPath:GetSize() - 1)

            File f
            f:SetWorkingDirectory(wd)
            f:SetPath(path)
            
            //TODO: Optimize this to reduce the amount of copying that goes on
            generator:Add(f)
        end
    end

    /*
        This action generates a default manifest file for the compiler, if 
        we are in bytecode format. This separates the logic from the jar 
        writer.
    */
    private action GetManifest(JarGenerator jar) returns text
        text version = jar:GetManifestVersion() + ": 1.0"
        line = version:GetCarriageReturn() + version:GetLineFeed()
        version = version + line
        
        
        text created = "Created-By: " + me:GetVersion()
        created = created + line

        text main = jar:GetManifestMainClass()

        File mainFile = me:GetMain()
        Class mainClass = me:GetMainClass()
        text classKey = "quorum." + mainClass:GetStaticKey()
        main = main + ": " + classKey
        main = main + line
        total = version + created + main + line
        return total
    end

    private action CheckMain(File starter)
        Class m = GetMainClass()
        if m = undefined //no class that had a main method was selected, throw an error
            AddMainError(starter)
        elseif m not= undefined and m:HasMainAction() = false
            AddMainError(starter)
        else
            m:SetIsProgramStartingClass(true)
        end
    end

    private action AddMainError(File starter)
        CompilerError error
        text message = "I noticed that the class " + starter:GetPath() 
            +   " was specified as the starting point for this program, " 
            + "but it does not have an action named Main. " 

        Class clazz = symbolTable:GetClassInFile(starter:GetAbsolutePath())
        if clazz not= undefined
            if clazz:GetAction("main") not= undefined
                message = message + "This class does have an action named "
                    + "main, with a lower case m, did you mean for it to be "
                    + "capitalized?"
            end
        end
        error:SetErrorMessage(message)
        CompilerErrorType t
        t:SetCurrentType(t:MISSING_MAIN)
        error:SetCompilerErrorType(t)
        error:SetFile(starter)
        error:SetLineNumber(1)
        error:SetLineNumberEnd(1)
        error:SetColumnNumber(1)
        error:SetColumnNumberEnd(1)
        compilerErrorManager:Add(error)
    end

    /*
        This action parses a single source file at a particular location
    */ 
    action ParseSingle(text source, File file)
        Parser parser
        parser:SetFile(file)
        compilerErrorManager:RemoveErrorsAtKey(file:GetAbsolutePath())
        Parse(source, parser)
        
        //This array will contain all files that must be built, 
        //including potentially some from the standard library
        //in order to build the requested files
        Array<File> allFiles = undefined
        if compilerErrorManager:IsCompilationErrorFree()
            allFiles = GetAllRequiredFiles()
        else 
            return now
        end

        if compilerErrorManager:IsCompilationErrorFree()
            TypeResolution()
        else 
            return now
        end
    end

    action CompileSingle(text source)
        Parser parser
        File fakeLocation //set a default. It doesn't matter what it is.
        text fakePath = "SingleFileCompile.quorum"
        fakeLocation:SetPath(fakePath)
        me:SetMain(fakeLocation)
        parser:SetFile(fakeLocation)
        Parse(source, parser)
        
        //This array will contain all files that must be built, 
        //including potentially some from the standard library
        //in order to build the requested files
        Array<File> allFiles = undefined
        if compilerErrorManager:IsCompilationErrorFree()
            allFiles = GetAllRequiredFiles()
        else 
            return now
        end

        if compilerErrorManager:IsCompilationErrorFree()
            TypeResolution()
        else 
            return now
        end

        CheckMain(fakeLocation)

        Array<ClassOpcode> classOpcodes
        if compilerErrorManager:IsCompilationErrorFree()
            i = 0
            repeat while i < allFiles:GetSize()
                File file = allFiles:Get(i)
                QuorumBytecodeListener listener

                if not outputSpeechCommands
                    listener:SetOutputSpeech(outputSpeechCommands)
                end

                if file:GetPath() = fakePath
                    listener:SetFile(file)
                    Parse(source, listener)
                else
                    Parse(file, listener)
                end
                ClassOpcode op = listener:GetClassOpcode()
                classOpcodes:Add(op)
                i = i + 1
            end
        else 
            return now
        end

        if compilerErrorManager:IsCompilationErrorFree()

            if currentOutputType = JAVA_BYTECODE
                //iterate over all the class opcodes and write them to disk
                Iterator<ClassOpcode> codes = classOpcodes:GetIterator()
                repeat while codes:HasNext()
                    ClassOpcode code = codes:Next()
                    code:Write()
                end

                if compilerErrorManager:IsCompilationErrorFree()
                    JarGenerator generator
                    File jar = GetDistributionFile()
                    //generator:SetCompiler(me)
                    //generator:Write()
                end
            elseif currentOutputType = JAVASCRIPT
                text result = ""
                Iterator<ClassOpcode> codes = classOpcodes:GetIterator()
                repeat while codes:HasNext()
                    ClassOpcode code = codes:Next()
                    Class clazz = code:GetClass()

                    Class mainClazz = me:GetMainClass()
                    text mainClazzName = mainClazz:GetStaticKey()
                    text clazzName = clazz:GetStaticKey()
                    if clazzName = mainClazzName //keep it simple in the first version.
                        result = result + code:WriteJavaScript()
                    end
                    a = 5
                end
                convertedJavaScript = result
            end
        end
    end

    action GetCompiledJavaScript returns text
        return convertedJavaScript
    end

    action TypeResolution
        Iterator<Class> classes = symbolTable:GetClasses()
        repeat while classes:HasNext()
            Class next = classes:Next()

            next:ResolveUseStatements(symbolTable, compilerErrorManager)
        end

        classes = symbolTable:GetClasses()
        repeat while classes:HasNext()
            Class next = classes:Next()

            //because of the way the parent flattening algorithm works,
            //classes may already be resolved
            if not next:IsResolved()
                next:ResolveAllTypes(symbolTable, compilerErrorManager)
            end
        end

        classes = symbolTable:GetClasses()
        repeat while classes:HasNext()
            Class next = classes:Next()
            next:ComputeVirtualActionTable(compilerErrorManager)
            next:ComputeGenericsTables(compilerErrorManager)
            checker:Add(next)
        end
    end

    action IsCompilationErrorFree returns boolean
        return compilerErrorManager:IsCompilationErrorFree()
    end

    action GetCompilerErrorManager returns CompilerErrorManager
        return compilerErrorManager
    end

    action GetCompilerErrorsAsText returns text
        text EOL = ""
        EOL = EOL:GetCarriageReturn() + EOL:GetLineFeed()
        text result =  "This program did not compile. I have compiled a list of errors for you below:" + EOL
        Iterator<CompilerError> errors = compilerErrorManager:GetIterator()
        repeat while errors:HasNext()
            CompilerError error = errors:Next()
            text t = error:GetDisplayName()
            result = result + EOL + t
        end
        return result
    end

    action GetCompilerErrorsAsShortText returns text
        text EOL = ""
        EOL = EOL:GetCarriageReturn() + EOL:GetLineFeed()
        text result =  "I found problems:" + EOL
        Iterator<CompilerError> errors = compilerErrorManager:GetIterator()
        repeat while errors:HasNext()
            CompilerError error = errors:Next()
            text t = error:GetShortDisplayName()
            result = result + EOL + t
        end
        return result
    end

    /*
        This action is called after the parsing phase, returning an array
        of all files were required for building the project.
    */
    action GetAllRequiredFiles returns Array<File>
        Array<File> files

        HashTable<text, File> parsed
        HashTable<text, File> unparsed

        Iterator<Class> classes = symbolTable:GetClasses()
        repeat while classes:HasNext()
            //gather up all the classes on the system and check their
            //use statements for classes we don't know about
            //if there are some, mark them as unparsed
            repeat while classes:HasNext()
                Class clazz = classes:Next()
                File classFile = clazz:GetFile()
                text path = classFile:GetAbsolutePath()
                if not parsed:HasKey(path)
                    parsed:Add(path, clazz:GetFile())
                end
                Iterator<QualifiedName> names = clazz:GetUnresolvedUseStatements()
                ResolveQualifiedNames(names, parsed, unparsed, clazz)

                Iterator<QualifiedName> parents = clazz:GetUnresolvedParents()
                ResolveParents(parents, parsed, unparsed, clazz)

                ResolveBlocks(parsed, unparsed, clazz)
            end

            //make list of any new classes that need to be analyzed
            //that have not previously been parsed. If there are some
            //send them back through the loop
            List<Class> newClasses
            Iterator<File> mustParse = unparsed:GetValueIterator()
            repeat while mustParse:HasNext()
                File next = mustParse:Next()
                Parser listener
                Parse(next, listener)
                parsed:Add(next:GetAbsolutePath(), next)

                Iterator<Class> parsedClasses = listener:GetClassesIterator()
                repeat while parsedClasses:HasNext()
                    Class clazz = parsedClasses:Next()
                    newClasses:Add(clazz)
                    if not symbolTable:HasClass(clazz:GetStaticKey())
                        symbolTable:Add(clazz)
                    end
                end
            end
            classes = newClasses:GetIterator()
            unparsed:Empty()
        end
        return parsed:CopyToValueArray()
    end

    private action ResolveBlocks(HashTable<text, File> parsed,
        HashTable<text, File> unparsed, Class clazz)
        
        Iterator<Action> actions = clazz:GetActions()
        repeat while actions:HasNext()
            Action act = actions:Next()
            //resolve parameters first
            Iterator<Variable> parameters = act:GetParameterIterator()
            repeat while parameters:HasNext()
                Variable parameter = parameters:Next()
                Type type = parameter:GetType()
                ResolveClass(type:GetStaticKey(), clazz, parsed, unparsed)
            end
        end
    end

    /*
        This action handles resolving a class or otherwise scheduling a parse
        from the standard library. If a class is returned, then it has
        already been parsed and is in the symbol table. If the class
        returns is undefined, then either the class does not exist or 
        it is in the standard library and has not yet been parsed. As such,
        returning undefined is not necessarily a compiler error.
    */
    private action ResolveClass(text key, Class clazz, HashTable<text, File> parsed,
        HashTable<text, File> unparsed)
        boolean done = false
        Class c = undefined

        Type typeCheck
        typeCheck:SetToObject(key)
        //is this really just a primitive, pretending to be a class?
        if typeCheck:IsPrimitive()
            return now
        end


        //first check if it's already valid by looking at the symbol
        //table
        c = symbolTable:GetClass(key)

        //if it isn't there, check our use table
        if c = undefined
            c = clazz:GetValidUseName(key)
        end

        //if it isn't there, check the standard library, to 
        //see if there's a file in the right place
        //if there is, mark it for parsing
        if c = undefined
            File file = GetStandardLibraryFile(key, clazz:GetPackageKey())
            if file not= undefined
                text newPath = file:GetAbsolutePath()
                if parsed:HasKey(newPath) //this class has already been parsed
                elseif unparsed:HasKey(newPath) //this class is already scheduled for parsing
                else
                    unparsed:Add(newPath, file)
                end
            else //ok last chance. Check an unresolved use statement to
                 //see if one of these reference the standard library
                 QualifiedName qn = clazz:GetUnresolvedUseStatement(key)
                 if qn not= undefined
                    file = GetStandardLibraryFile(qn:GetStaticKey(), clazz:GetPackageKey())
                    if file not= undefined
                        text newPath = file:GetAbsolutePath()
                        if parsed:HasKey(newPath) //this class has already been parsed
                        elseif unparsed:HasKey(newPath) //this class is already scheduled for parsing
                        else
                            unparsed:Add(newPath, file)
                        end
                    end
                 end
            end
        end
    end

    private action ResolveParents(Iterator<QualifiedName> names, 
            HashTable<text, File> parsed,
            HashTable<text, File> unparsed, Class clazz)
        repeat while names:HasNext()
            QualifiedName qn = names:Next()
            text key = qn:GetStaticKey()
            ResolveClass(key, clazz, parsed, unparsed)
        end
    end

    private action ResolveQualifiedNames(
            Iterator<QualifiedName> names, 
            HashTable<text, File> parsed,
            HashTable<text, File> unparsed, Class clazz)
        repeat while names:HasNext()
            QualifiedName qn = names:Next()
            if qn:IsAll()
                ResolveAllClassesInContainer(qn, parsed, unparsed, clazz)
            else
                text key = qn:GetStaticKey()
                ResolveClass(key, clazz, parsed, unparsed)
            end
        end
    end

    private action ResolveAllClassesInContainer(QualifiedName name, 
            HashTable<text, File> parsed,
            HashTable<text, File> unparsed, Class clazz)
        //Get the container name without the "all" at the end
        File folder = GetStandardLibraryFolderForPackage(name:GetStaticKeyNoAll())

        //check if this is the standard library. If so, load them all into unparsed
        //if they aren't already in there or in parsed
        if folder not= undefined
            Array<File> files = folder:GetDirectoryListing()
            Iterator<File> it = files:GetIterator()
            repeat while it:HasNext()
                File file = it:Next()
                text path = file:GetAbsolutePath()
                if not file:IsDirectory() and not parsed:HasKey(path) and not unparsed:HasKey(path)
                    unparsed:Add(path, file)
                end
            end
        end

    end

    private action GetStandardLibraryFolderForPackage(text key) returns File
        text loc = standardLibraryFolder:GetWorkingDirectory()
        text loc2 = standardLibraryFolder:GetAbsolutePath()

        File file
        file:SetWorkingDirectory(loc2)

        Array<text> values = key:Split("\.")

        text location = "/"
        Iterator<text> it = values:GetIterator()
        repeat while it:HasNext()
            text next = it:Next()
            location = location + next

            if it:HasNext()
                location = location + "/"
            end
        end

        file:SetPath(location)
        if file:Exists()
            return file
        end
        return undefined
    end

    action GetStandardLibraryFile(text key, text fromPackage) returns File
        Array<text> values = key:Split("\.")
        text loc = standardLibraryFolder:GetWorkingDirectory()
        text loc2 = standardLibraryFolder:GetAbsolutePath()

        File file
        file:SetWorkingDirectory(loc2)

        if values:GetSize() = 1
            text mySplit = "/" + fromPackage:Replace(".", "/") + "/" + key + ".quorum"
            file:SetPath(mySplit)
            if file:Exists()
                return file
            end
        else
            text location = "/"
            Iterator<text> it = values:GetIterator()
            repeat while it:HasNext()
                text next = it:Next()
                location = location + next

                if it:HasNext()
                    location = location + "/"
                else
                    location = location + ".quorum"
                end
            end

            file:SetPath(location)
            if file:Exists()
                return file
            end
        end
        
        return undefined
    end

    action Parse(File file, QuorumSourceListener listener)
        listener:SetSymbolTable(symbolTable)
        listener:SetCompilerErrorManager(compilerErrorManager)
        listener:SetFile(file)
        listener:SetTypeChecker(checker)
        ParseNative(file, listener)
    end

    private system action ParseNative(File file, QuorumSourceListener listener)


    action Parse(text source, QuorumSourceListener listener)
        listener:SetSymbolTable(symbolTable)
        listener:SetCompilerErrorManager(compilerErrorManager)
        listener:SetTypeChecker(checker)
        ParseNative(source, listener)
    end

    private system action ParseNative(text source, QuorumSourceListener listener)

    action GetName returns text
        return name
    end

    action GetNameWithExtension returns text
        return name + GetFileExtension()
    end

    action SetName(text name)
        me:name = name
    end

    action GetFileExtension returns text
        if IsWebApplication()
            return ".war"
        else
            return ".jar"
        end
    end

    action GetMain returns File
        return main
    end

    action GetMainClass returns Class
        text path = main:GetAbsolutePath()
        Class c = symbolTable:GetClassInFile(path)
        return c
    end

    action SetMain(File file)
        main = file
    end

    action GetVersion returns text
        return "Quorum " + VERSION
    end

    action GetOutputFolder returns File
        return outputFolder
    end

    action SetOutputFolder(File file)
        if file not= undefined
            outputFolder = file
            text path = file:GetAbsolutePath()
            File build
            build:SetWorkingDirectory(path)
            build:SetPath(DEFAULT_BUILD_FOLDER)
            buildFolder = build

            File run 
            run:SetWorkingDirectory(path)
            run:SetPath(DEFAULT_RUN_FOLDER)
            me:runFolder = run
        else
            File root
            outputFolder = root
        end
    end

    action GetBuildFolder returns File
        return buildFolder
    end

    action GetStandardLibraryFolder returns File
        if standardLibraryFolder = undefined
            File build
            build:SetPath(DEFAULT_STANDARD_LIBRARY_FOLDER)
            return build
        end
        return standardLibraryFolder
    end

    action SetStandardLibraryFolder(File file)
        standardLibraryFolder = file
        File f
        f:SetWorkingDirectory(standardLibraryFolder:GetAbsolutePath() + "/Plugins/")
        f:SetPath("plugins")
        pluginFolder = f

        File f2
        f2:SetWorkingDirectory(standardLibraryFolder:GetAbsolutePath() + "/Plugins/")
        f2:SetPath("org")
        dependencyFolder = f2
    end

    action GetDistributionFile returns File
        File run = GetRunFolder()
        text path = run:GetPath() + "/"
        File newRun
        newRun:SetWorkingDirectory(run:GetWorkingDirectory())
        newRun:SetPath(path + GetNameWithExtension())
        return newRun
    end

    action GetRunFolder returns File
        return runFolder
    end

    action IsWebApplication returns boolean
        return isWebApplication
    end

    action SetIsWebApplication(boolean web)
        isWebApplication = web
    end
end