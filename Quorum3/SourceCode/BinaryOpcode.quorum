package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type

class BinaryOpcode is QuorumOpcode
    public QuorumOpcode left = undefined
    public QuorumOpcode right = undefined
    public JavaBytecodeMethodWriter methodWriter = undefined
    public JavaOpcodeWriter opcodeWriter = undefined

    public integer opcode = -1
    public integer leftOpcode = -1
    public integer rightOpcode = -1

    action Write
        left:Write()
        WriteLeft()
        //opcodeWriter:WriteLeft(methodWriter)
        right:Write()
        WriteRight()
        //opcodeWriter:WriteRight(methodWriter)
        //opcodeWriter:Write(methodWriter)

        if opcode not= -1
            methodWriter:VisitInstruction(opcode)
        end
    end

    action WriteLeft
        if leftOpcode not= -1
            methodWriter:VisitInstruction(leftOpcode)
        end
    end

    action WriteRight
        if rightOpcode not= -1
            methodWriter:VisitInstruction(rightOpcode)
        end
    end

    action GetTemplateCopy returns QuorumOpcode
        BinaryOpcode op
        Type t = GetType()
        me:SetType(t:Copy())
        op:opcode = opcode
        op:leftOpcode = leftOpcode
        op:rightOpcode = rightOpcode
        return op
    end
end