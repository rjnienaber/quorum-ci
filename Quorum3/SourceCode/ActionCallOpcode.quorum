package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type
use Libraries.Language.Compile.Symbol.ActionCallResolution
use Libraries.Language.Compile.Symbol.Action
use Libraries.Language.Compile.Symbol.Class
use Libraries.Language.Compile.Symbol.Variable

class ActionCallOpcode is QuorumOpcode
    QuorumOpcode rightHandSide = undefined
    integer bytecodeLocation = -1
    JavaBytecodeOpcodes opcodes
    boolean isActionCall = false
    ActionCallResolution actionResolution = undefined
    boolean pushOnMe = false
    boolean isField = false
    Variable field = undefined
    Class fieldHolder = undefined

    action IsField returns boolean
        return isField
    end

    action SetIsField(boolean field)
        isField = field
    end

    action GetField returns Variable
        return field
    end

    action SetField(Variable field)
        me:field = field
    end

    action GetFieldHolder returns Class
        return fieldHolder
    end

    action SetFieldHolder(Class fieldHolder)
        me:fieldHolder = fieldHolder
    end

    action GetPushOnMe returns boolean
        return pushOnMe
    end

    action SetPushOnMe(boolean this)
        pushOnMe = this
    end


    action SetMethodWriterToAllChildren(JavaBytecodeMethodWriter writer)
        SetMethodWriter(writer)
        rightHandSide:SetMethodWriterToAllChildren(writer)
    end

    action GetActionCallResolution returns ActionCallResolution
        return actionResolution
    end

    action SetActionCallResolution(ActionCallResolution resolution)
        actionResolution = resolution
        Action act = actionResolution:resolvedAction
        Type returnType = act:GetReturnType()
        me:SetType(returnType)
    end

    action IsActionCall returns boolean
        return isActionCall
    end

    action SetIsActionCall(boolean act)
        isActionCall = act
    end

    action GetBytecodeLocation returns integer
        return bytecodeLocation
    end

    action SetBytecodeLocation(integer location)
        bytecodeLocation = location
    end

    action Write //TODO: make this work for action calls and fields
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        if isActionCall
            //if there's a variable, load it.
            //this isn't right, but load "THIS" onto the stack for testing
            if pushOnMe
                methodWriter:VisitVariable(opcodes:GetObjectLoad(), 0)
                //push on the variable $hidden
            end

            //actual plan - push on variables, if necessary

            //push on parameters, if necessary


            Action act = actionResolution:resolvedAction
            Class clazz = act:GetParentClass()
            if act not= undefined and clazz not= undefined
                methodWriter:VisitMethodInvoke(opcodes:GetInvokeInterface(), 
                    clazz:ConvertStaticKeyToBytecodeInterfacePath(), act:GetName(), 
                    act:ConvertActionToBytecodeParameterInterfaceSignature(), true)
            end
        else
            Type type = GetType()
            if not isField
                methodWriter:VisitVariable(opcodes:ConvertTypeToBytecodeLoadOpcode(GetType()), bytecodeLocation)
            else
                //Now write the getter for the field
                path = fieldHolder:ConvertStaticKeyToBytecodeInterfacePath()
                getterName = fieldHolder:ConvertToActionNameFromField(field, true)
                methodName = type:ConvertToSignatureFromField(true)
                methodWriter:VisitMethodInvoke(opcodes:GetInvokeInterface(), 
                    path, getterName, methodName, true)
            end
        end
    end

    action WriteJavaScript returns text 
        text result = ""
        if isActionCall
            Action act = actionResolution:resolvedAction
            Class clazz = act:GetParentClass()
        else
            result = result + field:GetName()
        end
        return result
    end

    action GetTemplateCopy returns QuorumOpcode
        ActionCallOpcode op
        Type t = GetType()
        me:SetType(t:Copy())
        return op
    end
end