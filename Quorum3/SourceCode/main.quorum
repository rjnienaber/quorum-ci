package Libraries.Language.Compile

use Libraries.Language.Compile.Parser
use Libraries.System.File
use Libraries.System.DateTime
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Translate.QuorumJarGenerator
use Libraries.Web.WebResponder
use Libraries.Web.WebResponse
use Libraries.Web.WebRequest
use Libraries.Containers.Array

class Main is WebResponder
    public constant number VERSION = 3.0
    action Main
//        ProfileTest()
//        ProfileWeb()
        Compiler compiler
        output compiler:GetVersion()
        File main
        main:SetPath("Library/Tests/IfStatement/Pass/IfStatementCompoundBoolean.quorum")
        Array<File> files

        files:Add(main)
        compiler:SetOutputType(compiler:JAVASCRIPT)
        compiler:SetMain(main)
        compiler:Compile(files)

        if compiler:IsCompilationErrorFree()
            output "Build Successful"
            output compiler:GetCompiledJavaScript()
        else
            output compiler:GetCompilerErrorsAsText()
        end
    end

    private action ProfileTest
        number total = 0
        integer amount = 1000
        output "Starting Compiler Profiler: Desktop mode"
        repeat amount times
            DateTime time
            start = time:GetEpochTime()
            WebRequest request
            request:AddParameter("code", "  class HelloWorld 
                                    action Main
                                        output 5
                                    end
                                end")
            WebResponse response = Respond(request)
            DateTime endTime
            theEnd = endTime:GetEpochTime()

            runtime = theEnd - start

            total = total + runtime
        end
        
        output "We ran the compiler " + amount + " times."
        output "The total running time was " + (total / 1000.0) + " seconds."
        output "The average running time was " + ((total / 1000.0) / amount) + " seconds."
        number compilesPerSecond = (1.0 / ((total / 1000.0) / amount))
        output "The total throughput of the compiler is " + compilesPerSecond + " compiles per second."
    end

    private action ProfileWeb
        number total = 0
        integer amount = 1000
        output "Starting Compiler Profiler: Web mode"
        repeat amount times
            DateTime time
            start = time:GetEpochTime()
            Compiler compiler
            compiler:SetOutputType(compiler:JAVASCRIPT)
            compiler:CompileSingle("  class HelloWorld 
                                    action Main
                                        output 5
                                    end
                                end")
            DateTime endTime
            theEnd = endTime:GetEpochTime()

            runtime = theEnd - start

            total = total + runtime
        end
        
        output "We ran the compiler " + amount + " times."
        output "The total running time was " + (total / 1000.0) + " seconds."
        output "The average running time was " + ((total / 1000.0) / amount) + " seconds."
        number compilesPerSecond = (1.0 / ((total / 1000.0) / amount))
        output "The total throughput of the compiler is " + compilesPerSecond + " compiles per second."
    end

    action Respond(WebRequest request) returns WebResponse
        text result = ""
        WebResponse response
        constant text CODE_REQUEST = "code"
        //if there is no code tag, then just ignore the request
        if not request:HasParameter(CODE_REQUEST)
            response:SetPageText("No Quorum code was sent to the server.")
            return response
        end

        text source = request:GetParameter("code")
        Compiler compiler
        compiler:SetOutputType(compiler:JAVASCRIPT)
        compiler:CompileSingle(source)

        if compiler:IsCompilationErrorFree()
            response:SetPageText(compiler:GetCompiledJavaScript())
        else
            response:SetPageText(compiler:GetCompilerErrorsAsText())
        end
        return response
    end
end