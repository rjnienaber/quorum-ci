package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type
use Libraries.Containers.Array
use Libraries.Containers.Blueprints.Iterator

class ConditionalOpcode is QuorumOpcode
    QuorumOpcode expression = undefined
    BlockOpcode block = undefined
    integer whichIf = 0
    Array<QuorumOpcode> elseIfExpressions
    Array<BlockOpcode> elseIfBlocks
    BlockOpcode elseBlock

    JavaBytecodeLabel endLabel = undefined
    JavaBytecodeOpcodes opcodes

    action SetMethodWriterToAllChildren(JavaBytecodeMethodWriter writer)
        SetMethodWriter(writer)
        Iterator<BlockOpcode> it = elseIfBlocks:GetIterator()
        repeat while it:HasNext()
            BlockOpcode op = it:Next()
            op:SetMethodWriterToAllChildren(writer)
        end
        elseBlock:SetMethodWriterToAllChildren(writer)

        Iterator<QuorumOpcode> ops = elseIfExpressions:GetIterator()
        repeat while ops:HasNext()
            QuorumOpcode op = ops:Next()
            op:SetMethodWriterToAllChildren(writer)
        end
    end

    action AddElseIf(QuorumOpcode expression, BlockOpcode block)
        elseIfExpressions:Add(expression)
        elseIfBlocks:Add(block)
    end

    action GetElseBlock returns BlockOpcode
        return elseBlock
    end

    action SetElseBlock(BlockOpcode block)
        elseBlock = block
    end

    action GetNewLabel returns JavaBytecodeLabel
        JavaBytecodeLabel label
        return label
    end

    action GetIfLabelInteger returns integer
        return whichIf
    end

    action SetIfLabelInteger(integer value)
        whichIf = value
    end

    action GetExpression returns QuorumOpcode
        return expression
    end

    action SetExpression(QuorumOpcode op)
        expression = op
    end

    action GetBlock returns BlockOpcode
        return block
    end

    action SetBlock(BlockOpcode op)
        block = op
    end

    action Write
        VisitLineNumber()
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        //create all the labels that we need for writing this block
        JavaBytecodeLabel ifLabel = undefined
        Array<JavaBytecodeLabel> labels
        repeat elseIfExpressions:GetSize() times
            labels:Add(GetNewLabel())
        end
        JavaBytecodeLabel elseLabel = undefined
        if elseBlock not= undefined
            elseLabel = GetNewLabel()
        end
        endLabel = GetNewLabel()

        //setup where the first if block jumps to
        if elseIfExpressions:IsEmpty()
            if elseBlock = undefined
                ifLabel = endLabel
            else
                ifLabel = elseLabel
            end
        else 
            ifLabel = labels:Get(0)
        end

        expression:Write()
        if expression is BinaryOpcode
            BinaryOpcode bop = cast(BinaryOpcode, expression)
            methodWriter:VisitJump(bop:GetJavaOpcode(), ifLabel)
        else 
            methodWriter:VisitJump(opcodes:GetIfEquals(), ifLabel)
        end
        block:Write()
        methodWriter:VisitJump(opcodes:GetGoto(), endLabel)

        //if there are else if statements, put them here.
        i = 0
        repeat elseIfExpressions:GetSize() times
            QuorumOpcode elseIfOp = elseIfExpressions:Get(i)
            BlockOpcode elseIfBlock = elseIfBlocks:Get(i)

            methodWriter:VisitLabel(labels:Get(i))
            JavaBytecodeLabel next = undefined
            elseIfOp:Write()
            if i + 1 < elseIfExpressions:GetSize()
                next = labels:Get(i + 1)
            else
                if elseBlock not= undefined
                    next = elseLabel
                else 
                    next = endLabel
                end
            end
            WriteExpression(elseIfOp, next)
            elseIfBlock:Write()
            methodWriter:VisitJump(opcodes:GetGoto(), endLabel)
            i = i + 1
        end

        //if there is an else block, put it here
        if elseBlock not= undefined
            methodWriter:VisitLabel(elseLabel)
            elseBlock:Write()
        end

        methodWriter:VisitLabel(endLabel)
    end

    private action WriteExpression(QuorumOpcode opcode, JavaBytecodeLabel label)
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        if opcode is BinaryOpcode
            BinaryOpcode bop = cast(BinaryOpcode, opcode)
            methodWriter:VisitJump(bop:GetJavaOpcode(), label)
        else 
            methodWriter:VisitJump(opcodes:GetIfEquals(), label)
        end
    end

    action WriteJavaScript returns text
        EOL = ""
        EOL = EOL:GetCarriageReturn() + EOL:GetLineFeed()
        text result = "if (" + expression:WriteJavaScript() + ") {" + EOL
        result = result + block:WriteJavaScript()
        result = result + "}" + EOL

        i = 0
        repeat elseIfExpressions:GetSize() times
            QuorumOpcode elseIfOp = elseIfExpressions:Get(i)
            BlockOpcode elseIfBlock = elseIfBlocks:Get(i)

            result = result + "else if( " + elseIfOp:WriteJavaScript() + ") {" + EOL
            result = result + elseIfBlock:WriteJavaScript()
            result = result + "}" + EOL
            i = i + 1
        end
        
        if elseBlock not= undefined
            if not elseBlock:IsEmpty()
                result = result + "else { " + EOL + elseBlock:WriteJavaScript()
                result = result + "}" + EOL
            end
        end

        return result
    end

    action GetTemplateCopy returns QuorumOpcode
        ConditionalOpcode copy

        return copy
    end
end