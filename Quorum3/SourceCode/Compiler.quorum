package Libraries.Language.Compile

use Libraries.System.File
use Libraries.Language.Compile.Symbol.all
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Translate.QuorumJarGenerator

class Compiler
    public constant number VERSION = 3.0
    File main = undefined
    constant text DEFAULT_BUILD_FOLDER = "TestBuild"
    constant text DEFAULT_RUN_FOLDER = "TestRun"
    constant text DEFAULT_STANDARD_LIBRARY_FOLDER = "Library"
    File buildFolder = undefined
    File runFolder = undefined
    File standardLibraryFolder = undefined
    HashTable<text, Dependency> dependencies

    boolean isWebApplication = false
    text name = "Default"

    //Support classes
    SymbolTable symbolTable
    CompilerErrorManager compilerErrorManager
    TypeChecker checker

    on create //load default dependencies
        standardLibraryFolder = GetStandardLibraryFolder()
        LoadDependency("/quorum", "/quorum")
        //LoadDependency("/plugins", "/plugins")
        //LoadDependency("/antlr", "/antlr")
        //LoadDependency("/asm", "/asm")
    end

    action LoadDependency(text from, text to)
        Dependency dep
        dep:from = from
        dep:to = to
        dependencies:Add(from, dep)
    end

    action GetDependencies returns Iterator<Dependency>
        return dependencies:GetValueIterator()
    end

    /*
        This action compiles the array of files to Java Bytecode, which
        it writes to disk. By default, it generates a .jar file into the 
        folder named Run and the class files into the folder labeled
        Build.
    */
    action Compile(Array<File> files)

        i = 0
        repeat while i < files:GetSize()
            File file = files:Get(i)
            Parser listener
            Parse(file, listener)
            i = i + 1
        end
        
        //This array will contain all files that must be built, 
        //including potentially some from the standard library
        //in order to build the requested files
        Array<File> allFiles = files //GetAllRequiredFiles()
        i = 0
        repeat while i < allFiles:GetSize()
            File file = allFiles:Get(i)
            TypeCheckListener listener
            Parse(file, listener)
            i = i + 1
        end

        i = 0
        repeat while i < allFiles:GetSize()
            File file = allFiles:Get(i)
            QuorumBytecodeListener listener
            Parse(file, listener)
            i = i + 1
        end

        if compilerErrorManager:IsCompilationErrorFree()
            QuorumJarGenerator generator
            File jar = GetDistributionFile()
            generator:SetCompiler(me)
            generator:Write()
        end
    end

    action IsCompilationErrorFree returns boolean
        return compilerErrorManager:IsCompilationErrorFree()
    end

    action OutputCompilerErrors
        output "The code did not build correctly. Here is a list of errors:"
        Iterator<CompilerError> errors = compilerErrorManager:GetIterator()
        repeat while errors:HasNext()
            CompilerError error = errors:Next()
            text t = error:GetDisplayName()
            output t
        end
    end

    /*
        This action is called after the parsing phase, returning an array
        of all files were required for building the project.
    */
    action GetAllRequiredFiles returns Array<File>
        Array<File> files

        HashTable<text, File> parsed
        HashTable<text, File> unparsed

        Iterator<Class> classes = symbolTable:GetClasses()

        repeat while classes:HasNext()
            Class clazz = classes:Next()

            if not parsed:HasKey(clazz:GetStaticKey())
                parsed:Add(clazz:GetStaticKey(), clazz:GetFile())
            end
            Iterator<QualifiedName> names = clazz:GetUnresolvedUseStatements()
            repeat while names:HasNext()
                QualifiedName qn = names:Next()
                text key = qn:GetStaticKey()

                if parsed:HasKey(key) //this class has already been parsed

                elseif unparsed:HasKey(key) //this class is already scheduled for parsing
                    
                else

                end
            end

        end

        return files
    end

    action CompileToJavaScript(Array<File> files)

    end

    action Parse(File file, QuorumSourceListener listener)
        listener:SetSymbolTable(symbolTable)
        listener:SetCompilerErrorManager(compilerErrorManager)
        listener:SetFile(file)
        listener:SetTypeChecker(checker)
        ParseNative(file, listener)
    end

    private system action ParseNative(File file, QuorumSourceListener listener)


    action Parse(text source, QuorumSourceListener listener)
        listener:SetSymbolTable(symbolTable)
        listener:SetCompilerErrorManager(compilerErrorManager)
        listener:SetTypeChecker(checker)
        File file //set a default. It doesn't matter what it is.
        listener:SetFile(file)
        ParseNative(source, listener)
    end

    private system action ParseNative(text source, QuorumSourceListener listener)

    action GetName returns text
        return name
    end

    action GetNameWithExtension returns text
        return name + GetFileExtension()
    end

    action SetName(text name)
        me:name = name
    end

    action GetFileExtension returns text
        if IsWebApplication()
            return ".war"
        else
            return ".jar"
        end
    end

    action GetMain returns File
        return main
    end

    action GetMainClass returns Class
        Class c = symbolTable:GetClassInFile(main:GetAbsolutePath())
        return c
    end

    action SetMain(File file)
        main = file
    end

    action GetVersion returns text
        return "Quorum " + VERSION
    end

    action GetBuildFolder returns File
        if buildFolder = undefined
            File build
            build:SetPath(DEFAULT_BUILD_FOLDER)
            buildFolder = build
        end
        return buildFolder
    end

    action GetStandardLibraryFolder returns File
        if standardLibraryFolder = undefined
            File build
            build:SetPath(DEFAULT_STANDARD_LIBRARY_FOLDER)
        end
        return standardLibraryFolder
    end

    action SetStandardLibraryFolder(File file)
        standardLibraryFolder = file
    end

    action GetDistributionFile returns File
        File run = GetRunFolder()
        text path = run:GetPath() + "/"
        File newRun
        
        newRun:SetPath(path + GetNameWithExtension())
        return newRun
    end

    action SetBuildFolder(File file)
        buildFolder = file
    end

    action GetRunFolder returns File
        if runFolder = undefined
            File run
            run:SetPath(DEFAULT_RUN_FOLDER)
            runFolder = run
        end
        return runFolder
    end

    action SetRunFolder(File file)
        runFolder = file
    end

    action IsWebApplication returns boolean
        return isWebApplication
    end

    action SetIsWebApplication(boolean web)
        isWebApplication = web
    end
end