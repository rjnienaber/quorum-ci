package Libraries.Web
use Libraries.Web.WebTag
use Libraries.Web.Attribute
use Libraries.Web.Attributes
use Libraries.Web.MediaAttributeAccepter
/*
The Audio class represents HTML's (Hypertext Markup Language) audio tag which is 
used to add an audio player/content to a page.
You can find more information about this tag at: 
    <a href="http://www.w3schools.com/tags/tag_audio.asp">The audio attribute</a>.
Attribute: Example
use Libraries.Web.all
class Main
   action main
        WebPage page
        Audio audio
        audio:SetAddress("http://www.moviesoundclips.net/download.php?id=1483&ft=wav")
        audio:SetControls(true)
        audio:SetAutoPlay(true)
      
        page:AddToBody(audio)
        output page:Generate()
   end
end
*/
class Audio is WebTag, MediaAttributeAccepter
    constant text autoPlay  = "autoplay"
    constant text controls = "controls"
    constant text loop = "loop"
    constant text preload = "preload"
    constant text address = "src"
    /*
        This is a tag that can be used in the preload option for audio.
        Auto  specifies that the audio should be loaded automatically when the page
        loads.
    */
    public constant text preloadAuto = "auto"

    /*
        This is a tag that can be used in the preload option for audio.         
        The Metadata tag means that the page should load information about the audio
        file to be played, but that the actual audio should not be loaded.
    */
    public constant text preloadMetadata = "metadata"

    /*
        This is a tag that can be used in the preload option for audio. 
        The "none" tag specifies that no information about the audio should be 
        loaded when the page loads.
    */
    public constant text preloadNone = "none"


    /*
        This action returns true if the web page will automatically try to 
        play the specified audio file as soon as it is ready. Ready, in this
        context means that a sufficient amount of audio has been buffered.

        Attribute: Returns This returns true if the page will automatically
            play the file.

        Attribute: Example
        use Libraries.Web.Audio

        Audio audio
        boolean play = audio:GetAutoPlay()
    */
    action GetAutoPlay returns boolean
        Attribute isAutoPlay = GetAttribute(autoPlay)
        if isAutoPlay not= undefined
            return isAutoPlay:GetValue() = autoPlay
        end
        return false
    end

    /*
        This action returns true if the web page will display controls for 
        playing an audio file.

        Attribute: Returns This returns true if controls for adjusting the 
        playback of the audio file will be displayed.

        Attribute: Example
        use Libraries.Web.Audio

        Audio audio
        boolean play = audio:GetControls()
    */
    action GetControls returns boolean
        Attribute isControls = GetAttribute(controls)
        if isControls not= undefined
            return isControls:GetValue() = controls
        end
        return false
    end

    /*
        This action returns true if the audio file played on this web page
        will automatically repeat itself after it is complete.

        Attribute: Returns This returns true if the file will play itself
            again after it is finished.

        Attribute: Example
        use Libraries.Web.Audio

        Audio audio
        boolean play = audio:GetLoop()
    */
    action GetLoop returns boolean
        Attribute isLoop = GetAttribute(loop)
        if isLoop not= undefined
            return isLoop:GetValue() = loop
        end
        return false
    end

    /*
        This action returns information on how audio should be loaded from this
        tag. There are three options for passing information to this action, which
        are written into the constants : 1) preloadAuto, 2) preloadMetadata, 
        and 3) preloadNone.

        <p>
        Auto  specifies that the audio should be loaded automatically when the page
        loads. The Metadata tag means that the page should load information about the audio
        file to be played, but that the actual audio should not be loaded. 
        The "none" tag specifies that no information about the audio should be 
        loaded when the page loads.
        </p>

        Attribute: Returns This returns an attribute representing the preload
            preference, if one exists.

        Attribute: Example
        use Libraries.Web.Audio
        use Libraries.Web.Attribute

        Audio audio
        Attribute play = audio:GetPreload()
    */
    action GetPreload returns Attribute
        return GetAttribute(preload)
    end

    /*
        This action returns the address where the audio file resides. This
        address is relative to the root of the server.


        Attribute: Returns This returns an attribute representing the address.

        Attribute: Example
        use Libraries.Web.Audio
        use Libraries.Web.Attribute

        Audio audio
        Attribute play = audio:GetAddress()
    */
    action GetAddress returns Attribute
        return GetAttribute(address)
    end

    /*
        This action should be set to true if the web page should automatically try to 
        play the specified audio file as soon as it is ready. Ready, in this
        context means that a sufficient amount of audio has been buffered.
        Setting this to false will remove autoplay from the page.


        Attribute: Example
        use Libraries.Web.Audio

        Audio audio
        audio:SetAutoPlay(true)
    */
    action SetAutoPlay(boolean value)
        if value
            AddAttribute(autoPlay, autoPlay)
        else
            RemoveAttribute(autoPlay)
        end
    end

    /*
        This action should be set to true if the web page should display controls for 
        playing an audio file.
        Setting this to false will remove contols from the page.


        Attribute: Example
        use Libraries.Web.Audio

        Audio audio
        audio:SetControls(true)
    */
    action SetControls(boolean value)
        if value
            AddAttribute(controls, controls)
        else
            RemoveAttribute(controls)
        end
    end

    /*
        This action is set to true if the audio file played on this web page
        should automatically repeat itself after it is complete.
        Setting this to false will remove looping from the page.

        Attribute: Example
        use Libraries.Web.Audio

        Audio audio
        audio:SetLoop(true)
    */
    action SetLoop(boolean value)
        if value
            AddAttribute(loop, loop)
        else
            RemoveAttribute(loop)
        end
    end

    /*
        This action sets information on how audio should be loaded from this
        tag. There are three options for passing information to this action, which
        are written into the constants : 1) preloadAuto, 2) preloadMetadata, 
        and 3) preloadNone.

        <p>
        Auto  specifies that the audio should be loaded automatically when the page
        loads. The Metadata tag means that the page should load information about the audio
        file to be played, but that the actual audio should not be loaded. 
        The "none" tag specifies that no information about the audio should be 
        loaded when the page loads.
        </p>

        Attribute: Example
        use Libraries.Web.Audio

        Audio audio
        audio:SetPreload(audio:preloadAuto)
    */
    action SetPreload(text value)
        AddAttribute(preload, value)
    end

    /*
        This action sets the address where the audio file resides. This
        address is relative to the root of the server.


        Attribute: Example
        use Libraries.Web.Audio

        Audio audio
        audio:SetAddress("resources/test.ogg")
    */
    action SetAddress(text value)
        AddAttribute(address, value)
    end

    action Generate returns text
        text result = "<audio " 
        Attributes attributes = parent:WebTag:GetAttributes()
        attributeText = attributes:Generate()
        result = result + attributeText + ">"
        result = result + me:GenerateNestedTags()
        result = result + GetDescription() + "</audio>"
        return result
    end
end