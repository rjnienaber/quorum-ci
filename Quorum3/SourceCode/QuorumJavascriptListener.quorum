package Libraries.Language.Compile

use Libraries.Language.Compile.Context.all
use Libraries.Containers.Stack
use Libraries.Language.Compile.Symbol.all
use Libraries.System.File
use Libraries.Containers.List
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Symbol.all
use Libraries.Language.Compile.Translate.all


class QuorumJavascriptListener is QuorumSourceListener
    QualifiedName packageValue = undefined
    Action currentAction = undefined
    Class currentClass = undefined
    Block currentBlock = undefined
    Stack<QuorumOpcode> opcodeStack
    //constant text OUTPUT_VARIABLE = "finalOutput_______"
    //text convertedSource = "var " + OUTPUT_VARIABLE + " = "
    text convertedSource = ""
    
    //QUORUM 2 BUG
    //text eol = ""
    //eol = "Main();" + eol:GetCarriageReturn() + eol:GetLineFeed()
    
    on create
        //convertedSource = convertedSource + convertedSource:GetDoubleQuote() + 
        //    convertedSource:GetDoubleQuote() + ";" + convertedSource:GetCarriageReturn() + convertedSource:GetLineFeed()
        convertedSource = "Main();" + convertedSource:GetCarriageReturn() + convertedSource:GetLineFeed()
        convertedSource = convertedSource + "function Main() {" + convertedSource:GetCarriageReturn() + convertedSource:GetLineFeed()
    end

    action ExitStart(StartContext context)
        //convertedSource = convertedSource + OUTPUT_VARIABLE
        convertedSource = convertedSource + "}"
    end

    action GetConvertedSource returns text
        return convertedSource
    end

    action ExitPackageRule(PackageContext context) 
        packageValue = context:name
    end

    action EnterFullClassDeclaration(FullClassDeclarationContext context) 
        text name = context:className
        SymbolTable table = me:GetSymbolTable()
        
        text staticKey = ""
        if packageValue = undefined
            QualifiedName default
            packageValue = default
        end
        staticKey = packageValue:GetClassStaticKey(name)
        currentClass = table:GetClass(staticKey)
    end

    action ExitActionHeader(ActionContext context)
        if currentClass not= undefined
            //get the method name
            text key = context:GetStaticKey()
            Action method = currentClass:GetAction(key)
            currentAction = method
        end
    end

    action ExitNormalAssignment(NormalAssignmentContext context) 
        text name = context:name
        Variable variable = undefined
        
        if context:isField
            variable = currentClass:GetVariable(name)
            //write the field
        else 
            variable = currentBlock:GetVariable(name)
            Type left = variable:GetType()
            QuorumOpcode right = opcodeStack:Pop()

            Operation assign
            assign:SetOperation(assign:EQUALS)

            TypeChecker checker = GetTypeChecker()
            TypeCheckResult result = checker:Check(left, right:GetType(), undefined, true) 

            text quote = ""
            quote = quote:GetDoubleQuote()

            //text print = OUTPUT_VARIABLE + " = "
            text opcodeResult = right:WriteJavaScript()
            //print = print + quote + opcodeResult + quote + ";" + quote:GetCarriageReturn() + quote:GetLineFeed()
            //convertedSource = convertedSource + print
            //write the local variable, which is guaranteed at this stage not null
//            integer location = variable:GetBytecodeLocation()
//            JavaOpcodeWriter writer = result:writer
//            if writer not= undefined
//                writer:Write(methodWriter, location)
//            end
        end
    end

    action ExitOutputStatement(OutputContext context)
        QuorumOpcode op = opcodeStack:Pop()
        Type type = op:GetType()
        //text quote = ""
        //quote = quote:GetDoubleQuote()

        //text print = OUTPUT_VARIABLE + " += " //print(" + quote
        text opcodeResult = op:WriteJavaScript()
        //print = print + quote + opcodeResult + quote + ";" + quote:GetCarriageReturn() + quote:GetLineFeed()
        text print = "return " + opcodeResult + ";"
        print = print + print:GetCarriageReturn() + print:GetLineFeed()
        convertedSource = convertedSource + print
    end

    action EnterBlock(BlockContext context)
        if currentBlock = undefined
            currentBlock = currentAction:GetBlock()
        else 
            currentBlock = currentBlock:GetNextBlock()
        end
    end
    
    action ExitBlock(BlockContext context)
        if currentBlock not= undefined
            currentBlock = currentBlock:GetParentBlock() //may be undefined
        end
    end

    action ExitBoolean(BooleanContext context) 
        Type type
        type:SetIsConstant(true)
        type:SetBooleanConstant(context:value)

        QuorumConstant const
        const:SetType(type)
        const:booleanValue = context:value
        opcodeStack:Push(const)
    end

    action ExitInteger(IntegerContext context) 
        Type type
        type:SetIsConstant(true)
        type:SetIntegerConstant(context:value)

        QuorumConstant const
        const:SetType(type)
        const:integerValue = context:value
        opcodeStack:Push(const)
    end

    action ExitNumber(NumberContext context) 
        Type type
        type:SetIsConstant(true)
        type:SetNumberConstant(context:value)

        QuorumConstant const
        const:SetType(type)
        const:numberValue = context:value
        opcodeStack:Push(const)
    end

    action ExitText(TextContext context) 
        Type type
        type:SetIsConstant(true)
        type:SetTextConstant(context:value)

        QuorumConstant const
        const:SetType(type)
        const:textValue = context:value
        opcodeStack:Push(const)
    end
end