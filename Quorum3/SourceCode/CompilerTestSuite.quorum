package Libraries.Language.Compile.Test

use Libraries.Language.Compile.all
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Language.Compile.Parser
use Libraries.System.File
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Translate.QuorumJarGenerator

class CompilerTestSuite 
    //Compiler compiler
    //HashTable<text, TestResult> passing
    integer total = 0
    integer passed = 0
    integer failed = 0

    action Main
        output "Starting Quorum 3.0 Test Suite" //+ compiler:VERSION + "."
        output ""
        output "List of Tests:"
        Test1()
        
        output ""
        output "Finished Testing."
        output "Tests Passed: " + passed + " out of " + total
        output "Total Percentage: " + (passed  * 100.0) / (total * 1.0)
    end

    action Test1
        CompilerTestResult result = undefined
        Compiler compiler
        File file
        file:SetPath("Library/Tests/Expressions/Pass/Expression.quorum")
        compiler:SetMain(file)

        Parser parser
        compiler:Parse(file, parser)
        TypeCheckListener checker
        compiler:Parse(file, checker)
        QuorumBytecodeListener bytecode
        compiler:Parse(file, bytecode)
        
        CompilerErrorManager manager = parser:GetCompilerErrorManager()

        if manager:IsCompilationErrorFree() //run the program
            QuorumJarGenerator generator

            File jar = compiler:GetDistributionFile()
            generator:SetCompiler(compiler)
            generator:Write()
            result = RunClassFile(jar)
            
            Array<text> results = result:lines
            if not results:IsEmpty()
                line = results:Get(0)
                if line = "15" //we passed!
                    result:passed = true
                end
            end
        else
            CompilerTestResult result2
            result = result2
        end

        result:name = "Expression.quorum"
        Add(result)
    end

    action Add(CompilerTestResult result)
        if result = undefined
            failed = failed + 1
        elseif result:passed
            passed = passed + 1
        else
            failed = failed + 1
        end
        total = total + 1
        text value = result:name + " ... " + result:passed
        output value
    end

    system action RunClassFile(File file) returns CompilerTestResult
end