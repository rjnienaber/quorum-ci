package Libraries.Language.Compile

use Libraries.Language.Compile.Context.all
use Libraries.Containers.Stack
use Libraries.Language.Compile.Symbol.all
use Libraries.System.File
use Libraries.Containers.List
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Symbol.all
use Libraries.Language.Compile.Translate.all


class QuorumJavascriptListener is QuorumSourceListener
    QualifiedName packageValue = undefined
    Action currentAction = undefined
    Class currentClass = undefined
    Block currentBlock = undefined
    ActionOpcode currentActionOpcode = undefined
    ClassOpcode currentClassOpcode = undefined
    BlockOpcode currentBlockOpcode = undefined
    BlockOpcode recentlyPopped = undefined
    Stack<QuorumOpcode> opcodeStack

    text build = "TestBuild"
    text run = "TestRun"
    
    public text convertedSource = ""
    public text EOL = ""
    public text quote = EOL:GetDoubleQuote()
    
    //QUORUM 2 BUG
    //text eol = ""
    //eol = eol:GetCarriageReturn() + eol:GetLineFeed()
    
    on create
        
        
    end

    action ExitStart(StartContext context)
        
    end

    action GetConvertedSource returns text
        return convertedSource
    end

    action ExitPackageRule(PackageContext context) 
        packageValue = context:name
    end

    action EnterFullClassDeclaration(FullClassDeclarationContext context) 
        ClassOpcode classOp
        currentClassOpcode = classOp

        text name = context:className
        SymbolTable table = me:GetSymbolTable()
        
        text staticKey = ""
        if packageValue = undefined
            QualifiedName default
            packageValue = default
        end
        staticKey = packageValue:GetClassStaticKey(name)
        currentClass = table:GetClass(staticKey)
        currentClassOpcode:SetClass(currentClass)
        currentClassOpcode:SetName(name)
        currentClassOpcode:SetStaticKey(staticKey)
        
        //not sure if I need this
        //currentClassOpcode:SetBuildPath(build)
        //currentClassOpcode:SetRunPath(run)
        //currentClassOpcode:SetPackage(packageValue)
    end

    action ExitFullClassDeclaration(FullClassDeclarationContext context) 
        if currentClass not= undefined
            convertedSource = currentClassOpcode:WriteJavaScript()
            //buildFile = currentClassOpcode:GetBuildFile()
            //buildInterfaceFile = currentClassOpcode:GetBuildInterfaceFile()
        end
    end

    action ExitActionHeader(ActionContext context)
        if currentClass not= undefined
            //get the method name
            text key = context:GetStaticKey()
            Action method = currentClass:GetAction(key)
            currentAction = method
            ActionOpcode actionOpcode
            currentActionOpcode = actionOpcode
            currentActionOpcode:SetAction(method)

            boolean isMain = method:IsMain()
            text null = undefined
            text name = context:actionName
            currentClassOpcode:Add(currentActionOpcode)
        end
    end

//    action ExitNormalAssignment(NormalAssignmentContext context) 
//        text name = context:name
//        Variable variable = undefined
//        
//        if context:isField
//            variable = currentClass:GetVariable(name)
//            //write the field
//        else 
//            variable = currentBlock:GetVariable(name)
//            Type left = variable:GetType()
//            QuorumOpcode right = opcodeStack:Pop()
//
//            Operation assign
//            assign:SetOperation(assign:EQUALS)
//
//            TypeChecker checker = GetTypeChecker()
//            TypeCheckResult result = checker:Check(left, right:GetType(), undefined, true) 
//
//            text quote = ""
//            quote = quote:GetDoubleQuote()
//
//            //text print = OUTPUT_VARIABLE + " = "
//            text opcodeResult = right:WriteJavaScript()
//            //print = print + quote + opcodeResult + quote + ";" + quote:GetCarriageReturn() + quote:GetLineFeed()
//            //convertedSource = convertedSource + print
//            //write the local variable, which is guaranteed at this stage not null
////            integer location = variable:GetBytecodeLocation()
////            JavaOpcodeWriter writer = result:writer
////            if writer not= undefined
////                writer:Write(methodWriter, location)
////            end
//        end
//    end

    action ExitOutputStatement(OutputContext context)
        QuorumOpcode op = opcodeStack:Pop()
        OutputOpcode out
        out:SetOpcode(op)
        currentBlockOpcode:Add(out)
    end

    private action SetNormalAction 
        isNormalAction = true
        isSystemAction = false
        isBluePrintAction = false
    end

    private action SetSystemAction 
        isNormalAction = false
        isSystemAction = true
        isBluePrintAction = false
    end

    private action SetBlueprintAction 
        isNormalAction = false
        isSystemAction = false
        isBluePrintAction = true
    end

    private action ClearActionState
        isNormalAction = false
        isSystemAction = false
        isBluePrintAction = false
    end

    action EnterAction(ActionContext context) 
        SetNormalAction()
    end

    action ExitAction(ActionContext context) 
        ClearActionState()
        
        if currentActionOpcode not= undefined and recentlyPopped not= undefined
            currentActionOpcode:Add(recentlyPopped)
        end
    end

    action EnterBlock(BlockContext context)
        if currentBlock = undefined
            currentBlock = currentAction:GetBlock()
        else 
            currentBlock = currentBlock:GetNextBlock()
        end

        if currentBlockOpcode = undefined
            BlockOpcode block
            currentBlockOpcode = block
        else
            BlockOpcode block
            block:SetParentBlock(currentBlockOpcode)
            currentBlockOpcode = block
        end
    end
    
    action ExitBlock(BlockContext context)
       if currentBlock not= undefined
            currentBlock = currentBlock:GetParentBlock() //may be undefined
        end

        if currentBlockOpcode not= undefined
            recentlyPopped = currentBlockOpcode
            currentBlockOpcode = currentBlockOpcode:GetParentBlock()
        end
    end

    action ExitBoolean(BooleanContext context) 
        Type type
        type:SetIsConstant(true)
        type:SetBooleanConstant(context:value)

        QuorumConstant const
        const:SetType(type)
        const:booleanValue = context:value
        opcodeStack:Push(const)
    end

    action ExitInteger(IntegerContext context) 
        Type type
        type:SetIsConstant(true)
        type:SetIntegerConstant(context:value)

        QuorumConstant const
        const:SetType(type)
        const:integerValue = context:value
        opcodeStack:Push(const)
    end

    action ExitNumber(NumberContext context) 
        Type type
        type:SetIsConstant(true)
        type:SetNumberConstant(context:value)

        QuorumConstant const
        const:SetType(type)
        const:numberValue = context:value
        opcodeStack:Push(const)
    end

    action ExitText(TextContext context) 
        Type type
        type:SetIsConstant(true)
        type:SetTextConstant(context:value)

        QuorumConstant const
        const:SetType(type)
        const:textValue = context:value
        opcodeStack:Push(const)
    end
end