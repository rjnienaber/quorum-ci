package Libraries.Web

use Libraries.Containers.Blueprints.Iterator
use Libraries.Web.Attribute
use Libraries.Web.Attributes

/*
The AttributeAccepter class is designed as a helper to ease adding and removing
attributes from particular WebTag objects. While there is no harm in creating
an object of this type, it is used most commonly by sub-classes that need to use
attributes. The example for this class shows how to subclass the AttributeAccepter
class.

Attribute: Example

use Libraries.Web.AttributeAccepter

class MyNewTag is AttributeAccepter, WebGenerator
    action Generate returns text
        text result = "<myTagName " 
        Attributes attributes = GetAttributes()
        attributeText = attributes:Generate()
        result = result + attributeText + ">"
        result = result + me:GenerateNestedTags()
        result = result + GetDescription() + "</myTagName>"
        return result
    end
end
*/
class AttributeAccepter 
    Attributes attributes

    /*
        Returns a list of all attributes on the system.
        
        Attribute: Returns The attributes class contains all of the attributes
            that have been set for this object.

        Attribute: Example

        use Libraries.Web.AttributeAccepter
        use Libraries.Web.Attributes

        AttributeAccepter accept
        Attributes attributes = accept:GetAttributes()
    */
    action GetAttributes returns Attributes
        return attributes
    end

    /*
        This action adds an attribute to this object. If an attribute with the 
        same name as Attribute:GetName() already exists, then that attribute's
        value is replaced.

        Attribute: Parameter attribute The attribute that will be stored.

        Attribute: Example
        use Libraries.Web.AttributeAccepter
        use Libraries.Web.Attribute

        Attribute attribute
        attribute:SetName("src")
        attribute:SetValue("http://www.google.com")

        AttributeAccepter accept
        accept:Add(attribute)
        
    */
    action Add(Attribute attribute)
        attributes:Add(attribute)
    end

    /*
        This action adds an attribute to this object. This action is a helper
        action, which essentially does the same thing as the Add(Attribute) 
        action. If an attribute with the 
        same name as Attribute:GetName() already exists, then that attribute's
        value is replaced.

        Attribute: Parameter name The name of the attribute functions as a key. For
        example, in a link, we might have a "src" and an actual address, like google.com.
        In this case, the name would be equivalent to the src.

        Attribute: Parameter value As an example of link, imagine we have a value of
         "src" and an actual address, like google.com.  In this case, the value 
        would be equivalent to google.com.

        Attribute: Example
        use Libraries.Web.AttributeAccepter
        use Libraries.Web.Attribute

        AttributeAccepter accept
        accept:AddAttribute("src", "http://www.google.com")
        
    */
    action AddAttribute(text name, text value)
        Attribute attribute
        attribute:SetName(name)
        attribute:SetValue(value)
        attributes:Add(attribute)
    end
    
    /*
        This action returns an attribute from this object's Attributes object. If
        no attribute exists for a given key, this action returns undefined.

        Attribute: Parameter key The key value in this case is described in more
        detail in the documentation for this class's Add actions.

        Attribute: Example
        use Libraries.Web.AttributeAccepter
        use Libraries.Web.Attribute

        AttributeAccepter accept
        //as we have not set any attribute, this would
        //return undefined
        Attribute attribute = accept:GetAttribute("src")
    */
    action GetAttribute(text name) returns Attribute
        return attributes:GetAttribute(name)
    end

    /*
        This action returns an attribute from this object's Attributes object. If
        no attribute exists for a given key, this action returns undefined.

        Attribute: Parameter name The key value in this case is described in more
        detail in the documentation for this class's Add actions.

        Attribute: Example
        use Libraries.Web.AttributeAccepter
        use Libraries.Web.Attribute

        AttributeAccepter accept
        accept:AddAttribute("src", "http://www.google.com")
        //This helper action would throw an error if "src" were not set.
        text value = accept:GetAttributeValue("src")
    */
    action GetAttributeValue(text name) returns text
        Attribute attr = attributes:GetAttribute(name)
       return attr:GetValue()
    end

    /*
        This action returns whether or not an attribute exists for the key passed
        in as a parameter. 

        Attribute: Parameter name The key value in this case is described in more
        detail in the documentation for this class's Add actions.

        Attribute: Example
        use Libraries.Web.AttributeAccepter
        use Libraries.Web.Attribute

        AttributeAccepter accept
        accept:AddAttribute("src", "http://www.google.com")
        //This helper action would throw an error if "src" were not set.
        boolean exists = accept:HasAttribute("src")
    */
    action HasAttribute(text name) returns boolean
        Attribute attr = attributes:GetAttribute(name)
        if attr not= undefined
            return true
        else
            return false
        end
    end

    /*
        This action removes an attribute with a particular key. If that attribute
        does not exist, then this action returns undefined.

        Attribute: Parameter name The name of the attribute that should be
        removed.

        Attribute: Example
        use Libraries.Web.AttributeAccepter
        use Libraries.Web.Attribute

        AttributeAccepter accept
        accept:AddAttribute("src", "http://www.google.com")
        //This helper action would throw an error if "src" were not set.
        accept:RemoveAttribute("src")
    */
    action RemoveAttribute(text name) returns Attribute
        return attributes:Remove(name)
    end

    /*
        This action returns the number of attributes that are currently
        stored in this object.

        Attribute: returns This action returns the number of attributes in
        the object.

        Attribute: Example
        use Libraries.Web.AttributeAccepter
        use Libraries.Web.Attribute

        AttributeAccepter accept
        accept:AddAttribute("src", "http://www.google.com")
        integer num = accept:GetNumberOfAttributes()
    */
    action GetNumberOfAttributes returns integer
        return attributes:GetSize()
    end

    /*
        This action returns a text description of all attributes stored.

        Attribute: returns This returns text describing the attributes in standard
        hypter text markup language (HTML) format.

        Attribute: Example
        use Libraries.Web.AttributeAccepter
        use Libraries.Web.Attribute

        AttributeAccepter accept
        accept:AddAttribute("src", "http://www.google.com")
        text result = accept:GenerateAttributes()
    */
    action GenerateAttributes returns text
        Attributes attributes = me:GetAttributes()
        return attributes:Generate()
    end

    /*
        This action returns an iterator of all attributes stored in this object.

        Attribute: returns This returns an iterator of all attributes stored
        in this object.

        Attribute: Example
        use Libraries.Web.AttributeAccepter
        use Libraries.Web.Attribute
        use Libraries.Containers.Blueprints.Iterator

        AttributeAccepter accept
        accept:AddAttribute("src", "http://www.google.com")

        //output out all of the attributes
        Iterator<Attribute> it =  accept:GetIterator()
        repeat while it:HasNext()
            Attribute at = it:Next()
            output at:Generate()
        end
    */
    action GetIterator returns Iterator<Attribute>
        return attributes:GetIterator()
    end
end