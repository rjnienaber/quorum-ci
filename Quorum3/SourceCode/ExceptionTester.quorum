package Libraries.Language.Compile.Test

use Libraries.Language.Compile.all
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Language.Compile.Parser
use Libraries.System.File
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Translate.QuorumJarGenerator
use Libraries.System.StackTraceItem
use Libraries.Language.Errors.OutOfBoundsError

class ExceptionTester 
    CompilerTestSuite suite = undefined
    text path = "Library/Tests/Exceptions/"
    text passPath = path + "Pass/"
    text failPath = path + "Fail/"

    action Test
        path = passPath
        CastErrorCausingCastError()
        CatchCastAlertException()
        CatchCastErrorFromOtherMethod()
        CatchCastException()
        CatchCastSimpleAlertException()
        CatchMethodErrorInAlways()
        CatchWithAlwaysCastAlertException()
        CatchWithAlwaysCastException()
        CatchWithAlwaysCastSimpleAlertException()
        CaughtActionException()
        CaughtActionExceptionWithAlways()
        CheckDetectAlwaysEmptyCheck()
        CheckDetectAlwaysEmptyCheckInElse()
        CheckDetectAlwaysEmptyCheckInElseIf()
        CheckDetectAlwaysEmptyCheckInIf()
        CheckDetectAlwaysEmptyCheckInIfElseElseIf()
        CheckDetectAlwaysEmptyCheckInRepeatTimes()
        CheckDetectAlwaysEmptyCheckInRepeatUntil()
        CheckDetectAlwaysEmptyCheckInRepeatWhile()
        CheckDetectAlwaysInElse()
        CheckDetectAlwaysInElseIf()
        CheckDetectAlwaysInIf()
        CheckDetectInElse()
        CheckDetectInElseIf()
        CheckDetectInIf()
        CheckDetectInRepeatTimes()
        CheckDetectInRepeatTimesIf()
        CheckDetectInRepeatUntil()
        CheckDetectInRepeatUntilIf()
        CheckDetectInRepeatWhile()
        CheckDetectInRepeatWhileIf()
        ComplexExceptionScenario1()
        ComplexExceptionScenario2()
        GenericCatchCastAlertException()
        GenericCatchCastException()
        IfElseIfElseInAlways()
        IfElseIfElseInCheck()
        IfElseIfElseInCheckWithAlways()
        IfElseIfElseInDetect()
        IfElseIfElseInDetectWithAlways()
        IfElseIfInAlways()
        IfElseIfInCheck()
        IfElseIfInCheckWithAlways()
        IfElseIfInDetect()
        IfElseIfInDetectWithAlways()
        IfElseIfInCheck()
        IfElseIfInCheckWithAlways()
        IfInAlways()
        IfInCheck()
        IfInCheckWithAlways()
        IfInDetect()
        IfInDetectWithAlways()
        MultipleDetects()
        MultipleDetectsWithAlways()
        NestedAlwaysWithException()
        NestedCatchCastAlertException()
        NestedCatchCastException()
        NestedCatchSimpleAlertException()
        NestedCheckDetectInAllBlocks()
        RecursiveCallFromAlways()
        RepeatTimesInAlways()
        RepeatTimesInCheck()
        RepeatTimesInCheckWithAlways()
        RepeatTimesInDetect()
        RepeatTimesInDetectWithAlways()
        RepeatUntilInAlways()
        RepeatUntilInCheck()
        RepeatUntilInCheckWithAlways()
        RepeatUntilInDetect()
        RepeatUntilInDetectWithAlways()
        RepeatWhileInAlways()
        RepeatWhileInCheck()
        RepeatWhileInCheckWithAlways()
        RepeatWhileInDetect()
        RepeatWhileInDetectWithAlways()
        RethrowError()
        RethrowErrorWithAlways()
        TriplyNestedCheckDetect()
        TriplyNestedCheckDetectAlways()
        TriplyNestedCheckDetectSomeAlways()
//
////FAIL TESTS
//        path = failPath

        //These tests do actually cause exceptions to be thrown, 
        //but they are kind of pointless to run in Q3, since the test suite
        //doesn't account for exceptions thrown around and not caught.
        //That said, they "could" be convered into pass tests if the exception
        //string was copied in.

        //CastTextToIntegerException()
        //CastTextToNumberException()
        //MultipleDetectsWithAlwaysThrowingCastError()
        //NestedUncaughtCastAlertException()
        //NestedUncaughtCastException()
        //NestedUncaughtSimpleAlertException()
        //UncaughtCastAlertException()
        //UncaughtCastException()
        //UncaughtErrorInAlways()
        //UncaughtSimpleAlertException()
        //missingParameters()
        //missingParameters2()
    end

    action GetName returns text
        return "Exception Tests"
    end
    
    action GetCompilerTestSuite returns CompilerTestSuite
        return suite
    end

    action SetCompilerTestSuite(CompilerTestSuite suite)
        me:suite = suite
    end

    action CastErrorCausingCastError
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CastErrorCausingCastError.quorum")
        files:Add(main)
        results:Add(0, "caught")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CatchCastAlertException 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CatchCastAlertException.quorum")
        files:Add(main)
        results:Add(0, "2")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CatchCastErrorFromOtherMethod 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CatchCastErrorFromOtherMethod.quorum")
        files:Add(main)
        results:Add(0, "got cast error")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CatchCastException 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CatchCastException.quorum")
        files:Add(main)
        results:Add(0, "2")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CatchCastSimpleAlertException 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CatchCastSimpleAlertException.quorum")
        files:Add(main)
        results:Add(0, "2")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CatchMethodErrorInAlways 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CatchMethodErrorInAlways.quorum")
        files:Add(main)
        results:Add(0, "alert")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CatchWithAlwaysCastAlertException 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CatchWithAlwaysCastAlertException.quorum")
        files:Add(main)
        results:Add(0, "3")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CatchWithAlwaysCastException 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CatchWithAlwaysCastException.quorum")
        files:Add(main)
        results:Add(0, "3")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CatchWithAlwaysCastSimpleAlertException 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CatchWithAlwaysCastSimpleAlertException.quorum")
        files:Add(main)
        results:Add(0, "3")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CaughtActionException 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CaughtActionException.quorum")
        files:Add(main)
        results:Add(0, "Error: callMe failed")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CaughtActionExceptionWithAlways 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CaughtActionExceptionWithAlways.quorum")
        files:Add(main)
        results:Add(0, "Error: callMe failed")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CheckDetectAlwaysEmptyCheck 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CheckDetectAlwaysEmptyCheck.quorum")
        files:Add(main)
        results:Add(0, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CheckDetectAlwaysEmptyCheckInElse 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CheckDetectAlwaysEmptyCheckInElse.quorum")
        files:Add(main)
        results:Add(0, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CheckDetectAlwaysEmptyCheckInElseIf 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CheckDetectAlwaysEmptyCheckInElseIf.quorum")
        files:Add(main)
        results:Add(0, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CheckDetectAlwaysEmptyCheckInIf 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CheckDetectAlwaysEmptyCheckInIf.quorum")
        files:Add(main)
        results:Add(0, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CheckDetectAlwaysEmptyCheckInIfElseElseIf 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CheckDetectAlwaysEmptyCheckInIfElseElseIf.quorum")
        files:Add(main)
        results:Add(0, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CheckDetectAlwaysEmptyCheckInRepeatTimes 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CheckDetectAlwaysEmptyCheckInRepeatTimes.quorum")
        files:Add(main)
        results:Add(0, "always")
        results:Add(1, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CheckDetectAlwaysEmptyCheckInRepeatUntil 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CheckDetectAlwaysEmptyCheckInRepeatUntil.quorum")
        files:Add(main)
        results:Add(0, "always")
        results:Add(1, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CheckDetectAlwaysEmptyCheckInRepeatWhile 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CheckDetectAlwaysEmptyCheckInRepeatWhile.quorum")
        files:Add(main)
        results:Add(0, "always")
        results:Add(1, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CheckDetectAlwaysInElse 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CheckDetectAlwaysInElse.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CheckDetectAlwaysInElseIf 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CheckDetectAlwaysInElseIf.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CheckDetectAlwaysInIf 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CheckDetectAlwaysInIf.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CheckDetectInElse 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CheckDetectInElse.quorum")
        files:Add(main)
        results:Add(0, "detect")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CheckDetectInElseIf 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CheckDetectInElseIf.quorum")
        files:Add(main)
        results:Add(0, "detect")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CheckDetectInIf 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CheckDetectInIf.quorum")
        files:Add(main)
        results:Add(0, "detect")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CheckDetectInRepeatTimes 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CheckDetectInRepeatTimes.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "detect")
        results:Add(2, "detect")
        results:Add(3, "detect")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CheckDetectInRepeatTimesIf 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CheckDetectInRepeatTimesIf.quorum")
        files:Add(main)
        results:Add(0, "detect")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CheckDetectInRepeatUntil 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CheckDetectInRepeatUntil.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "detect")
        results:Add(2, "detect")
        results:Add(3, "detect")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CheckDetectInRepeatUntilIf 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CheckDetectInRepeatUntilIf.quorum")
        files:Add(main)
        results:Add(0, "detect")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CheckDetectInRepeatWhile 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CheckDetectInRepeatWhile.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "detect")
        results:Add(2, "detect")
        results:Add(3, "detect")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CheckDetectInRepeatWhileIf 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CheckDetectInRepeatWhileIf.quorum")
        files:Add(main)
        results:Add(0, "detect")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ComplexExceptionScenario1 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ComplexExceptionScenario1.quorum")
        files:Add(main)
        results:Add(0, "ok 1")
        results:Add(1, "ok 2")
        results:Add(2, "ok 3")
        results:Add(3, "ok 4")
        results:Add(4, "ok 5")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ComplexExceptionScenario2 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ComplexExceptionScenario2.quorum")
        files:Add(main)
        results:Add(0, "ok 1")
        results:Add(1, "ok 2")
        results:Add(2, "ok 3")
        results:Add(3, "ok 1")
        results:Add(4, "ok 2")
        results:Add(5, "ok 3")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GenericCatchCastAlertException 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GenericCatchCastAlertException.quorum")
        files:Add(main)
        results:Add(0, "2")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GenericCatchCastException 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GenericCatchCastException.quorum")
        files:Add(main)
        results:Add(0, "2")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action IfElseIfElseInAlways 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "IfElseIfElseInAlways.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action IfElseIfElseInCheck 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "IfElseIfElseInCheck.quorum")
        files:Add(main)
        results:Add(0, "detect")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action IfElseIfElseInCheckWithAlways 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "IfElseIfElseInCheckWithAlways.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action IfElseIfElseInDetect 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "IfElseIfElseInDetect.quorum")
        files:Add(main)
        results:Add(0, "detect")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action IfElseIfElseInDetectWithAlways 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "IfElseIfElseInDetectWithAlways.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action IfElseIfInAlways 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "IfElseIfInAlways.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action IfElseIfInCheck 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "IfElseIfInCheck.quorum")
        files:Add(main)
        results:Add(0, "detect")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action IfElseIfInCheckWithAlways 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "IfElseIfInCheckWithAlways.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action IfElseIfInDetect 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "IfElseIfInDetect.quorum")
        files:Add(main)
        results:Add(0, "detect")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action IfElseIfInDetectWithAlways 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "IfElseIfInDetectWithAlways.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action IfInAlways 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "IfInAlways.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action IfInCheck 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "IfInCheck.quorum")
        files:Add(main)
        results:Add(0, "detect")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action IfInCheckWithAlways 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "IfInCheckWithAlways.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action IfInDetect 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "IfInDetect.quorum")
        files:Add(main)
        results:Add(0, "detect")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action IfInDetectWithAlways 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "IfInDetectWithAlways.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action MultipleDetects 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "MultipleDetects.quorum")
        files:Add(main)
        results:Add(0, "error")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action MultipleDetectsWithAlways 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "MultipleDetectsWithAlways.quorum")
        files:Add(main)
        results:Add(0, "error")
        results:Add(1, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end


    action NestedAlwaysWithException 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "NestedAlwaysWithException.quorum")
        files:Add(main)
        results:Add(0, "X")
        results:Add(1, "Y")
        results:Add(2, "hi")
        results:Add(3, "hi2")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action NestedCatchCastAlertException 
        Array<File> files
        Array<text> results
        File main
        File dependent1
        File dependent2
        main:SetPath(path + "NestedCatchCastAlertException.quorum")
        dependent1:SetPath(path + "A_2.quorum")
        dependent2:SetPath(path + "B_2.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        results:Add(0, "3")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action NestedCatchCastException 
        Array<File> files
        Array<text> results
        File main
        File dependent1
        File dependent2
        main:SetPath(path + "NestedCatchCastException.quorum")
        dependent1:SetPath(path + "A_1.quorum")
        dependent2:SetPath(path + "B_1.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        results:Add(0, "3")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action NestedCatchSimpleAlertException 
        Array<File> files
        Array<text> results
        File main
        File dependent1
        File dependent2
        main:SetPath(path + "NestedCatchSimpleAlertException.quorum")
        dependent1:SetPath(path + "A_3.quorum")
        dependent2:SetPath(path + "B_3.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        results:Add(0, "3")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action NestedCheckDetectInAllBlocks 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "NestedCheckDetectInAllBlocks.quorum")
        files:Add(main)
        results:Add(0, "A")
        results:Add(1, "C")
        results:Add(2, "inner always 2")
        results:Add(3, "outer always")
        results:Add(4, "D")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RecursiveCallFromAlways 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RecursiveCallFromAlways.quorum")
        files:Add(main)
        results:Add(0, "detect hit")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatTimesInAlways 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatTimesInAlways.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "always")
        results:Add(2, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatTimesInCheck 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatTimesInCheck.quorum")
        files:Add(main)
        results:Add(0, "detect")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatTimesInCheckWithAlways 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatTimesInCheckWithAlways.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatTimesInDetect 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatTimesInDetect.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "detect")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatTimesInDetectWithAlways 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatTimesInDetectWithAlways.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "detect")
        results:Add(2, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatUntilInAlways 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatUntilInAlways.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "always")
        results:Add(2, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatUntilInCheck 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatUntilInCheck.quorum")
        files:Add(main)
        results:Add(0, "detect")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatUntilInCheckWithAlways 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatUntilInCheckWithAlways.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatUntilInDetect 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatUntilInDetect.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "detect")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatUntilInDetectWithAlways 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatUntilInDetectWithAlways.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "detect")
        results:Add(2, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatWhileInAlways 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatWhileInAlways.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "always")
        results:Add(2, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatWhileInCheck 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatWhileInCheck.quorum")
        files:Add(main)
        results:Add(0, "detect")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatWhileInCheckWithAlways 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatWhileInCheckWithAlways.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatWhileInDetect 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatWhileInDetect.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "detect")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatWhileInDetectWithAlways 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatWhileInDetectWithAlways.quorum")
        files:Add(main)
        results:Add(0, "detect")
        results:Add(1, "detect")
        results:Add(2, "always")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RethrowError 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RethrowError.quorum")
        files:Add(main)
        results:Add(0, "alert")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RethrowErrorWithAlways 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RethrowErrorWithAlways.quorum")
        files:Add(main)
        results:Add(0, "always")
        results:Add(1, "alert")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action TriplyNestedCheckDetect 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "TriplyNestedCheckDetect.quorum")
        files:Add(main)
        results:Add(0, "detect 1")
        results:Add(1, "detect 2")
        results:Add(2, "check 3")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action TriplyNestedCheckDetectAlways 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "TriplyNestedCheckDetectAlways.quorum")
        files:Add(main)
        results:Add(0, "detect 1")
        results:Add(1, "detect 2")
        results:Add(2, "check 3")
        results:Add(3, "always 3")
        results:Add(4, "always 2")
        results:Add(5, "always 1")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action TriplyNestedCheckDetectSomeAlways 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "TriplyNestedCheckDetectSomeAlways.quorum")
        files:Add(main)
        results:Add(0, "detect 1")
        results:Add(1, "detect 2")
        results:Add(2, "check 3")
        results:Add(3, "always 2")
        results:Add(4, "always 1")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

//FAIL TESTS
    action CastTextToIntegerException 
        Array<File> files
        File main
        main:SetPath(path + "CastTextToIntegerException.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action CastTextToNumberException 
        Array<File> files
        File main
        main:SetPath(path + "CastTextToNumberException.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action MultipleDetectsWithAlwaysThrowingCastError 
        Array<File> files
        File main
        main:SetPath(path + "MultipleDetectsWithAlwaysThrowingCastError.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action NestedUncaughtCastAlertException 
        Array<File> files
        File main
        File dependent1
        File dependent2
        main:SetPath(path + "NestedUncaughtCastAlertException.quorum")
        dependent1:SetPath(path + "A_2.quorum")
        dependent2:SetPath(path + "B_2.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action NestedUncaughtCastException 
        Array<File> files
        File main
        File dependent1
        File dependent2
        main:SetPath(path + "NestedUncaughtCastException.quorum")
        dependent1:SetPath(path + "A_1.quorum")
        dependent2:SetPath(path + "B_1.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action NestedUncaughtSimpleAlertException 
        Array<File> files
        File main
        File dependent1
        File dependent2
        main:SetPath(path + "NestedUncaughtSimpleAlertException.quorum")
        dependent1:SetPath(path + "A_3.quorum")
        dependent2:SetPath(path + "B_3.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action UncaughtCastAlertException 
        Array<File> files
        File main
        main:SetPath(path + "UncaughtCastAlertException.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action UncaughtCastException 
        Array<File> files
        File main
        main:SetPath(path + "UncaughtCastException.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action UncaughtErrorInAlways 
        Array<File> files
        File main
        main:SetPath(path + "UncaughtErrorInAlways.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action UncaughtSimpleAlertException 
        Array<File> files
        File main
        main:SetPath(path + "UncaughtSimpleAlertException.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action missingParameters 
        Array<File> files
        File main
        main:SetPath(path + "missingParameters.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action missingParameters2 
        Array<File> files
        File main
        main:SetPath(path + "missingParameters2.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end
end

