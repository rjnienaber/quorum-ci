package Libraries.Language.Compile.Symbol

use Libraries.Containers.HashTable
use Libraries.Language.Compile.CompilerErrorType
use Libraries.Language.Compile.Translate.JavaBytecodeOpcodes
use Libraries.Language.Compile.Translate.JavaOpcodeWriter

class TypeChecker
    HashTable<text, TypeCheckResult> results
    Type constants
    JavaBytecodeOpcodes opcodes
    on create
        GenerateTypeCheckingTable()
    end

    action GenerateTypeCheckingTable
        TypeCheckResult result = undefined
        Type type = undefined
        Operation opConstant
        JavaOpcodeWriter opcodeWriter = undefined
        ////////////////////////////////////////////////////////////////////////
        //INTEGER INTEGER
        ////////////////////////////////////////////////////////////////////////
        Operation op = GetOperation(opConstant:PLUS)
        text key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
                constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        opcodeWriter = result:writer
        opcodeWriter:AddOpcode(opcodes:GetIntegerAdd())
        type = result:result
        type:SetToInteger()
        results:Add(key, result)

        op = GetOperation(opConstant:MINUS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        opcodeWriter = result:writer
        opcodeWriter:AddOpcode(opcodes:GetIntegerSubtract())
        type = result:result
        type:SetToInteger()
        results:Add(key, result)

        op = GetOperation(opConstant:TIMES)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        opcodeWriter = result:writer
        opcodeWriter:AddOpcode(opcodes:GetIntegerMultiply())
        type = result:result
        type:SetToInteger()
        results:Add(key, result)

        op = GetOperation(opConstant:DIVIDE)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        opcodeWriter = result:writer
        opcodeWriter:AddOpcode(opcodes:GetIntegerDivide())
        type = result:result
        type:SetToInteger()
        results:Add(key, result)

        op = GetOperation(opConstant:MODULUS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        opcodeWriter = result:writer
        opcodeWriter:AddOpcode(opcodes:GetIntegerModulus())
        type = result:result
        type:SetToInteger()
        results:Add(key, result)

        op = GetOperation(opConstant:EQUALS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)

        op = GetOperation(opConstant:NOT_EQUALS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)

        op = GetOperation(opConstant:GREATER_EQUALS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)

        op = GetOperation(opConstant:GREATER)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)

        op = GetOperation(opConstant:LESS_EQUALS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)

        op = GetOperation(opConstant:LESS_EQUALS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)
    end

    action GetOperation(integer value) returns Operation
        Operation op
        op:SetOperation(value)
        return op
    end

    action GetNoConvertResult returns TypeCheckResult
        TypeCheckResult result
        
        TypeConversionConstants c = result:conversion
        c:SetConversion(c:NONE)
        result:errorMessage = ""
        return result
    end

    action GenerateTypeCheckKey(text left, text right,
            Operation op, boolean assignment) returns text
        return GenerateTypeCheckKey(left, right, op, assignment, false)
    end

    action GenerateTypeCheckKey(text left, text right,
            Operation op, boolean assignment, boolean local) returns text
        text a = "f"
        if assignment 
            a = "t"
        end

        if op not= undefined 
            return left  + "$" + right + "$" + op:GetText() + "$" + a + "$" + local
        else
            return left  + "$" + right + "$" + a + "$" + local
        end
    end
    
    action Check(Type left, Type right, Operation op) returns TypeCheckResult
        return Check(left, right, op, false, false)
    end

    action Check(Type left, Type right, Operation op, boolean assignment) returns TypeCheckResult
        return Check(left, right, op, assignment, false)
    end

    action Check(Type left, Type right, Operation op, boolean assignment, boolean local) returns TypeCheckResult
        text leftKey = ""
        text rightKey = ""

        if left not= undefined
            leftKey = left:GetStaticKey()
        end

        if right not= undefined
            rightKey = right:GetStaticKey()
        end

        text key = GenerateTypeCheckKey(leftKey, rightKey, op, assignment, local)
        TypeCheckResult result = results:GetValue(key)

        if result = undefined
            TypeCheckResult newResult
            CompilerErrorType error
            result = newResult

            TypeConversionConstants convert = result:conversion
            convert:SetConversion(convert:INCOMPATIBLE)
            text quote = leftKey:GetDoubleQuote()
            if assignment
                //leftKey = "" //account for generics later
                //rightKey = "" //account for generics later

                result:errorMessage = "Cannot assign a value of type " + quote + 
                    rightKey + quote + "" + " to a variable of type " + quote + leftKey + quote + "."
                error:SetCurrentType(error:INVALID_OPERATOR)
                result:errorType = error
            else 
                result:errorMessage = "The operation " + quote + leftKey + quote + " " + op:GetText()
                    + " " + quote + rightKey + quote + ", is not allowed."
                error:SetCurrentType(error:INCOMPATIBLE_TYPES)
                result:errorType = error
            end
        end
        
        return result
    end

    action Check(Type left, Operation op) returns TypeCheckResult
        return undefined
    end
end