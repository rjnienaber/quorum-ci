package Libraries.Language.Compile

use Libraries.Language.Compile.Context.all
use Libraries.Containers.Stack
use Libraries.Language.Compile.Symbol.all
use Libraries.System.File
use Libraries.Containers.List
use Libraries.Containers.Blueprints.Iterator

class Parser is QuorumSourceListener
    QualifiedName packageValue = undefined
    Source source
    SymbolTable symbolTable = undefined
    Action currentAction = undefined
    Class currentClass = undefined
    Block currentBlock = undefined
    Stack<Block> blocks

    action EnterStart(StartContext context) 
        source:SetFile(me:GetFile())
        symbolTable = me:GetSymbolTable()
    end

    action ExitPackageRule(PackageContext context) 
        packageValue = context:name
    end

    action EnterFullClassDeclaration(FullClassDeclarationContext context)
        text name = context:className
        AddClass(name)
    end

    action ExitFullClassDeclaration(FullClassDeclarationContext context) end

    

    action AddClass(text name)
        
        text key = name
        Class clazz

        if packageValue not= undefined
            key = packageValue:GetStaticKey() + "." + name
            clazz:SetPackage(packageValue)
        else 
            QualifiedName default
            clazz:SetPackage(default)
        end
        
        
        clazz:SetName(name)
        clazz:SetFile(GetFile())
        CompilerError error = symbolTable:Add(clazz)
        if error not= undefined
            CompilerErrorManager manager = GetCompilerErrorManager()
            manager:Add(error)
        else 
            currentClass = clazz
        end
    end

    action EnterNoClassDeclaration(NoClassDeclarationContext context) 
        File file = me:GetFile()
        text name = file:GetFileName()
        text extension = file:GetFileExtension()
        length = extension:GetSize()
        name = name:GetSubtext(0, name:GetSize() - length - 1)
        AddClass(name)
    end

    action ExitNoClassDeclaration(NoClassDeclarationContext context)  end

    action EnterSystemAction(ActionContext context) 
        Action act
        currentAction = act
        currentAction:SetIsSystem(true)
    end

    action EnterBlock 
        Block block
        if currentAction not= undefined
            currentAction:AddBlock(block)
        end
        currentBlock = block
        blocks:Push(block)
    end
    
    action ExitBlock
        if not blocks:IsEmpty()
            currentBlock = blocks:Pop()
        else 
            currentBlock = undefined
        end
    end


    action ExitSystemAction(ActionContext context) 
    end

    action EnterConstructor 
        if currentClass not= undefined
            Action constructor
            currentAction = constructor
            currentClass:SetConstructor(constructor)
        end
    end

    action ExitConstructor 
        currentAction = undefined
    end

    action EnterBlueprintAction(ActionContext context) 
        Action act
        currentAction = act
        currentAction:SetIsBluePrint(true)
    end

    action ExitBlueprintAction(ActionContext context)
    end

    action ExitActionHeader(ActionContext context)
        List<Variable> headerParams = context:parameters
        Iterator<Variable> it = headerParams:GetIterator()
        repeat while it:HasNext()
            Variable param = it:Next()
            currentAction:AddParameter(param)
        end

        
        currentAction:SetReturnType(context:returnType)
        currentAction:SetName(context:actionName)
        currentAction:SetLocation(context:GetLocation())

        //add it to the class
        CompilerError error = currentClass:Add(currentAction)
        if error not= undefined
            CompilerErrorManager manager = me:GetCompilerErrorManager()
            manager:Add(error)
        end
    end

    action EnterAction(ActionContext context) 
        Action act
        currentAction = act
        act:SetParentClass(currentClass)
    end

    action ExitAction(ActionContext context) 
    end

    action ExitNormalAssignment(NormalAssignmentContext context)
        Variable variable
        variable:SetLocation(context:GetLocation())
        if context:isPublic
            variable:SetPublic()
        end

        variable:SetHasExplicitModifier(context:hasModifier)
        variable:SetName(context:name)
        variable:SetIsParameter(false)
        variable:SetType(context:leftHandSide) //guaranteed to exist for this rule
        //the right hand side is not guaranteed to exist for this
        //particular rule. If it is there, we don't care about it in the 
        //parser anyway, because we can't type check in the first pass
        CompilerError error = undefined
        if currentBlock = undefined //we're in a field initiatlization block
            error = currentClass:Add(variable)
        else //we're in the block of an action
            error = currentBlock:Add(variable)
        end

        if error not= undefined
            CompilerErrorManager manager = GetCompilerErrorManager()
            manager:Add(error)
        end
    end

    action EnterParentAssignment(ParentAssignmentContext context) end
    action ExitParentAssignment(ParentAssignmentContext context) end

    action EnterObjectAssignment(ObjectAssignmentContext context) end
    action ExitObjectAssignment(ObjectAssignmentContext context) end

    action EnterNoTypeAssignment(NoTypeAssignmentContext context) end
    action ExitNoTypeAssignment(NoTypeAssignmentContext context) 
        Variable variable
        variable:SetLocation(context:GetLocation())
        variable:SetName(context:name)
        variable:SetIsParameter(false)


        CompilerError error = undefined
        if currentBlock = undefined //we're in a field initiatlization block
            error = currentClass:Add(variable)
        else //we're in the block of an action
            error = currentBlock:Add(variable)
        end

        if error not= undefined
            CompilerErrorManager manager = GetCompilerErrorManager()
            manager:Add(error)
        end
    end
end