package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type
use Libraries.Language.Compile.Symbol.Block
use Libraries.Language.Compile.Translate.BlockOpcode
use Libraries.Language.Compile.Location
use Libraries.Containers.List
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Symbol.Class
use Libraries.Language.Compile.Symbol.Variable

class CheckDetectOpcode is QuorumOpcode
    BlockOpcode block = undefined
    DetectBlockOpcode alwaysBlock = undefined
    List<DetectBlockOpcode> detectBlocks
    JavaBytecodeOpcodes opcodes
    integer whichCheck = 0
    public constant text THROWABLE = "java/lang/Throwable"
    List<ErrorBlockLabels> detectValues
    List<ErrorBlockLabels> alwaysValues

    action SetBytecodeWriteOffsetToAllChildren(integer offset)
        SetBytecodeWriteOffset(offset)
        if block not= undefined
            block:SetBytecodeWriteOffsetToAllChildren(offset)
        end

        Iterator<DetectBlockOpcode> detects = detectBlocks:GetIterator()
        repeat while detects:HasNext()
            DetectBlockOpcode b = detects:Next()
            b:SetBytecodeWriteOffsetToAllChildren(offset)
        end
        
        if alwaysBlock not= undefined
            alwaysBlock:SetBytecodeWriteOffsetToAllChildren(offset)
        end
    end

    action SetMethodWriterToAllChildren(JavaBytecodeMethodWriter writer)
        SetMethodWriter(writer)

        if block not= undefined
            block:SetMethodWriterToAllChildren(writer)
        end

        Iterator<DetectBlockOpcode> detects = detectBlocks:GetIterator()
        repeat while detects:HasNext()
            DetectBlockOpcode b = detects:Next()
            b:SetMethodWriterToAllChildren(writer)
        end
        
        if alwaysBlock not= undefined
            alwaysBlock:SetMethodWriterToAllChildren(writer)
        end
    end

    action AddDetectBlock(DetectBlockOpcode op)
        detectBlocks:Add(op)
    end

    action GetCheckLabelInteger returns integer
        return whichCheck
    end

    action SetCheckLabelInteger(integer value)
        whichCheck = value
    end

    action SetBlock(BlockOpcode block)
        me:block = block
    end

    action GetBlock returns BlockOpcode
        return block
    end

    action SetAlwaysBlock(DetectBlockOpcode block)
        me:alwaysBlock = block
    end

    action GetAlwaysBlock returns DetectBlockOpcode
        return alwaysBlock
    end

    action Write 
        JavaBytecodeLabel checkStart
        JavaBytecodeLabel checkEnd
        JavaBytecodeLabel fullEnd
        JavaBytecodeLabel finalAlways
        JavaBytecodeLabel lastDetectEnd = undefined
        integer maxDetectBlockSize = 0
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()

        boolean isCheckEmpty = false
        if block not= undefined
            if block:IsEmpty()
                isCheckEmpty = true
            end
        else
            alert("Check block is empty. This is a compiler bug.")
        end

        text null = undefined //workaround
        if not isCheckEmpty
            methodWriter:VisitLabel(checkStart)
            block:Write()
            methodWriter:VisitLabel(checkEnd)
        end

        if alwaysBlock not= undefined
            JavaBytecodeLabel alwaysStart
            methodWriter:VisitLabel(alwaysStart)
            alwaysBlock:Write()
            if not isCheckEmpty
                ErrorBlockLabels labels
                labels:left = checkStart
                labels:middle = checkEnd
                labels:right = finalAlways
                labels:type = null
                alwaysValues:Add(labels)
            end
        end
        methodWriter:VisitJump(opcodes:GetGoto(), fullEnd)

        integer detectBlockExceptionLocation = 0
        JavaBytecodeLabel detectStart
        if not detectBlocks:IsEmpty() and not isCheckEmpty
            methodWriter:VisitLabel(detectStart)
            ErrorBlockLabels detectLabels
            detectLabels:left = checkStart
            detectLabels:middle = checkEnd
            detectLabels:right = detectStart
            detectLabels:type = THROWABLE

            WriteTableRow(detectLabels)
            methodWriter:VisitMethodInvoke(opcodes:GetInvokeStatic(), "plugins/quorum/Libraries/Language/Errors/Error", "ConvertToQuorumError",
            "(Ljava/lang/Throwable;)Lquorum/Libraries/Language/Errors/Error;", false)
            
            //This is the wrong value, but this is in the right direction.
            DetectBlockOpcode block = detectBlocks:Get(0)
            Variable except = block:GetExceptionVariable()
            detectBlockExceptionLocation = except:GetBytecodeLocation()
            methodWriter:VisitVariable(opcodes:GetObjectStore(), except:GetBytecodeLocation())
        end

        if not isCheckEmpty
            Iterator<DetectBlockOpcode> it = detectBlocks:GetIterator()
            repeat while it:HasNext()
                DetectBlockOpcode det = it:Next()

                Iterator<Class> detects = det:GetDetectIterator()
                repeat while detects:HasNext()
                    Class clazz = detects:Next()
                    BlockOpcode blockOpcode = det:GetBlock()
                    JavaBytecodeLabel detectBlockEnd

                    //first push the variable on
                    Variable except = det:GetExceptionVariable()
                    methodWriter:VisitVariable(opcodes:GetObjectLoad(), except:GetBytecodeLocation())

                    //check to see if it is the declared class type
                    methodWriter:VisitType(opcodes:GetInstanceOf(), clazz:ConvertStaticKeyToBytecodePath())

                    //if not, jump to the next block. If so, fall through
                    methodWriter:VisitJump(opcodes:GetIfEquals(), detectBlockEnd)
                    det:Write()
                    
                    Block block = blockOpcode:GetBlock()
                    integer value = block:GetBytecodeLocation()
                    if value - 1 > maxDetectBlockSize
                        maxDetectBlockSize = value - 1
                    end
                    if alwaysBlock = undefined
                        methodWriter:VisitJump(opcodes:GetGoto(), fullEnd)
                    end
                    methodWriter:VisitLabel(detectBlockEnd)
                end
            end

            if alwaysBlock not= undefined
                JavaBytecodeLabel alwaysStart
                methodWriter:VisitLabel(alwaysStart)
                alwaysBlock:Write()
                methodWriter:VisitJump(opcodes:GetGoto(), fullEnd)

                ErrorBlockLabels labels
                labels:left = detectStart
                labels:middle = alwaysStart
                labels:right = finalAlways
                labels:type = null
                alwaysValues:Add(labels)
            end
        end

        if alwaysBlock not= undefined and not isCheckEmpty
            JavaBytecodeLabel finalAlwaysEnd
            methodWriter:VisitLabel(finalAlways)

            //get the parent block's final bytecode location and put it in as an offset.
//            BlockOpcode bo = alwaysBlock:GetBlock()
//            Block b = bo:GetBlock()
//            integer loc = b:GetBytecodeLocation() + GetBytecodeOffset()
//            integer max = maxDetectBlockSize
//            if loc < maxDetectBlockSize + GetBytecodeOffset()
//                loc = max + GetBytecodeOffset()
//            end

            alwaysBlock:SetBytecodeWriteOffsetToAllChildren(detectBlockExceptionLocation + 1)
            alwaysBlock:WriteExceptionVariable()
            methodWriter:VisitLabel(finalAlwaysEnd)
            alwaysBlock:Write()
            alwaysBlock:Rethrow()
            alwaysBlock:SetBytecodeWriteOffsetToAllChildren(0)

            ErrorBlockLabels labels
            labels:left = finalAlways
            labels:middle = finalAlwaysEnd
            labels:right = finalAlways
            labels:type = null
            alwaysValues:Add(labels)
        end

        WriteExceptionTable()
        methodWriter:VisitLabel(fullEnd)
    end

    private action WriteExceptionTable
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        Iterator<ErrorBlockLabels> it = undefined

        it = alwaysValues:GetIterator()
        repeat while it:HasNext()
            ErrorBlockLabels labels = it:Next()
            WriteTableRow(labels)
        end
    end

    private action WriteTableRow(ErrorBlockLabels labels)
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        methodWriter:VisitTryCatchBlock(labels:left, labels:middle, labels:right, labels:type)
    end

    action WriteJavaScript returns text
        return ""
    end

    action GetTemplateCopy returns QuorumOpcode
        CheckDetectOpcode op


        return op
    end
end