package Libraries.Web

use Libraries.Web.WebTag
use Libraries.Web.Attribute
use Libraries.Web.Attributes

/*
The Video class represents HTML's (Hypertext Markup Language) video tag which is
used to add a video to the page.
You can find more information about this tag at: 
        <a href="http://www.w3schools.com/tags/tag_video.asp">The video attribute</a>.

Attribute: Example
use Libraries.Web.all

class Main
    action main
      WebPage page

      Video video
      video:SetWidth("350")
      video:SetHeight("270")
      video:SetControlsVisible(true)

      page:AddToBody(video)
      output page:Generate()
    end
end
*/
class Video is WebTag
    constant text autoplay = "autoplay"
    constant text controls = "controls"
    constant text height = "height"
    constant text width = "width"
    constant text loop = "loop"
    constant text source = "src"
    constant text poster = "poster"
    constant text preload = "preload"
    constant text muted = "muted"

    public constant text autoPreload = "auto"
    public constant text metaDataPreload = "metadata"
    public constant text noPreload = "none"

    /*
        This action gets a boolean of whether autoplay is enable or not. If autoplay
        it enable true is returned and if autoplay is disabled false is returned.
        

        Attribute: Returns The autoplay state.

        Attribute: Example
        use Libraries.Web.Video

        Video video
        video:SetAutoPlay(true)
        boolean autoplay = video:GetAutoPlay()
        
    */
    action GetAutoPlay returns boolean
        return me:HasAttribute(autoplay)
    end

    /*
        This action sets the autoplay of a video. If autoplay is set to true
        autoplay will be enabled. If autoplay is set to false autoplay will be disabled.
        

        Attribute: Parameter ifAutoPlay True to enable autoplaying of a video and false to disable autoplay.

        Attribute: Example
        use Libraries.Web.Video

        Video video
        video:SetAutoPlay(true)
        
    */
    action SetAutoPlay(boolean isAutoPlay)
        if isAutoPlay
            AddAttribute(autoplay, autoplay)
        else
            RemoveAttribute(autoplay)
        end
    end

    /*
        This action gets a boolean of whether the video controls are visible or not. 
        Passing a value of true will make the video controls visible and a value of false
        will make the video controls invisible to the user.
        

        Attribute: Returns The video control's state of visiblity.

        Attribute: Example
        use Libraries.Web.Video

        Video video
        video:SetControlsVisible(true)
        boolean controls = video:GetControlsVisible()
        
    */
    action GetControlsVisible returns boolean
        return me:HasAttribute(controls)
    end

    /*
        This action sets the controls of a video to visible. If controls are set to true
        the controls will be visible in the video. If controls are set to false they will
        not be displayed.
        

        Attribute: Parameter controlsVisible True to make the video conrols visible and false to make them invisible.

        Attribute: Example
        use Libraries.Web.Video

        Video video
        video:SetControlsVisible(true)
        
    */
    action SetControlsVisible(boolean controlsVisible)
        if controlsVisible
            AddAttribute(controls, controls)
        else
            RemoveAttribute(controls)
        end
    end

    /*
        This action gets the height of the video viewing area.
        

        Attribute: Returns The height of the video viewing area.

        Attribute: Example
        use Libraries.Web.Video
        use Libraries.Web.Attribute

        Video video
        video:SetHeight("250")
        Attribute height = video:GetHeight()
        
    */
    action GetHeight returns Attribute
        return me:GetAttribute(height)
    end

    /*
        This action sets the height of the video viewing area.
        

        Attribute: Parameter value The height of the video viewing area.

        Attribute: Example
        use Libraries.Web.Video

        Video video
        video:SetHeight("250")
        
    */
    action SetHeight(text value)
        AddAttribute(height, value)
    end

    /*
        This action gets the width of the video viewing area.
        

        Attribute: Returns The width of the video viewing area.

        Attribute: Example
        use Libraries.Web.Video
        use Libraries.Web.Attribute

        Video video
        video:SetWidth("250")
        Attribute width = video:GetWidth()
        
    */
    action GetWidth returns Attribute
        return me:GetAttribute(width)
    end

    /*
        This action sets the width of the video viewing area.
        

        Attribute: Parameter value The width of the video viewing area.

        Attribute: Example
        use Libraries.Web.Video

        Video video
        video:SetWidth("250")
        
    */
    action SetWidth(text value)
        AddAttribute(width, value)
    end

    /*
        This action gets a boolean of whether the video should loop or not. If true
        the video playback will be looped and if false video playback will play once.
        

        Attribute: Returns True if the video will loop and false if it will play once.

        Attribute: Example
        use Libraries.Web.Video

        Video video
        video:SetLoop(true)
        boolean loop = video:GetLoop()
        
    */
    action GetLoop returns boolean
        return me:HasAttribute(loop)
    end

    /*
        This action sets the loop of a video. If loop is set to true
        the video will loop. If loop is set to false the video will not loop the video.
        

        Attribute: Parameter loopVideo True to loop and false to not loop the video.

        Attribute: Example
        use Libraries.Web.Video

        Video video
        video:SetLoop(true)
        
    */
    action SetLoop(boolean loopVideo)
        if loopVideo
            AddAttribute(loop, loop)
        else
            RemoveAttribute(loop)
        end
    end

    /*
        This action gets the URL or location of the video.
        

        Attribute: Returns The URL or location of the video.

        Attribute: Example
        use Libraries.Web.Video
        use Libraries.Web.Attribute

        Video video
        video:SetAddress("myMovie.ogg")
        Attribute source = video:GetAddress()
        
    */
    action GetAddress returns Attribute
        return me:GetAttribute(source)
    end

    /*
        This action sets the URL or location of the video.
        

        Attribute: Parameter value The URL or location of the video.

        Attribute: Example
        use Libraries.Web.Video

        Video video
        video:SetAddress("myMovie.ogg")
        
    */
    action SetAddress(text value)
        AddAttribute(source, value)
    end

    /*
        This action gets the URL or location of the image to be displayed while
        the video is loading or before the play button has been pressed.
        

        Attribute: Returns The URL or location of the image to display during load.

        Attribute: Example
        use Libraries.Web.Video
        use Libraries.Web.Attribute

        Video video
        video:SetPoster("poster.gif")
        Attribute poster = video:GetPoster()
        
    */
    action GetPoster returns Attribute
        return me:GetAttribute(poster)
    end

    /*
        This action sets the URL or location of the image to be displayed while
        the video is loading or before the play button has been pressed.
        

        Attribute: Parameter value The URL or location of the image to display during load.

        Attribute: Example
        use Libraries.Web.Video

        Video video
        video:SetPoster("poster.gif")
        
    */
    action SetPoster(text value)
        AddAttribute(poster, value)
    end

    /*
        This action gets the way the video is to be loaded. The options include,
        "auto" to load the video when the page loads, "metadata" to load only meta data
        when the page loads, and "none" if the video should not be loaded when the 
        page loads.
        

        Attribute: Returns The preload specifications.

        Attribute: Example
        use Libraries.Web.Video
        use Libraries.Web.Attribute

        Video video
        video:SetPreload("metadata")
        Attribute preload = video:GetPreload()
        
    */
    action GetPreload returns Attribute
        return me:GetAttribute(preload)
    end

    /*
        This action sets the way the video is to be loaded. The options include,
        "auto" to load the video when the page loads, "metadata" to load only meta data
        when the page loads, and "none" if the video should not be loaded when the 
        page loads.
        

        Attribute: Parametr value The preload specifications.

        Attribute: Example
        use Libraries.Web.Video

        Video video
        video:SetPreload("none")
        
    */
    action SetPreload(text value)
        AddAttribute(preload, value)
    end

    /*
        This action gets a boolean of whether sound is muted or not. If muted
        the value of true will be returned and false if the sound is not muted.
        

        Attribute: Returns True if muted and false if not.

        Attribute: Example
        use Libraries.Web.Video

        Video video
        video:SetMuted(true)
        boolean muted = video:GetMuted()
        
    */
    action GetMuted returns boolean
        return me:HasAttribute(muted)
    end

    /*
        This action sets a boolean of whether sound is muted or not. If muted
        the value of true will be returned and false if the sound is not muted.
        

        Attribute: Parameter isMuted True if muted and false if not.

        Attribute: Example
        use Libraries.Web.Video

        Video video
        video:SetMuted(true)
        
    */
    action SetMuted(boolean isMuted)
        if isMuted
            AddAttribute(muted, muted)
        else
            RemoveAttribute(muted)
        end
    end


    action Generate returns text
        text result = "<video " 
        Attributes attributes = parent:WebTag:GetAttributes()
        attributeText = attributes:Generate()
        result = result + attributeText + ">"
        result = result + me:GenerateNestedTags()
        result = result + GetDescription() + "</video>"
        return result
    end
end