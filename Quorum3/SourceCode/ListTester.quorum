package Libraries.Language.Compile.Test

use Libraries.Language.Compile.all
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Language.Compile.Parser
use Libraries.System.File
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Translate.QuorumJarGenerator
use Libraries.System.StackTraceItem

class ListTester 
    CompilerTestSuite suite = undefined
    text path = "Library/Tests/List/"
    text passPath = path + "Pass/"
    text failPath = path + "Fail/"

    action Test
        path = passPath
        Add()
        Add2()
        Append()
        Clear()
        Contains()
        Copy()
        Get()
        GetFirst()
        GetFirstIndexOf()
        GetLast()
        GetLastIndexOf()
        IsEmpty()
        Iterator()
        ListSortInteger()
        Remove()
        RemoveAll()
        RemoveAt()
        RemoveFirst()
        RemoveLast()
        Set()
        Size()

//FAIL TESTS
        path = failPath
        AddWrongTypeToList()
        //GetLocationEmptyList()
        //GetLocationOutOfBounds()
        //GetLocationEmptyListNeg()
    end

    action GetName returns text
        return "List Tests"
    end
    
    action GetCompilerTestSuite returns CompilerTestSuite
        return suite
    end

    action SetCompilerTestSuite(CompilerTestSuite suite)
        me:suite = suite
    end

    action Add 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Add.quorum")
        files:Add(main)
        results:Add(0, "FirstPurpleDinosaurChairWhiteCouchLego")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Add2 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Add2.quorum")
        files:Add(main)
        results:Add(0, "SystemMonsterComputerClock")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Append 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Append.quorum")
        files:Add(main)
        results:Add(0, "ThisIsATestIThinkMaybe")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Clear 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Clear.quorum")
        files:Add(main)
        results:Add(0, "ThisIsATextLinkedList!")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Contains 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Contains.quorum")
        files:Add(main)
        results:Add(0, "true")
        results:Add(1, "false")
        results:Add(2, "true")
        results:Add(3, "false")
        results:Add(4, "true")
        results:Add(5, "false")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Copy 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Copy.quorum")
        files:Add(main)
        results:Add(0, "true")
        results:Add(1, "1234567")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Get 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Get.quorum")
        files:Add(main)
        results:Add(0, "onefivenineoneeightthreeone")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GetFirst 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GetFirst.quorum")
        files:Add(main)
        results:Add(0, "One")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GetFirstIndexOf 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GetFirstIndexOf.quorum")
        files:Add(main)
        results:Add(0, "0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GetLast 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GetLast.quorum")
        files:Add(main)
        results:Add(0, "Five")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GetLastIndexOf 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GetLastIndexOf.quorum")
        files:Add(main)
        results:Add(0, "4")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action IsEmpty 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "IsEmpty.quorum")
        files:Add(main)
        results:Add(0, "true")
        results:Add(1, "false")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Iterator 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Iterator.quorum")
        files:Add(main)
        results:Add(0, "FirstPurpleDinosaurChairWhiteCouchLego")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ListSortInteger 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ListSortInteger.quorum")
        files:Add(main)
        results:Add(0, "sorted")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Remove 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Remove.quorum")
        files:Add(main)
        results:Add(0, "FiveNineOneEightThreeOne")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RemoveAll 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RemoveAll.quorum")
        files:Add(main)
        results:Add(0, "true")
        results:Add(1, "FiveNineEightThree")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RemoveAt 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RemoveAt.quorum")
        files:Add(main)
        results:Add(0, "FiveNineOneThree")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RemoveFirst 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RemoveFirst.quorum")
        files:Add(main)
        results:Add(0, "FiveNineOneEightThreeOne")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RemoveLast 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RemoveLast.quorum")
        files:Add(main)
        results:Add(0, "OneFiveNineOneEightThree")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Set 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Set.quorum")
        files:Add(main)
        results:Add(0, "eightthreenineone")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Size
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Size.quorum")
        files:Add(main)
        results:Add(0, "0")
        results:Add(1, "28")
        results:Add(2, "7")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

//FAIL TESTS
    action AddWrongTypeToList
        Array<File> files
        File main
        main:SetPath(path + "AddWrongTypeToList.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action GetLocationEmptyList
        Array<File> files
        File main
        main:SetPath(path + "GetLocationEmptyList.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action GetLocationOutOfBounds
        Array<File> files
        File main
        main:SetPath(path + "GetLocationOutOfBounds.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action GetLocationEmptyListNeg
        Array<File> files
        File main
        main:SetPath(path + "GetLocationEmptyListNeg.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

end

