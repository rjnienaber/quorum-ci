package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type
use Libraries.Language.Compile.Symbol.Variable
use Libraries.Containers.List
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Symbol.Action
use Libraries.Language.Compile.Translate.JavaBytecodeOpcodes
use Libraries.Language.Compile.Symbol.Class
use Libraries.Containers.Array
use Libraries.System.File
use Libraries.Language.Compile.QualifiedName

class ClassOpcode is QuorumOpcode
    QualifiedName packageValue = undefined
    Class clazz = undefined
    JavaBytecodeMethodWriter methodWriter = undefined
    ActionOpcode constructor = undefined
    List<ActionOpcode> actions
    List<QuorumOpcode> fields

    JavaBytecodeClassWriter classWriter = undefined
    JavaBytecodeClassWriter interfaceWriter = undefined
    QuorumBytecodeConverter converter
    JavaBytecodeOpcodes opcodes
    text name = ""
    text staticKey = ""
    constant text JAVA_THROWABLE = "java/lang/Throwable"
    constant text JAVA_OBJECT = "java/lang/Object"
    constant text QUORUM_ERROR = "quorum/Libraries/Language/Errors/Error"
    constant text QUORUM_ERROR_INTERFACE = "quorum/Libraries/Language/Errors/Error$Interface"
    constant text QUORUM_LIBRARY_LANGUAGE_ERRORS_ERROR = "Libraries.Language.Errors.Error"
    constant text CONSTRUCTOR_JAVA_NAME = "<init>"
    constant integer ME = 0
    constant text QUORUM = "quorum"
    text buildPath = ""
    text runPath = ""
    File buildFile = undefined
    File buildInterfaceFile = undefined

    action GetBuildFile returns File
        return buildFile
    end

    action GetBuildInterfaceFile returns File
        return buildInterfaceFile
    end

    action GetBuildPath returns text
        return buildPath
    end

    action GetRunPath returns text
        return runPath
    end

    action SetBuildPath(text build)
        buildPath = build
    end

    action SetRunPath(text build)
        runPath = build
    end

    action GetStaticKey returns text
        return staticKey
    end

    action SetStaticKey(text staticKey)
        me:staticKey = staticKey
    end

    action GetPackage returns QualifiedName
        return packageValue
    end

    action SetPackage(QualifiedName value)
        packageValue = value
    end

    action GetName returns text
        return name
    end

    action SetName(text name)
        me:name = name
    end

    action GetClassWriter returns JavaBytecodeClassWriter
        return classWriter
    end

    action GetInterfaceWriter returns JavaBytecodeClassWriter
        return interfaceWriter
    end

    action SetClassWriter(JavaBytecodeClassWriter writer)
        classWriter = writer
    end

    action SetInterfaceWriter(JavaBytecodeClassWriter writer)
        interfaceWriter = writer
    end

    action GetClass returns Class
        return clazz
    end

    action SetClass(Class clazz)
        me:clazz = clazz
    end

    action Add(ActionOpcode method)
        actions:Add(method)
    end

    action AddField(QuorumOpcode fieldOpcode) 
        fields:Add(fieldOpcode)
    end

    action SetConstructor(ActionOpcode method)
        constructor = method
    end

    action Write
        integer version = opcodes:GetJavaVersion(7)
        integer access = opcodes:GetPublic() + opcodes:GetSuper()
        text interfaceName = converter:ConvertClassNameToInterfaceName(name)
        Array<text> interfaces
        interfaces:Add(clazz:ConvertStaticKeyToBytecodeInterfacePath())

        Array<text> parentsForInterface
        
        if not clazz:IsObject() //if not object, add all the parent interfaces
            Iterator<Class> parents = clazz:GetParentClasses()
            repeat while parents:HasNext()
                Class mom = parents:Next()
                text parentInterfaceName = mom:ConvertStaticKeyToBytecodeInterfacePath()
                parentsForInterface:Add(parentInterfaceName)
            end
        end


        text null = undefined //temporary workaround for Bug#97 https://quorum.atlassian.net/browse/QUOR-97
        //once fully integrated, check if this is a the Quorum error class or a subclass. For now, just weave in Object.
        classWriter:Visit(version, access, clazz:ConvertStaticKeyToBytecodePath(), null, JAVA_OBJECT, interfaces)
        interfaceWriter:Visit(version, opcodes:GetPublic() + opcodes:GetAbstract() + 
            opcodes:GetInterface(), clazz:ConvertStaticKeyToBytecodeInterfacePath(), null, JAVA_OBJECT, parentsForInterface)



        WriteFieldDeclarations()
        

        ComputeConstructor(true)
        ComputeConstructor(false)

        //does this class have a main method?
        if clazz:HasMainAction()
            WriteMain()
        end


        Iterator<ActionOpcode> actionIterator = actions:GetIterator()
        repeat while actionIterator:HasNext()
            ActionOpcode act = actionIterator:Next()
            

            
            Action method = act:GetAction()

            //write to the class
            act:Write()

            //write to the interface
            text name = method:GetName()
            text params = method:ConvertActionToBytecodeParameterInterfaceSignature()
            JavaBytecodeMethodWriter interfaceMethodWriter = 
                interfaceWriter:VisitMethod(opcodes:GetPublic() + opcodes:GetAbstract(), 
                name, params, null, undefined)
                

            interfaceMethodWriter:VisitEnd()
        end

        Iterator<Action> it = clazz:GetParentActions()
        repeat while it:HasNext()
            Action act = it:Next()
            WriteParentActionBytecode(act)
        end

        classWriter:VisitEnd()
        interfaceWriter:VisitEnd()
        WriteBytecodeToDisk()
    end

    private action WriteParentActionBytecode(Action act)

        text null = undefined
        text actionName = act:GetName()
        text params = act:ConvertActionToBytecodeParameterInterfaceSignature()
        JavaBytecodeMethodWriter parentActionWriter = classWriter:VisitMethod(opcodes:GetPublic(), 
            actionName, params, null, undefined)

        parentActionWriter:VisitCode()


        Class p = act:GetParentClass()
        text classBytecodeName = p:ConvertStaticKeyToBytecodeInterfacePath()
        //push on THIS
        parentActionWriter:VisitVariable(opcodes:GetObjectLoad(), 0)

        //push on the appropriate parent field variablep
        text parentName = p:ConvertStaticKeyToParentFieldName()
        text converted = p:ConvertStaticKeyToBytecodePath()
        text convertedParentNameType = p:ConvertStaticKeyToBytecodePathTypeName()

        //push false on the parents and call a separate constructor
        parentActionWriter:VisitField(opcodes:GetGetField(), clazz:ConvertStaticKeyToBytecodePath(), parentName, convertedParentNameType)
        // 1: getfield      #38                 // Field quorum/Libraries/Language/Object$Interface.Libraries$Language$Object:Lquorum/Libraries/Language/Object;
        //putfield      #24                 // Field Libraries$Language$Object:Lquorum/Libraries/Language/Object;

        //push on all of the parameters
        Iterator<Variable> parameterIterator = act:GetParameterIterator()
        
        repeat while parameterIterator:HasNext()
            Variable param = parameterIterator:Next()
            parentActionWriter:VisitVariable(opcodes:GetLoadOpcode(param:GetType()), param:GetBytecodeLocation())
        end

        //call the action on the field
        parentActionWriter:VisitMethodInvoke(opcodes:GetInvokeInterface(), 
            p:ConvertStaticKeyToBytecodeInterfacePath(), act:GetName(), 
            act:ConvertActionToBytecodeParameterInterfaceSignature(), true)

        //set the return value
        Type returnType = act:GetReturnType()
        parentActionWriter:VisitInstruction(opcodes:GetReturnOpcode(returnType))
        parentActionWriter:VisitMaxSize(1,1)
        parentActionWriter:VisitEnd()
    end

    private action WriteBytecodeToDisk 
        File classFile
        text path = buildPath + "/" + QUORUM + "/" + packageValue:GetPath() 
        classFile:SetPath(path)
        classFile:CreateDirectories()
        classFile:SetPath(path + "/" + clazz:GetName() + ".class")
        classWriter:Write(classFile)
        buildFile = classFile

        File interfaceFile
        path = buildPath + "/" + QUORUM + "/" + packageValue:GetPath()

        interfaceFile:SetPath(path + "/" + clazz:GetInterfaceName() + ".class")
        interfaceWriter:Write(interfaceFile)

        buildInterfaceFile = interfaceFile
    end

    action WriteFieldDeclarations
        text null = undefined 
        text hiddenType = clazz:ConvertStaticKeyToBytecodePathTypeNameInterface()
        JavaBytecodeFieldWriter hiddenField = classWriter:VisitField(opcodes:GetPublic(), 
            clazz:GetHiddenVariableName(), hiddenType, null, undefined)
        hiddenField:VisitEnd()

        //write parents in class
        Iterator<Class> parents = clazz:GetParentClasses()

        //initialize all of the parent objects as fields
        repeat while parents:HasNext()
            Class mom = parents:Next()
            text parentKey = mom:GetStaticKey()
            text parentName = mom:ConvertStaticKeyToParentFieldName()
            text converted = mom:ConvertStaticKeyToBytecodePathTypeName()
            JavaBytecodeFieldWriter momField = classWriter:VisitField(opcodes:GetPublic(),
                parentName, converted, null, undefined)
            momField:VisitEnd()
        end
        
        //write fields in class
        Iterator<Variable> fields = clazz:GetVariables()
        repeat while fields:HasNext()
            Variable variable = fields:Next()
            text varName = variable:GetName()
            Type type = variable:GetType()
            text converted = type:ConvertTypeToBytecodeSignatureInterface()
            
            //write them as public. This doesn't really matter, because
            //at the bytecode level it doesn't provide any security anyway
            //as people can just rip it out with reflection
            JavaBytecodeFieldWriter field = classWriter:VisitField(opcodes:GetPublic(),
                varName, converted, null, undefined)
            field:VisitEnd()
        end

        if clazz:HasSystemAction()
            text converted = clazz:ConvertStaticKeyToPluginPathTypeName()
            
            //write them as public. This doesn't really matter, because
            //at the bytecode level it doesn't provide any security anyway
            //as people can just rip it out with reflection
            JavaBytecodeFieldWriter field = classWriter:VisitField(opcodes:GetPublic(),
                clazz:GetPluginName(), converted, null, undefined)
            field:VisitEnd()
        end

        //write the methods for the fields
        fields = clazz:GetVariables()
        repeat while fields:HasNext()
            Variable variable = fields:Next()

            text varName = variable:GetName()
            Type type = variable:GetType()
            text converted = type:ConvertTypeToBytecodeSignature()
            text hiddenGetterName = clazz:ConvertToActionNameFromField(variable, true)
            text hiddenGetterSignature = type:ConvertToSignatureFromFieldInterface(true)
            
            //do the getter in the interface file
            JavaBytecodeMethodWriter interfaceMethodWriter = 
                interfaceWriter:VisitMethod(opcodes:GetPublic() + opcodes:GetAbstract(), 
                hiddenGetterName, hiddenGetterSignature, null, undefined)
            interfaceMethodWriter:VisitEnd() 

            //do the getter implementation
            //now generate the actual getter in the implementation class
            JavaBytecodeMethodWriter methodWriter = classWriter:VisitMethod(opcodes:GetPublic(), 
                hiddenGetterName, hiddenGetterSignature, null, undefined)
            methodWriter:VisitVariable(opcodes:GetObjectLoad(), 0)
                
            //TODO: Check that what is at line 2231 of QuorumJavaBytecodeStepVisitor
            //is not an artifact of that system and is actually important.
            methodWriter:VisitField(opcodes:GetField(), clazz:ConvertStaticKeyToBytecodePath(),
                variable:GetName(), converted)

            methodWriter:VisitInstruction(opcodes:GetReturnOpcode(type))
            methodWriter:VisitMaxSize(1,1)
            methodWriter:VisitEnd()


            //do the setter in the interface file
            text hiddenSetterName = clazz:ConvertToActionNameFromField(variable, false)
            text hiddenSetterSignature = type:ConvertToSignatureFromField(false)

            interfaceMethodWriter = 
                interfaceWriter:VisitMethod(opcodes:GetPublic() + opcodes:GetAbstract(), 
                hiddenSetterName, hiddenSetterSignature, null, undefined)
            interfaceMethodWriter:VisitEnd()


            //do the setter implementation
            methodWriter = classWriter:VisitMethod(opcodes:GetPublic(), 
                hiddenSetterName, hiddenSetterSignature, null, undefined)
            methodWriter:VisitVariable(opcodes:GetObjectLoad(), 0)
                
            //TODO: Check that what is at line 2264 of QuorumJavaBytecodeStepVisitor
            //is not an artifact of that system and is actually important.
            methodWriter:VisitVariable(opcodes:GetLoadOpcode(type), 1)
            methodWriter:VisitField(opcodes:PutField(), clazz:ConvertStaticKeyToBytecodePath(),
                variable:GetName(), converted)

            methodWriter:VisitInstruction(opcodes:GetReturn())
            methodWriter:VisitMaxSize(1,1)
            methodWriter:VisitEnd()

        end
    end

    action WriteMain
        //make a new method, if it exists. 
        text null = undefined
        methodWriter = 
        classWriter:VisitMethod(opcodes:GetPublic() + opcodes:GetStatic(), 
            "main", "([Ljava/lang/String;)V", null, undefined)

        text key = clazz:GetStaticKey()
        text bytecode = converter:ConvertStaticKeyToBytecodePath(key)

        //create the new object and place it on the stack
        methodWriter:VisitType(opcodes:GetNew(), bytecode)
        methodWriter:VisitInstruction(opcodes:GetDuplicate())
        methodWriter:VisitMethodInvoke(opcodes:GetInvokeSpecial(), bytecode, "<init>", "()V", false)

        //store it in a variable and load it back on the stack
        methodWriter:VisitVariable(opcodes:GetObjectStore(), 1)
        methodWriter:VisitVariable(opcodes:GetObjectLoad(), 1)

        //call a method on the object, its non-static main
        methodWriter:VisitMethodInvoke(opcodes:GetInvokeVirtual(), bytecode,
            "Main", "()V", false)

        //close out the main method
        methodWriter:VisitInstruction(opcodes:GetReturn())
        methodWriter:VisitMaxSize(2,2)
        methodWriter:VisitEnd()
    end

    action ComputeConstructor(boolean isParent)
        
        //integer numSystem = currentClass:getNumberSystemActions()
        text staticKey = clazz:GetStaticKey()
        text name = converter:ConvertStaticKeyToBytecodePath(staticKey)

        text signature = ""
        if isParent
            signature = "()V"
        else
            signature = "(Z)V"
        end

        //call the class's initialization function
        text null = undefined
        methodWriter = classWriter:VisitMethod(opcodes:GetPublic(), "<init>", signature, null, undefined)
        methodWriter:VisitCode()
        methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)

        //handle inheritance with the error system
        text key = me:clazz:GetStaticKey()
        if key = QUORUM_LIBRARY_LANGUAGE_ERRORS_ERROR
            methodWriter:VisitMethodInvoke(opcodes:GetInvokeSpecial(), JAVA_THROWABLE, CONSTRUCTOR_JAVA_NAME, "()V", false)
        elseif clazz:HasParentClass(QUORUM_LIBRARY_LANGUAGE_ERRORS_ERROR)
            methodWriter:VisitMethodInvoke(opcodes:GetInvokeSpecial(), QUORUM_ERROR, CONSTRUCTOR_JAVA_NAME, "()V", false)
        else
            methodWriter:VisitMethodInvoke(opcodes:GetInvokeSpecial(), JAVA_OBJECT, CONSTRUCTOR_JAVA_NAME, "()V", false)
        end

        if clazz:HasSystemAction()
            WritePlugin(methodWriter)
        end

        //setup a hidden variable with the $me variable
        methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
        methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
        methodWriter:VisitField(opcodes:GetPutField(), clazz:ConvertStaticKeyToBytecodePath(),
            clazz:GetHiddenVariableName(), clazz:ConvertStaticKeyToBytecodePathTypeNameInterface())

        //initialize all of the parents
        if isParent
            WriteParents(methodWriter)
        end

        //write all of the fields
        WriteFields(methodWriter)

        if clazz:HasConstructor()
            constructor:Write()
        end

        methodWriter:VisitInstruction(opcodes:GetReturn())
        methodWriter:VisitMaxSize(1, 1)
        methodWriter:VisitEnd()
    end

    private action WritePlugin(JavaBytecodeMethodWriter methodWriter)
        methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
        text converted = clazz:ConvertStaticKeyToPluginPath()
        text convertedSupplement = clazz:ConvertStaticKeyToPluginPathTypeName()
        methodWriter:VisitType(opcodes:GetNew(), converted)
        methodWriter:VisitInstruction(opcodes:GetDuplicate())
        methodWriter:VisitMethodInvoke(opcodes:GetInvokeSpecial(), converted, CONSTRUCTOR_JAVA_NAME, "()V", false)
        methodWriter:VisitField(opcodes:GetPutField(), clazz:ConvertStaticKeyToBytecodePath(), clazz:GetPluginName(), convertedSupplement)

        //now load the current object into the plugin, in case it needs it
        methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
        methodWriter:VisitField(opcodes:GetGetField(), clazz:ConvertStaticKeyToBytecodePath(), clazz:GetPluginName(), convertedSupplement)
        methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
        methodWriter:VisitField(opcodes:GetPutField(), converted, "$me", "Ljava/lang/Object;")
    end

    private action WriteParents(JavaBytecodeMethodWriter methodWriter)
        Iterator<Class> parents = clazz:GetParentClasses()
        text classBytecodeName = converter:ConvertStaticKeyToBytecodePath(staticKey)
        

        //initialize all of the parent objects as fields
        repeat while parents:HasNext()
            Class p = parents:Next()
            text parentKey = p:GetStaticKey()
            text parentName = p:ConvertStaticKeyToParentFieldName()
            text converted = p:ConvertStaticKeyToBytecodePath()
            text convertedParentNameType = p:ConvertStaticKeyToBytecodePathTypeName()
            methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
            methodWriter:VisitType(opcodes:GetNew(), converted)
            methodWriter:VisitInstruction(opcodes:GetDuplicate())

            //push false on the parents and call a separate constructor
            methodWriter:VisitInstruction(opcodes:GetIntegerZero())
            methodWriter:VisitMethodInvoke(opcodes:GetInvokeSpecial(), converted, CONSTRUCTOR_JAVA_NAME, "(Z)V", false)
            methodWriter:VisitField(opcodes:GetPutField(), classBytecodeName, parentName, convertedParentNameType)

            
            //text convertedHiddenType = p:ConvertStaticKeyToBytecodePathTypeName()
            //methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
            //methodWriter:VisitField(opcodes:GetGetField(), clazz:ConvertStaticKeyToBytecodePath(), parentName, convertedHiddenType)
            //methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
            //methodWriter:VisitField(opcodes:GetPutField(), converted, p:GetHiddenVariableName(), convertedHiddenType)
        end
        
        //now that all parents have been instantiated, get 
        //their parents and set them appropriately
        parents = clazz:GetParentClasses()
        repeat while parents:HasNext()
            Class p = parents:Next()
            text parentKey = p:GetStaticKey()
            text parentName = p:ConvertStaticKeyToParentFieldName()
            text convertedParentName = p:ConvertStaticKeyToBytecodePath()
            text convertedParentNameType = p:ConvertStaticKeyToBytecodePathTypeName()

            Iterator<Class> grandParents = p:GetParentClasses()
            repeat while grandParents:HasNext()
                Class grandParent = grandParents:Next()
                text grandParentKey = grandParent:GetStaticKey()
                text grandParentName = grandParent:ConvertStaticKeyToParentFieldName()
                text convertedGrandParent = grandParent:ConvertStaticKeyToBytecodePathTypeName()
                
                //now load the same parents into the grand parents
                methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
                methodWriter:VisitField(opcodes:GetGetField(), clazz:ConvertStaticKeyToBytecodePath(), parentName, convertedParentName)
                methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
                methodWriter:VisitField(opcodes:GetGetField(), clazz:ConvertStaticKeyToBytecodePath(), grandParentName, convertedGrandParent)
                methodWriter:VisitField(opcodes:GetPutField(), convertedParentName, grandParentName, convertedGrandParent)
            end
        end
    end

    action WriteFields (JavaBytecodeMethodWriter methodWriter)
        Iterator<QuorumOpcode> fieldIterator = fields:GetIterator()
        repeat while fieldIterator:HasNext()
            QuorumOpcode field = fieldIterator:Next()
            field:SetMethodWriterToAllChildren(methodWriter)
            field:Write()
        end
    end

    action WriteJavaScript returns text
        constant text OUTPUT_VARIABLE = "OuTpUt_$tRiNg_"
        EOL = ""
        quote = EOL:GetDoubleQuote()
        EOL = EOL:GetCarriageReturn() + EOL:GetLineFeed()
        convertedSource = "var " + OUTPUT_VARIABLE + " = " + quote + quote + ";" + EOL
        convertedSource = convertedSource + EOL + "function "
            + clazz:ConvertStaticKeyToUnderScore() + "() {" + EOL

        Iterator<ActionOpcode> actionIterator = actions:GetIterator()
        repeat while actionIterator:HasNext()
            ActionOpcode act = actionIterator:Next()
            convertedSource = convertedSource + act:WriteJavaScript()
        end

        Iterator<QuorumOpcode> fieldIterator = fields:GetIterator()
        repeat while fieldIterator:HasNext()
            QuorumOpcode field = fieldIterator:Next()
            convertedSource = convertedSource + field:WriteJavaScript()
        end

        convertedSource = convertedSource + EOL + "};" + EOL
        if clazz:IsProgramStartingClass()
            convertedSource = convertedSource + "var $starter = new " + clazz:ConvertStaticKeyToUnderScore() + "();" + EOL
            convertedSource = convertedSource + "$starter.Main();" + EOL
            convertedSource = convertedSource + OUTPUT_VARIABLE + ";" + EOL
        end

        
        return convertedSource
    end

    action GetTemplateCopy returns QuorumOpcode
        ClassOpcode op
        return op
    end
end