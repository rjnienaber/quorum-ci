package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.all

class LoopOpcode is QuorumOpcode
    QuorumOpcode expression = undefined
    BlockOpcode block = undefined
    JavaBytecodeOpcodes opcodes
    boolean isUntil = false
    boolean isTimes = false
    Variable variable = undefined


    action SetMethodWriterToAllChildren(JavaBytecodeMethodWriter writer)
        SetMethodWriter(writer)
        block:SetMethodWriterToAllChildren(writer)
        expression:SetMethodWriterToAllChildren(writer)
    end

    action GetVariable returns Variable
        return variable
    end

    action SetVariable(Variable field)
        me:variable = field
    end

    action SetWhile
        isUntil = false
        isTimes = false
    end

    action SetUntil
        isUntil = true
        isTimes = false
    end

    action SetTimes
        isUntil = false
        isTimes = true
    end

    action GetExpression returns QuorumOpcode
        return expression
    end

    action SetExpression(QuorumOpcode op)
        expression = op
    end

    action GetBlock returns BlockOpcode
        return block
    end

    action SetBlock(BlockOpcode op)
        block = op
    end

    action Write
        VisitLineNumber()
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        JavaBytecodeLabel startLabel
        JavaBytecodeLabel endLabel

        if not isTimes
            methodWriter:VisitLabel(startLabel)
        else 
            methodWriter:VisitConstant(0)
            methodWriter:VisitVariable(opcodes:GetIntegerStore(), variable:GetBytecodeLocation())
        end

        expression:Write()

        if isTimes //for this one, the answer is guaranteed to be a single
                   //integer 
            //set a label for the jump point here, AFTER the expression has been written
            methodWriter:VisitLabel(startLabel)

            //so next we duplicate the integer
            methodWriter:VisitInstruction(opcodes:GetDuplicate())
            
            //then push on the counter variable
            methodWriter:VisitVariable(opcodes:GetIntegerLoad(), variable:GetBytecodeLocation())

            //next compare the counter variable with the value
            methodWriter:VisitJump(opcodes:GetIfIntegerLessThanEquals(), endLabel)
        else
            if expression is BinaryOpcode
                BinaryOpcode bop = cast(BinaryOpcode, expression)
                if isUntil
                    integer op = bop:GetJavaOpcode()
                    op = opcodes:GetInvertedIntegerCompareOpcode(op)
                    methodWriter:VisitJump(op, endLabel)
                else 
                    methodWriter:VisitJump(bop:GetJavaOpcode(), endLabel)
                end
            else 
                if isUntil
                    methodWriter:VisitJump(opcodes:GetIfNotEquals(), endLabel)
                else
                    methodWriter:VisitJump(opcodes:GetIfEquals(), endLabel)
                end
            end
        end
        block:Write()

        if isTimes
            methodWriter:VisitVariable(opcodes:GetIntegerLoad(), variable:GetBytecodeLocation())
            methodWriter:VisitConstant(1)
            methodWriter:VisitInstruction(opcodes:GetIntegerAdd())
            methodWriter:VisitVariable(opcodes:GetIntegerStore(), variable:GetBytecodeLocation())
        end

        methodWriter:VisitJump(opcodes:GetGoto(), startLabel)
        methodWriter:VisitLabel(endLabel)
        if isTimes
            methodWriter:VisitInstruction(opcodes:GetPop())
        end
    end

    action WriteJavaScript returns text
        text result = ""

        EOL = ""
        EOL = EOL:GetCarriageReturn() + EOL:GetLineFeed()
        text hash = "$L" + GetHashCode() 
        if isTimes
            result = result + "for(" + hash + "=0;" + hash + "<" + expression:WriteJavaScript() + ";" + hash + "++) {" + EOL
        elseif isUntil
            result = result + "while (!(" + expression:WriteJavaScript() + ")) {" + EOL
        else //it's a while loop
            result = result + "while (" + expression:WriteJavaScript() + ") {" + EOL

        end

        result = result + block:WriteJavaScript()
        result = result + "}" + EOL
        return result
    end

    action GetTemplateCopy returns QuorumOpcode
        LoopOpcode copy

        return copy
    end
end