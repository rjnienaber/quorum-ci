package Libraries.Language.Compile.Test

use Libraries.Language.Compile.all
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Language.Compile.Parser
use Libraries.System.File
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Translate.QuorumJarGenerator
use Libraries.System.StackTraceItem
use Libraries.Compute.Math
use Libraries.System.DateTime

class CompilerTestSuite
    integer total = 0
    integer passed = 0
    integer failed = 0
    Math math
    ExpressionsTester expressions
    TypeCheckTester typeChecks
    IfStatementTester ifStatementChecks
    LoopsTester loopsChecks
    ActionsTester actionsChecks
    InheritanceTester inheritanceChecks
    TemplatingTester templatingChecks
    ExceptionTester exceptionChecks

    on create
        expressions:SetCompilerTestSuite(me)
        typeChecks:SetCompilerTestSuite(me)
        ifStatementChecks:SetCompilerTestSuite(me)
        loopsChecks:SetCompilerTestSuite(me)
        actionsChecks:SetCompilerTestSuite(me)
        inheritanceChecks:SetCompilerTestSuite(me)
        templatingChecks:SetCompilerTestSuite(me)
        exceptionChecks:SetCompilerTestSuite(me)
    end

    action Main
        DateTime date
        start = date:GetEpochTime()
        output "Starting Quorum 3.0 Test Suite" //+ compiler:VERSION + "."
        output ""
        output "List of Tests:"
        output expressions:GetName()
//        expressions:Test()
        output ""
        output typeChecks:GetName()
//        typeChecks:Test()
        output ""
        output ifStatementChecks:GetName()
//        ifStatementChecks:Test()
        output ""
        output loopsChecks:GetName()
//        loopsChecks:Test()
        output ""
        output actionsChecks:GetName()
//        actionsChecks:Test()
        output ""
        output inheritanceChecks:GetName()
//        inheritanceChecks:Test()
        output ""
        output templatingChecks:GetName()
        templatingChecks:Test()
        output ""
        output exceptionChecks:GetName()
        exceptionChecks:Test()
        output ""

        DateTime date2
        finish = date2:GetEpochTime()
        number totalTime = finish - start
        totalTime = totalTime / 1000.0
        output "Finished Testing in " + totalTime + " seconds."
        output "Tests Passed: " + passed + " out of " + total

        number percent = math:Round((passed  * 100.0) / (total * 1.0), 3) //known bug workaround. This value should be 2, not three
        output "Total Percentage: " + percent + "%"

    end

    action RunJavaScriptTest(text source) returns CompilerTestResult
        CompilerTestResult result = undefined
        text quote = ""
        quote = quote:GetDoubleQuote()
        Compiler compiler
        File file
        file:SetPath(source)
        compiler:SetMain(file)

        Parser parser
        compiler:Parse(file, parser)
        CompilerErrorManager manager = parser:GetCompilerErrorManager()

        if not manager:IsCompilationErrorFree()
            CompilerTestResult result2
            result2:name = source
            return result2
        end
        TypeCheckListener checker
        compiler:Parse(file, checker)
        if not manager:IsCompilationErrorFree()
            CompilerTestResult result2
            result2:name = source
            return result2
        end

        QuorumJavascriptListener javascript
        compiler:Parse(file, javascript)

        if manager:IsCompilationErrorFree() //run the program
            text convertedJavaScript = javascript:GetConvertedSource()
            result = RunJavaScript(convertedJavaScript)
        else
            CompilerTestResult result2
            result = result2
        end
        result:name = source
        return result
    end

    action RunJavaScriptTest(text source, text reply)
        CompilerTestResult result
        result:name = source
        check
            result = RunJavaScriptTest(result:name)
            if result:ranWithoutError
                Array<text> lines = result:lines
                if lines:GetSize() = 1
                    if lines:Get(0) = reply
                       result:passed = true
                    end
                end
            end
        detect e
            text message = e:GetErrorMessage()
            result:errorMessage = message
            result:stackTrace = e:GetStackTrace()
        end
        result:isJavaScriptTest = true
        Add(result)
    end

    action RunJavaScriptTest(text source, text reply1, text reply2)
        CompilerTestResult result
        result:name = source
        check
            result = RunJavaScriptTest(result:name)
            if result:ranWithoutError
                Array<text> lines = result:lines
                if lines:GetSize() = 2
                    if lines:Get(0) = reply1 and 
                       lines:Get(1) = reply2
                       result:passed = true
                    end
                end
            end
        detect e
            text message = e:GetErrorMessage()
            result:errorMessage = message
            result:stackTrace = e:GetStackTrace()
        end
        result:isJavaScriptTest = true
        Add(result)
    end

    action RunJavaScriptTest(text source, text reply1, text reply2, text reply3)
        CompilerTestResult result
        result:name = source
        check
            result = RunJavaScriptTest(result:name)
            if result:ranWithoutError
                Array<text> lines = result:lines
                if lines:GetSize() = 3
                    if lines:Get(0) = reply1 and 
                       lines:Get(1) = reply2 and
                       lines:Get(2) = reply3
                       result:passed = true
                    end
                end
            end
        detect e
            text message = e:GetErrorMessage()
            result:errorMessage = message
            result:stackTrace = e:GetStackTrace()
        end
        result:isJavaScriptTest = true
        Add(result)
    end

    action RunJavaScriptTest(text source, text reply1, text reply2, text reply3, text reply4)
        CompilerTestResult result
        result:name = source
        check
            result = RunJavaScriptTest(result:name)
            if result:ranWithoutError
                Array<text> lines = result:lines
                if lines:GetSize() = 4
                    if lines:Get(0) = reply1 and 
                       lines:Get(1) = reply2 and
                       lines:Get(2) = reply3 and
                       lines:Get(3) = reply4
                       result:passed = true
                    end
                end
            end
        detect e
            text message = e:GetErrorMessage()
            result:errorMessage = message
            result:stackTrace = e:GetStackTrace()
        end
        result:isJavaScriptTest = true
        Add(result)
    end

    action RunJavaScriptTest(text source, text reply1, text reply2, text reply3, text reply4, text reply5)
        CompilerTestResult result
        result:name = source
        check
            result = RunJavaScriptTest(result:name)
            if result:ranWithoutError
                Array<text> lines = result:lines
                if lines:GetSize() = 5
                    if lines:Get(0) = reply1 and 
                       lines:Get(1) = reply2 and
                       lines:Get(2) = reply3 and
                       lines:Get(3) = reply4 and
                       lines:Get(4) = reply5
                       result:passed = true
                    end
                end
            end
        detect e
            text message = e:GetErrorMessage()
            result:errorMessage = message
            result:stackTrace = e:GetStackTrace()
        end
        result:isJavaScriptTest = true
        Add(result)
    end

    action RunTest(text source) returns CompilerTestResult
        CompilerTestResult result = undefined
        Compiler compiler
        File file
        file:SetPath(source)
        compiler:SetMain(file)

        Parser parser
        compiler:Parse(file, parser)
        CompilerErrorManager manager = parser:GetCompilerErrorManager()
        if not manager:IsCompilationErrorFree()
            CompilerTestResult result2
            result2:name = source
            return result2
        end

        TypeCheckListener checker
        compiler:Parse(file, checker)
        if not manager:IsCompilationErrorFree()
            CompilerTestResult result2
            result2:name = source
            return result2
        end

        QuorumBytecodeListener bytecode
        compiler:Parse(file, bytecode)
        
        if manager:IsCompilationErrorFree() //run the program
            QuorumJarGenerator generator

            File jar = compiler:GetDistributionFile()
            generator:SetCompiler(compiler)
            generator:Write()
            result = RunClassFile(jar)
        else
            CompilerTestResult result2
            result = result2
        end
        result:name = source
        return result
    end

    action RunTest(text source, text reply)
        CompilerTestResult result
        result:name = source
        check
            result = RunTest(result:name)
            if result:ranWithoutError
                Array<text> lines = result:lines
                if lines:GetSize() = 1
                    if lines:Get(0) = reply
                       result:passed = true
                    end
                end
            end
        detect e
            text message = e:GetErrorMessage()
            result:errorMessage = message
            result:stackTrace = e:GetStackTrace()
        end
        result:isBytecodeTest = true
        Add(result)
    end

    action RunTest(text source, text reply1, text reply2)
        CompilerTestResult result
        result:name = source
        check
            result = RunTest(result:name)
            if result:ranWithoutError
                Array<text> lines = result:lines
                if lines:GetSize() = 2
                    if lines:Get(0) = reply1 and 
                       lines:Get(1) = reply2
                       result:passed = true
                    end
                end
            end
            
        detect e
            text message = e:GetErrorMessage()
            result:errorMessage = message
            result:stackTrace = e:GetStackTrace()
        end
        result:isBytecodeTest = true
        Add(result)
    end

    action RunTest(text source, text reply1, text reply2, text reply3)
        CompilerTestResult result
        result:name = source
        check
            result = RunTest(result:name)
            if result:ranWithoutError
                Array<text> lines = result:lines
                if lines:GetSize() = 3
                    if lines:Get(0) = reply1 and 
                       lines:Get(1) = reply2 and
                       lines:Get(2) = reply3
                       result:passed = true
                    end
                end
            end
            
        detect e
            text message = e:GetErrorMessage()
            result:errorMessage = message
            result:stackTrace = e:GetStackTrace()
        end
        result:isBytecodeTest = true
        Add(result)
    end

    action RunTest(text source, text reply1, text reply2, text reply3, text reply4)
        CompilerTestResult result
        result:name = source
        check
            result = RunTest(result:name)
            if result:ranWithoutError
                Array<text> lines = result:lines
                if lines:GetSize() = 4
                    if lines:Get(0) = reply1 and 
                       lines:Get(1) = reply2 and
                       lines:Get(2) = reply3 and
                       lines:Get(3) = reply4
                       result:passed = true
                    end
                end
            end
            
        detect e
            text message = e:GetErrorMessage()
            result:errorMessage = message
            result:stackTrace = e:GetStackTrace()
        end
        result:isBytecodeTest = true
        Add(result)
    end

    action RunTest(text source, text reply1, text reply2, text reply3, text reply4, text reply5)
        CompilerTestResult result
        result:name = source
        check
            result = RunTest(result:name)
            if result:ranWithoutError
                Array<text> lines = result:lines
                if lines:GetSize() = 5
                    if lines:Get(0) = reply1 and 
                       lines:Get(1) = reply2 and
                       lines:Get(2) = reply3 and
                       lines:Get(3) = reply4 and
                       lines:Get(4) = reply5
                       result:passed = true
                    end
                end
            end
            
        detect e
            text message = e:GetErrorMessage()
            result:errorMessage = message
            result:stackTrace = e:GetStackTrace()
        end
        result:isBytecodeTest = true
        Add(result)
    end

    action Add(CompilerTestResult result)
        if result = undefined
            failed = failed + 1
        elseif result:passed
            passed = passed + 1
        else
            failed = failed + 1
        end
        total = total + 1
        text value = ""
        value = result:name 

        if result:isBytecodeTest
            value = value + " (Bytecode)"
        end

        if result:isJavaScriptTest
            value = value + " (JavaScript)"
        end

        if result:exceptionThrown
            value = value + " ... " + "failed"
        elseif result:exceptionThrown and result:passed = false
            text error = result:errorMessage
            value = value + " ... " + "failed: exception thrown with message: " + error
            Array<StackTraceItem> stack = result:stackTrace
            if stack not= undefined
                if not stack:IsEmpty()
                    StackTraceItem item = stack:Get(0)
                    value = value + ", " + item:GetClassName() + ":" + item:GetMethodName() + ":" + item:GetLineNumber()
                end
            end
        elseif not result:exceptionThrown and result:passed = false
            value = value + "... fail: Incorrect output."
        else
            value = value + " ... " + "passed"
        end
        output value
    end

    action RunTestFail(text source) returns CompilerTestResult
    //NOTE THIS MUST BE CHANGED TO REFLECT AN INTENTIONALLY FAILED TEST
    //currently this is a copy of RunTest as a placeholder
        CompilerTestResult result = undefined
        Compiler compiler
        File file
        file:SetPath(source)
        compiler:SetMain(file)

        Parser parser
        compiler:Parse(file, parser)
        TypeCheckListener checker
        compiler:Parse(file, checker)
        QuorumBytecodeListener bytecode
        compiler:Parse(file, bytecode)
        
        CompilerErrorManager manager = parser:GetCompilerErrorManager()

        if manager:IsCompilationErrorFree() //run the program
            QuorumJarGenerator generator

            File jar = compiler:GetDistributionFile()
            generator:SetCompiler(compiler)
            generator:Write()
            result = RunClassFile(jar)
        else
            CompilerTestResult result2
            result = result2
        end
        result:name = source
        return result
    end

    action RunJavaScriptTestFail(text source) returns CompilerTestResult
        CompilerTestResult result = undefined
        //Insert fail test here
        return result
    end

    system action RunClassFile(File file) returns CompilerTestResult
    system action RunJavaScript(text script) returns CompilerTestResult
end