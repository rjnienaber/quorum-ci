use Libraries.Containers.Array
use Libraries.Containers.List
use Libraries.Compute.Math
use Libraries.Containers.Queue

class Column
    Array<number> numbers
    private boolean sorted = false
    
    action Add(number num) 
        numbers:Add(num)
        sorted = false
    end

    action Add(text num)
        number a = num:ParseNumber()
        numbers:Add(a)
    end

    action Get(integer i) returns number
        return numbers:Get(i)
    end

    action AddList (List<number> list)
        integer i = 0
        repeat list:GetSize() times
            Add(list:Get(i))
            i = i + 1
        end
    end

    action AddArray (Array<number> array)
        integer i = 0
        repeat array:GetSize() times
            Add(array:Get(i))
            i = i + 1
        end
    end

    action Size returns integer
        return numbers:GetSize()
    end

    action Sort
       numbers:Sort()
       sorted = true
    end

    /**
    ** Calculates Median
    **/
    action Median returns number
        number median = 0
        if not sorted
            Sort()
        end

        if Size() = 0 
            return 0
        end
        
        integer left = (Size() - 1) / 2
        integer right = Size() / 2
        
        if left = right
            median = Get(left)
        else
            median = (Get(left) + Get(right)) / 2.0
        end

        return median  
    end

    /**
    ** Calculating mean using recurrence relation
    **/
    action Mean returns number
        number mean = 0

        integer i = 0
        repeat Size() times
            mean = mean + (Get(i) - mean) / (i+1)
            i = i + 1
        end

        return mean
    end

    action Quantiles(number f) returns number
        if not sorted
            Sort()
        end

        number index = f * (Size() - 1)
        integer left = cast(integer, index)
        number delta = index - left

        number result

        if Size() = 0
            return 0.0
        end

        if left = Size() - 1
            result = Get(left)
        else
            result = (1 - delta) * Get(left) + delta * Get(left+1)
        end

        return result
    end

    action Variance returns number
        return Variance(Mean())
    end

    /**
    ** This calculates the sample variance
    **/
    action Variance (number mean) returns number
       return Variance(mean, Size()-1)
    end

    action Variance (number mean, number n) returns number
       number variance = 0
       
       integer i = 0
       repeat Size() times
            number delta = Get(i) - mean
           
            variance = variance + (delta * delta - variance) / (i + 1)
            i = i + 1
       end


       variance = variance * (cast(number, Size()) / n)
       
       return variance
     end

     action StandardDeviation (number mean, number n) returns number
        Math m
        number sd = m:SquareRoot(Variance(mean,n))
        return sd
     end

    action StandardDeviation (number mean) returns number
        Math m
        number sd = m:SquareRoot(Variance(mean))
        return sd
     end

    action StandardDeviation () returns number
        Math m
        number sd = m:SquareRoot(Variance())
        return sd
     end

    action Skew returns number
        number mean = Mean()
        return Skew(mean, StandardDeviation(mean))
    end

    action Skew (number mean) returns number
        return Skew(mean, StandardDeviation(mean))
    end

    action Skew (number mean, number sd) returns number
        number skew = 0
        integer i = 0

        repeat Size() times
            number x = (Get(i) - mean) / sd
            skew = skew + (x * x * x - skew) / (i + 1)
            i = i + 1
        end

        return skew
    end

    action Kurtosis returns number
        number mean = Mean()
        return Kurtosis (mean, StandardDeviation(mean))
    end

    action Kurtosis (number mean) returns number
        return Kurtosis (mean, StandardDeviation(mean))
    end

    action Kurtosis (number mean, number sd) returns number
        number avg = 0
        number kurtosis = 0

        integer i = 0

        repeat Size() times
            number x = (Get(i) - mean) / sd
            avg = avg + ( x * x * x * x - avg) / (i + 1)
            i = i + 1 
        end

        kurtosis = avg - 3.0
        return kurtosis
    end
    
    action Max returns number
        if Size() < 1
            return 0
        end
        number max = Get(0)
        integer i = 0
        
        repeat Size() times
            if max < Get(i)
                max = Get(i)
            end
            i = i + 1
        end
        
        return max
    end

    action Min returns number
        if Size() < 1
            return 0
        end

        number min = Get(0)
        integer i = 0
        
        repeat Size() times
            if min > Get(i)
                min = Get(i)
            end
            
            i = i + 1
        end

        return min
    end
    
end