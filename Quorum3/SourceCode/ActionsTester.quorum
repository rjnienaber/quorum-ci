package Libraries.Language.Compile.Test

use Libraries.Language.Compile.all
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Language.Compile.Parser
use Libraries.System.File
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Translate.QuorumJarGenerator
use Libraries.System.StackTraceItem

class ActionsTester 
    CompilerTestSuite suite = undefined
    text path = "Library/Tests/Actions/"
    text passPath = path + "Pass/"
    text failPath = path + "Fail/"

    action Test
        path = passPath
        AverageOfFiveNumbers()
        CallObjectAction()
        CastLastArgument()
        CastMiddleArgument()
        CastReturn()
        CastReturnValue()
        Factorial()
        Fibonacci()
        Field()
        FieldCastParameter()
        FieldCastReturn()
        FieldSoloCall()
        GCD()
        HourOfCodePart1()
        HourOfCodePart1Wrapped()
        HourOfCodePart2()
        HourOfCodePart3()
        HourOfCodePart4()
        HourOfCodePart5()
        HourOfCodePart6()
        //MultipleClassManyReturnsAndNested()
        MultipleClassNestedCallsAndReturns()
        MultipleClassReturnMixedTypes()
        MultipleNestedFunctionCalls()
        MultipleNestedFunctionCallsDouble()
        MultipleNestedFunctionCallsInSoloCall()
        MultipleNestedFunctionCallsWithAssignments()
        MultipleNestedFunctionCallsWithAssignmentsDouble()
        NestedConditionalRepeat1()
        NestedConditionalRepeat2()
        NestedFunctionCall()
        NestedFunctionCallDouble()
        NonParallelNestedReturn()
        RepeatTextCall()
        Return2ActionsBool()
        Return2ActionsBoolToVar()
        Return2ActionsInt()
        Return2ActionsIntToVar()
        Return2ActionsNum()
        Return2ActionsNumToVar()
        Return2ActionsText()
        Return2ActionsTextToVar()
        ReturnCast2ActionsBool()
        ReturnCast2ActionsNum()
        ReturnCast2ActionsText()
        ReturnIfElseBool1()
        ReturnIfElseBool2()
        ReturnIfElseInt1()
        ReturnIfElseInt2()
        ReturnIfElseNum1()
        ReturnIfElseNum2()
        ReturnIfElseText1()
        ReturnIfElseText2()
        ReturnIfElseToVarBool1()
        ReturnIfElseToVarBool2()
        ReturnIfElseToVarInt1()
        ReturnIfElseToVarInt2()
        ReturnIfElseToVarNum1()
        ReturnIfElseToVarNum2()
        ReturnIfElseToVarText1()
        ReturnIfElseToVarText2()
        SimpleActionPassObject()
        SimpleCastArgument()
        SimpleNestedActions()
        SimpleOneActionChangeParameter()
        SimpleOneActionConcatenateText()
        SimpleOneActionInControlExpression()
        SimpleOneActionNoParamsNoReturn()
        SimpleOneActionNoParamsReturnBoolean()
        SimpleOneActionNoParamsReturnInt()
        SimpleOneActionNoParamsReturnNumber()
        SimpleOneActionNoParamsReturnNumberConcatenate()
        SimpleOneActionNoParamsReturnText()
        SimpleOneActionTwoParamsReturnInt()
        TwoActionsDifferentParameters()
        //VTableObjectTest()
        VTableCompareTest()
        SetterAfterUse()
//        SetterBeforeUse()

//FAIL TESTS
        path = failPath
//        ActionLetter()
//        ActionOutside()
//        HOCUndefinedVariable()
//        HOCReturnIntFromMain()
//        HOCReturnIntFromMainDeclared()
//        HOCReturnIntFromCalledProcedure()
//        HOCReturnIntFromCalledProcedureWrongType1()
//        HOCReturnIntFromCalledProcedureWrongType2()
//        HOCUndeclaredVarToUndeclaredVar()
//        HOCUndeclaredFunction()
        IncorrectAssignment()
//        InvalidActionNumber()
//        InvalidActionSymbol1()
//        InvalidActionSymbol2()
//        InvalidVarName1()
//        InvalidVarName2()
//        InvalidVarName3()
//        InvalidVarName4()
//        InvalidVarName5()
//        InvalidVarName6()
//        MissingEnd()
        MissingMain()
        MissingParen()
        MissingReturn1()
        MissingReturn2()
        MissingReturn3()
        //MissingReturn4()
        ReturnCast2ActionsInt()
        SetterBeforeUseFail()
        TextJunk1()
        TextJunk2()
        InvalidActionName()
    end

    action GetName returns text
        return "Actions Tests"
    end

    action GetCompilerTestSuite returns CompilerTestSuite
        return suite
    end

    action SetCompilerTestSuite(CompilerTestSuite suite)
        me:suite = suite
    end

    action AverageOfFiveNumbers 
        suite:RunTest("Library/Tests/Actions/Pass/AverageOfFiveNumbers.quorum", "337.546")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/AverageOfFiveNumbers.quorum", "337.546")
    end

    action CallObjectAction 
        suite:RunTest("Library/Tests/Actions/Pass/CallObjectAction.quorum", "I went")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/CallObjectAction.quorum", "I went")
    end

    action CastLastArgument 
        suite:RunTest("Library/Tests/Actions/Pass/CastLastArgument.quorum", "1.0")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/CastLastArgument.quorum", "1")
    end

    action CastMiddleArgument 
        suite:RunTest("Library/Tests/Actions/Pass/CastMiddleArgument.quorum", "1.0")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/CastMiddleArgument.quorum", "1")
    end

    action CastReturn 
        suite:RunTest("Library/Tests/Actions/Pass/CastReturn.quorum", "1.0")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/CastReturn.quorum", "1")
    end

    action CastReturnValue 
        suite:RunTest("Library/Tests/Actions/Pass/CastReturnValue.quorum", "4.0")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/CastReturnValue.quorum", "4")
    end

    action Factorial 
        suite:RunTest("Library/Tests/Actions/Pass/Factorial.quorum", "120")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/Factorial.quorum", "120")
    end

    action Fibonacci 
        suite:RunTest("Library/Tests/Actions/Pass/Fibonacci.quorum", "55")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/Fibonacci.quorum", "55")
    end

    action Field 
        suite:RunTest("Library/Tests/Actions/Pass/Field.quorum", "4")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/Field.quorum", "4")
    end

    action FieldCastParameter 
        suite:RunTest("Library/Tests/Actions/Pass/FieldCastParameter.quorum", "4")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/FieldCastParameter.quorum", "4")
    end

    action FieldCastReturn 
        suite:RunTest("Library/Tests/Actions/Pass/FieldCastReturn.quorum", "4.0")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/FieldCastReturn.quorum", "4")
    end

    action FieldSoloCall
        suite:RunTest("Library/Tests/Actions/Pass/FieldSoloCall.quorum", "Hello World!")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/FieldSoloCall.quorum", "Hello World!")
    end

    action GCD 
        suite:RunTest("Library/Tests/Actions/Pass/GCD.quorum", "5")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/GCD.quorum", "5")
    end

    action HourOfCodePart1
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "HourOfCodePart1.quorum")
        files:Add(main)
        results:Add(0, "GATTACA")
        results:Add(1, "Welcome to GATTACA")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action HourOfCodePart1Wrapped
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "HourOfCodePart1Wrapped.quorum")
        files:Add(main)
        results:Add(0, "GATTACA")
        results:Add(1, "Welcome to GATTACA")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action HourOfCodePart2
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "HourOfCodePart2.quorum")
        files:Add(main)
        results:Add(0, "The area is 28.274309999999996")
        results:Add(1, "5")
        results:Add(2, "0")
        results:Add(3, "1.0")
        suite:Test(files, results)

        //change the value for JavaScript
        results:Set(3, "1")
        suite:TestJavaScript(files, results)
    end

    action HourOfCodePart3
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "HourOfCodePart3.quorum")
        files:Add(main)
        results:Add(0, "I live in a giant bucket!")
        results:Add(1, "I live in a giant bucket!")
        results:Add(2, "1 + 1 = 2")
        results:Add(3, "3")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action HourOfCodePart4
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "HourOfCodePart4.quorum")
        files:Add(main)
        results:Add(0, "2.0")
        results:Add(1, "4.0")
        results:Add(2, "6.0")
        results:Add(3, "8.0")
        results:Add(4, "10.0")
        results:Add(5, "12.0")
        results:Add(6, "2.0")
        results:Add(7, "4.0")
        results:Add(8, "6.0")
        results:Add(9, "8.0")
        results:Add(10, "10.0")
        results:Add(11, "2.0")
        results:Add(12, "4.0")
        results:Add(13, "6.0")
        results:Add(14, "8.0")
        results:Add(15, "10.0")
        suite:Test(files, results)

        results:Set(0, "2")
        results:Set(1, "4")
        results:Set(2, "6")
        results:Set(3, "8")
        results:Set(4, "10")
        results:Set(5, "12")
        results:Set(6, "2")
        results:Set(7, "4")
        results:Set(8, "6")
        results:Set(9, "8")
        results:Set(10, "10")
        results:Set(11, "2")
        results:Set(12, "4")
        results:Set(13, "6")
        results:Set(14, "8")
        results:Set(15, "10")
        suite:TestJavaScript(files, results)
    end

    action HourOfCodePart5
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "HourOfCodePart5.quorum")
        files:Add(main)
        results:Add(0, "0.0 is even")
        results:Add(1, "1.0 is odd")
        results:Add(2, "2.0 is even")
        results:Add(3, "3.0 is odd")
        results:Add(4, "4.0 is even")
        results:Add(5, "5.0 is odd")
        results:Add(6, "6.0 is even")
        results:Add(7, "7.0 is odd")
        results:Add(8, "8.0 is even")
        results:Add(9, "9.0 is odd")
        suite:Test(files, results)

        results:Set(0, "0 is even")
        results:Set(1, "1 is odd")
        results:Set(2, "2 is even")
        results:Set(3, "3 is odd")
        results:Set(4, "4 is even")
        results:Set(5, "5 is odd")
        results:Set(6, "6 is even")
        results:Set(7, "7 is odd")
        results:Set(8, "8 is even")
        results:Set(9, "9 is odd")
        suite:TestJavaScript(files, results)
    end

    action HourOfCodePart6
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "HourOfCodePart6.quorum")
        files:Add(main)
        results:Add(0, "Programming in Quorum is Fun!!!")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action MultipleClassManyReturnsAndNested
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "MultipleClassManyReturnsAndNested.quorum")
        files:Add(main)
        results:Add(0, "Odd")
        results:Add(1, "true")
        results:Add(2, "true")
        results:Add(3, "StackOverflow")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action MultipleClassNestedCallsAndReturns
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "MultipleClassNestedCallsAndReturns.quorum")
        files:Add(main)
        results:Add(0, "10")
        results:Add(1, "14")
        results:Add(2, "300")
        results:Add(3, "141")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action MultipleClassReturnMixedTypes
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "MultipleClassReturnMixedTypes.quorum")
        files:Add(main)
        results:Add(0, "Spring11")
        results:Add(1, "Summer12")
        results:Add(2, "Fall30")
        results:Add(3, "Winter04")
        results:Add(4, "Winter05")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action MultipleNestedFunctionCalls 
        suite:RunTest("Library/Tests/Actions/Pass/MultipleNestedFunctionCalls.quorum", "65536")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/MultipleNestedFunctionCalls.quorum", "65536")
    end

    action MultipleNestedFunctionCallsDouble 
        suite:RunTest("Library/Tests/Actions/Pass/MultipleNestedFunctionCallsDouble.quorum", "65536.0")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/MultipleNestedFunctionCallsDouble.quorum", "65536")
    end

    action MultipleNestedFunctionCallsInSoloCall 
        suite:RunTest("Library/Tests/Actions/Pass/MultipleNestedFunctionCallsInSoloCall.quorum", "65536")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/MultipleNestedFunctionCallsInSoloCall.quorum", "65536")
    end

    action MultipleNestedFunctionCallsWithAssignments
        suite:RunTest("Library/Tests/Actions/Pass/MultipleNestedFunctionCallsWithAssignments.quorum", "65536")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/MultipleNestedFunctionCallsWithAssignments.quorum", "65536")
    end

    action MultipleNestedFunctionCallsWithAssignmentsDouble 
        suite:RunTest("Library/Tests/Actions/Pass/MultipleNestedFunctionCallsWithAssignmentsDouble.quorum", "65536.0")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/MultipleNestedFunctionCallsWithAssignmentsDouble.quorum", "65536")
    end

    action NestedConditionalRepeat1
        suite:RunTest("Library/Tests/Actions/Pass/NestedConditionalRepeat1.quorum", "1", "16", "81", "256")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/NestedConditionalRepeat1.quorum", "1", "16", "81", "256")
    end

    action NestedConditionalRepeat2
        suite:RunTest("Library/Tests/Actions/Pass/NestedConditionalRepeat2.quorum", "1", "512", "19683", "262144")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/NestedConditionalRepeat2.quorum", "1", "512", "19683", "262144")
    end

    action NestedFunctionCall 
        suite:RunTest("Library/Tests/Actions/Pass/NestedFunctionCall.quorum", "300")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/NestedFunctionCall.quorum", "300")
    end

    action NestedFunctionCallDouble 
        suite:RunTest("Library/Tests/Actions/Pass/NestedFunctionCallDouble.quorum", "300.0")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/NestedFunctionCallDouble.quorum", "300")
    end

    action NonParallelNestedReturn
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "NonParallelNestedReturn.quorum")
        files:Add(main)
        results:Add(0, "Spring")
        results:Add(1, "Summer")
        results:Add(2, "Fall")
        results:Add(3, "Winter")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatTextCall 
        suite:RunTest("Library/Tests/Actions/Pass/RepeatTextCall.quorum", "321...Liftoff")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/RepeatTextCall.quorum", "321...Liftoff")
    end
    
    action Return2ActionsBool
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Return2ActionsBool.quorum")
        files:Add(main)
        results:Add(0, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end
    
    action Return2ActionsBoolToVar
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Return2ActionsBoolToVar.quorum")
        files:Add(main)
        results:Add(0, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end
    
    action Return2ActionsInt 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Return2ActionsInt.quorum")
        files:Add(main)
        results:Add(0, "20")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end
    
    action Return2ActionsIntToVar
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Return2ActionsIntToVar.quorum")
        files:Add(main)
        results:Add(0, "20")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end
    
    action Return2ActionsNum
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Return2ActionsNum.quorum")
        files:Add(main)
        results:Add(0, "20.0")
        suite:Test(files, results)

        results:Set(0, "20")
        suite:TestJavaScript(files, results)
    end
    
    action Return2ActionsNumToVar
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Return2ActionsNumToVar.quorum")
        files:Add(main)
        results:Add(0, "20.0")
        suite:Test(files, results)

        results:Set(0, "20")
        suite:TestJavaScript(files, results)
    end

    action Return2ActionsText
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Return2ActionsText.quorum")
        files:Add(main)
        results:Add(0, "foobar")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end
    
    action Return2ActionsTextToVar
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Return2ActionsTextToVar.quorum")
        files:Add(main)
        results:Add(0, "foobar")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end
    
    action ReturnCast2ActionsBool
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ReturnCast2ActionsBool.quorum")
        files:Add(main)
        results:Add(0, "false")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ReturnCast2ActionsNum
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ReturnCast2ActionsNum.quorum")
        files:Add(main)
        results:Add(0, "2")
        results:Add(1, "20.0")
        suite:Test(files, results)

        results:Set(1, "20")
        suite:TestJavaScript(files, results)
    end

    action ReturnCast2ActionsText
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ReturnCast2ActionsText.quorum")
        files:Add(main)
        results:Add(0, "foo")
        results:Add(1, "foobar")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ReturnIfElseBool1
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ReturnIfElseBool1.quorum")
        files:Add(main)
        results:Add(0, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ReturnIfElseBool2
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ReturnIfElseBool2.quorum")
        files:Add(main)
        results:Add(0, "false")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ReturnIfElseInt1
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ReturnIfElseInt1.quorum")
        files:Add(main)
        results:Add(0, "-1")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ReturnIfElseInt2
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ReturnIfElseInt2.quorum")
        files:Add(main)
        results:Add(0, "1")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ReturnIfElseNum1
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ReturnIfElseNum1.quorum")
        files:Add(main)
        results:Add(0, "-1.0")
        suite:Test(files, results)

        results:Set(0, "-1")
        suite:TestJavaScript(files, results)
    end

    action ReturnIfElseNum2
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ReturnIfElseNum2.quorum")
        files:Add(main)
        results:Add(0, "1.0")
        suite:Test(files, results)

        results:Set(0, "1")
        suite:TestJavaScript(files, results)
    end

    action ReturnIfElseText1
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ReturnIfElseText1.quorum")
        files:Add(main)
        results:Add(0, "negative")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ReturnIfElseText2
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ReturnIfElseText2.quorum")
        files:Add(main)
        results:Add(0, "positive")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ReturnIfElseToVarBool1
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ReturnIfElseToVarBool1.quorum")
        files:Add(main)
        results:Add(0, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ReturnIfElseToVarBool2
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ReturnIfElseToVarBool2.quorum")
        files:Add(main)
        results:Add(0, "false")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ReturnIfElseToVarInt1
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ReturnIfElseToVarInt1.quorum")
        files:Add(main)
        results:Add(0, "-1")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ReturnIfElseToVarInt2
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ReturnIfElseToVarInt2.quorum")
        files:Add(main)
        results:Add(0, "1")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ReturnIfElseToVarNum1
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ReturnIfElseToVarNum1.quorum")
        files:Add(main)
        results:Add(0, "-1.0")
        suite:Test(files, results)

        results:Set(0, "-1")
        suite:TestJavaScript(files, results)
    end

    action ReturnIfElseToVarNum2
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ReturnIfElseToVarNum2.quorum")
        files:Add(main)
        results:Add(0, "1.0")
        suite:Test(files, results)

        results:Set(0, "1")
        suite:TestJavaScript(files, results)
    end

   action ReturnIfElseToVarText1
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ReturnIfElseToVarText1.quorum")
        files:Add(main)
        results:Add(0, "negative")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ReturnIfElseToVarText2
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ReturnIfElseToVarText2.quorum")
        files:Add(main)
        results:Add(0, "positive")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action SimpleActionPassObject 
        suite:RunTest("Library/Tests/Actions/Pass/SimpleActionPassObject.quorum", "hello world")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/SimpleActionPassObject.quorum", "hello world")
    end

    action SimpleCastArgument 
        suite:RunTest("Library/Tests/Actions/Pass/SimpleCastArgument.quorum", "1.0")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/SimpleCastArgument.quorum", "1")
    end

    action SimpleNestedActions 
        suite:RunTest("Library/Tests/Actions/Pass/SimpleNestedActions.quorum", "125")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/SimpleNestedActions.quorum", "125")
    end

    action SimpleOneActionChangeParameter 
        suite:RunTest("Library/Tests/Actions/Pass/SimpleOneActionChangeParameter.quorum", "5")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/SimpleOneActionChangeParameter.quorum", "5")
    end

    action SimpleOneActionConcatenateText 
        suite:RunTest("Library/Tests/Actions/Pass/SimpleOneActionConcatenateText.quorum", "Hello World!")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/SimpleOneActionConcatenateText.quorum", "Hello World!")
    end

    action SimpleOneActionInControlExpression 
        suite:RunTest("Library/Tests/Actions/Pass/SimpleOneActionInControlExpression.quorum", "false")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/SimpleOneActionInControlExpression.quorum", "false")
    end

    action SimpleOneActionNoParamsNoReturn 
        suite:RunTest("Library/Tests/Actions/Pass/SimpleOneActionNoParamsNoReturn.quorum", "5")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/SimpleOneActionNoParamsNoReturn.quorum", "5")
    end

    action SimpleOneActionNoParamsReturnBoolean 
        suite:RunTest("Library/Tests/Actions/Pass/SimpleOneActionNoParamsReturnBoolean.quorum", "true")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/SimpleOneActionNoParamsReturnBoolean.quorum", "true")
    end

    action SimpleOneActionNoParamsReturnInt 
        suite:RunTest("Library/Tests/Actions/Pass/SimpleOneActionNoParamsReturnInt.quorum", "5")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/SimpleOneActionNoParamsReturnInt.quorum", "5")
    end

    action SimpleOneActionNoParamsReturnNumber 
        suite:RunTest("Library/Tests/Actions/Pass/SimpleOneActionNoParamsReturnNumber.quorum", "5.0")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/SimpleOneActionNoParamsReturnNumber.quorum", "5")
    end

    action SimpleOneActionNoParamsReturnNumberConcatenate 
        suite:RunTest("Library/Tests/Actions/Pass/SimpleOneActionNoParamsReturnNumberConcatenate.quorum", "36.0")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/SimpleOneActionNoParamsReturnNumberConcatenate.quorum", "36")
    end

    action SimpleOneActionNoParamsReturnText 
        suite:RunTest("Library/Tests/Actions/Pass/SimpleOneActionNoParamsReturnText.quorum", "5.0")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/SimpleOneActionNoParamsReturnText.quorum", "5.0")
    end

    action SimpleOneActionTwoParamsReturnInt 
        suite:RunTest("Library/Tests/Actions/Pass/SimpleOneActionTwoParamsReturnInt.quorum", "15")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/SimpleOneActionTwoParamsReturnInt.quorum", "15")
    end

    action TwoActionsDifferentParameters 
        suite:RunTest("Library/Tests/Actions/Pass/TwoActionsDifferentParameters.quorum", "true", "false")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/TwoActionsDifferentParameters.quorum", "true", "false")
    end

    action VTableObjectTest 
        suite:RunTest("Library/Tests/Actions/Pass/VTableObjectTest.quorum", "0","1")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/VTableObjectTest.quorum", "0","1")
    end

    action VTableCompareTest 
        suite:RunTest("Library/Tests/Actions/Pass/VTableCompareTest.quorum", "1")
        suite:RunJavaScriptTest("Library/Tests/Actions/Pass/VTableCompareTest.quorum", "1")
    end

    action SetterAfterUse
        suite:RunTest("Library/Tests/Actions/Pass/SetterAfterUse.quorum", "0")
    end

    action SetterBeforeUse
        suite:RunTest("Library/Tests/Actions/Pass/SetterBeforeUse.quorum", "0")
    end

    action ActionLetter
        Array<File> files
        File main
        main:SetPath(path + "ActionLetter.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action ActionOutside
        Array<File> files
        File main
        main:SetPath(path + "ActionOutside.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action HOCReturnIntFromMain
        Array<File> files
        File main
        main:SetPath(path + "HOCReturnIntFromMain.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action HOCReturnIntFromMainDeclared
        Array<File> files
        File main
        main:SetPath(path + "HOCReturnIntFromMainDeclared.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action HOCReturnIntFromCalledProcedure
        Array<File> files
        File main
        main:SetPath(path + "HOCReturnIntFromCalledProcedure.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action HOCReturnIntFromCalledProcedureWrongType1
        Array<File> files
        File main
        main:SetPath(path + "HOCReturnIntFromCalledProcedureWrongType1.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action HOCReturnIntFromCalledProcedureWrongType2
        Array<File> files
        File main
        main:SetPath(path + "HOCReturnIntFromCalledProcedureWrongType2.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action HOCUndeclaredVarToUndeclaredVar
        Array<File> files
        File main
        main:SetPath(path + "HOCUndeclaredVarToUndeclaredVar.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action HOCUndeclaredFunction
        Array<File> files
        File main
        main:SetPath(path + "HOCUndeclaredFunction.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action HOCUndefinedVariable
        Array<File> files
        File main
        main:SetPath(path + "HOCUndefinedVariable.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action IncorrectAssignment
        Array<File> files
        File main
        main:SetPath(path + "IncorrectAssignment.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action InvalidActionNumber
        Array<File> files
        File main
        main:SetPath(path + "InvalidActionNumber.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end
    
    action InvalidActionSymbol1
        Array<File> files
        File main
        main:SetPath(path + "InvalidActionSymbol1.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end
    
    action InvalidActionSymbol2
        Array<File> files
        File main
        main:SetPath(path + "InvalidActionSymbol2.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end
    
    action InvalidVarName1
        Array<File> files
        File main
        main:SetPath(path + "InvalidVarName1.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end
    
    action InvalidVarName2
        Array<File> files
        File main
        main:SetPath(path + "InvalidVarName2.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end
    
    action InvalidVarName3
        Array<File> files
        File main
        main:SetPath(path + "InvalidVarName3.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end
    
    action InvalidVarName4
        Array<File> files
        File main
        main:SetPath(path + "InvalidVarName4.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end
    
    action InvalidVarName5
        Array<File> files
        File main
        main:SetPath(path + "InvalidVarName5.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end
    
    action InvalidVarName6
        Array<File> files
        File main
        main:SetPath(path + "InvalidVarName6.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action MissingEnd
        Array<File> files
        File main
        main:SetPath(path + "MissingEnd.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action MissingMain
        Array<File> files
        File main
        main:SetPath(path + "MissingMain.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action MissingParen
        Array<File> files
        File main
        main:SetPath(path + "MissingParen.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action MissingReturn1
        Array<File> files
        File main
        main:SetPath(path + "MissingReturn1.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action MissingReturn2
        Array<File> files
        File main
        main:SetPath(path + "MissingReturn2.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action MissingReturn3
        Array<File> files
        File main
        main:SetPath(path + "MissingReturn3.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action MissingReturn4
        Array<File> files
        File main
        main:SetPath(path + "MissingReturn4.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action ReturnCast2ActionsInt
        Array<File> files
        File main
        main:SetPath(path + "ReturnCast2ActionsInt.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action SetterBeforeUseFail
        Array<File> files
        File main
        main:SetPath(path + "SetterBeforeUseFail.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action TextJunk1
        Array<File> files
        File main
        main:SetPath(path + "TextJunk1.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action TextJunk2
        Array<File> files
        File main
        main:SetPath(path + "TextJunk2.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action InvalidActionName
        Array<File> files
        File main
        main:SetPath(path + "InvalidActionName.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end
end