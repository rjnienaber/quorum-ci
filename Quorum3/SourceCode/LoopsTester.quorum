package Libraries.Language.Compile.Test

use Libraries.Language.Compile.all
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Language.Compile.Parser
use Libraries.System.File
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Translate.QuorumJarGenerator
use Libraries.System.StackTraceItem

class LoopsTester 
    CompilerTestSuite suite = undefined
    text path = "Library/Tests/Loops/"
    text passPath = path + "Pass/"
    text failPath = path + "Fail/"
    action Test
        path = passPath
        RepeatFromToConstConst()
        RepeatFromToConstVar()
        RepeatFromToNestedConstConst()
        RepeatFromToNestedConstVar()
        RepeatFromToNestedVarConst()
        RepeatFromToNestedVarVar()
        RepeatFromToVarConst()
        RepeatFromToVarVar()
        RepeatNestedFromTimesUntilWhile()
        RepeatNestedTimesFromUntilWhile()
        RepeatNestedUntilWhileTimesFrom()
        RepeatNestedWhileUntilTimesFrom()
        RepeatTimesConst()
        RepeatTimesNestedConstConst()
        RepeatTimesNestedConstVar()
        RepeatTimesNestedVarConst()
        RepeatTimesNestedVarVar()
        RepeatTimesVar()
        RepeatUntilBoolean()
        RepeatUntilEqual()
        RepeatUntilGreaterThan()
        RepeatUntilGreaterThanEqual()
        RepeatUntilLessThan()
        RepeatUntilLessThanEqual()
        RepeatUntilNotEqual()
        RepeatWhileAndUntilWithParenNot()
        RepeatWhileBoolean()
        RepeatWhileEqual()
        RepeatWhileGreaterThan()
        RepeatWhileGreaterThanEqual()
        RepeatWhileLessThan()
        RepeatWhileLessThanEqual()
        RepeatWhileNotEqual()
        RepeatZeroTimes()
        SimpleRepeatWhile()

//FAIL TESTS
        path = failPath
        RepeatTimesConstBool()
        RepeatTimesConstDouble()
        RepeatTimesConstText()
        RepeatTimesVarBool()
        RepeatTimesVarDouble()
        RepeatTimesVarText()
    end

    action GetName returns text
        return "Loops Tests"
    end

    action GetCompilerTestSuite returns CompilerTestSuite
        return suite
    end

    action SetCompilerTestSuite(CompilerTestSuite suite)
        me:suite = suite
    end

    action RepeatFromToConstConst 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatFromToConstConst.quorum")
        files:Add(main)
        results:Add(0, "11")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatFromToConstVar 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatFromToConstVar.quorum")
        files:Add(main)
        results:Add(0, "11")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatFromToNestedConstConst 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatFromToNestedConstConst.quorum")
        files:Add(main)
        results:Add(0, "101")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatFromToNestedConstVar 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatFromToNestedConstVar.quorum")
        files:Add(main)
        results:Add(0, "11")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
        suite:RunTest("Library/Tests/Loops/Pass/RepeatFromToNestedConstVar.quorum", "11")
        suite:RunJavaScriptTest("Library/Tests/Loops/Pass/RepeatFromToNestedConstVar.quorum", "11")
    end

    action RepeatFromToNestedVarConst 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatFromToNestedVarConst.quorum")
        files:Add(main)
        results:Add(0, "101")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatFromToNestedVarVar 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatFromToNestedVarVar.quorum")
        files:Add(main)
        results:Add(0, "56")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatFromToVarConst 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatFromToVarConst.quorum")
        files:Add(main)
        results:Add(0, "11")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatFromToVarVar 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatFromToVarVar.quorum")
        files:Add(main)
        results:Add(0, "11")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatNestedFromTimesUntilWhile 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatNestedFromTimesUntilWhile.quorum")
        files:Add(main)
        results:Add(0, "82")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatNestedTimesFromUntilWhile 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatNestedTimesFromUntilWhile.quorum")
        files:Add(main)
        results:Add(0, "82")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatNestedUntilWhileTimesFrom 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatNestedUntilWhileTimesFrom.quorum")
        files:Add(main)
        results:Add(0, "82")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatNestedWhileUntilTimesFrom 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatNestedWhileUntilTimesFrom.quorum")
        files:Add(main)
        results:Add(0, "82")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatTimesConst 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatTimesConst.quorum")
        files:Add(main)
        results:Add(0, "5")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatTimesNestedConstConst 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatTimesNestedConstConst.quorum")
        files:Add(main)
        results:Add(0, "25")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatTimesNestedConstVar 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatTimesNestedConstVar.quorum")
        files:Add(main)
        results:Add(0, "25")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatTimesNestedVarConst 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatTimesNestedVarConst.quorum")
        files:Add(main)
        results:Add(0, "25")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatTimesNestedVarVar 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatTimesNestedVarVar.quorum")
        files:Add(main)
        results:Add(0, "25")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatTimesVar 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatTimesVar.quorum")
        files:Add(main)
        results:Add(0, "5")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatUntilBoolean 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatUntilBoolean.quorum")
        files:Add(main)
        results:Add(0, "6")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatUntilEqual 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatUntilEqual.quorum")
        files:Add(main)
        results:Add(0, "5")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatUntilGreaterThan 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatUntilGreaterThan.quorum")
        files:Add(main)
        results:Add(0, "6")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatUntilGreaterThanEqual 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatUntilGreaterThanEqual.quorum")
        files:Add(main)
        results:Add(0, "5")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatUntilLessThan 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatUntilLessThan.quorum")
        files:Add(main)
        results:Add(0, "4")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatUntilLessThanEqual 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatUntilLessThanEqual.quorum")
        files:Add(main)
        results:Add(0, "5")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatUntilNotEqual 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatUntilNotEqual.quorum")
        files:Add(main)
        results:Add(0, "6")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatWhileAndUntilWithParenNot 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatWhileAndUntilWithParenNot.quorum")
        files:Add(main)
        results:Add(0, "101")
        results:Add(1, "101")
        results:Add(2, "false")
        results:Add(3, "true")
        results:Add(4, "done")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatWhileBoolean 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatWhileBoolean.quorum")
        files:Add(main)
        results:Add(0, "5")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
        suite:RunTest("Library/Tests/Loops/Pass/RepeatWhileBoolean.quorum", "5")
        suite:RunJavaScriptTest("Library/Tests/Loops/Pass/RepeatWhileBoolean.quorum", "5")
    end

    action RepeatWhileEqual 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatWhileEqual.quorum")
        files:Add(main)
        results:Add(0, "0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatWhileGreaterThan 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatWhileGreaterThan.quorum")
        files:Add(main)
        results:Add(0, "5")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatWhileGreaterThanEqual 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatWhileGreaterThanEqual.quorum")
        files:Add(main)
        results:Add(0, "4")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatWhileLessThan 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatWhileLessThan.quorum")
        files:Add(main)
        results:Add(0, "5")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatWhileLessThanEqual 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatWhileLessThanEqual.quorum")
        files:Add(main)
        results:Add(0, "6")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatWhileNotEqual 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatWhileNotEqual.quorum")
        files:Add(main)
        results:Add(0, "5")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RepeatZeroTimes 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RepeatZeroTimes.quorum")
        files:Add(main)
        results:Add(0, "0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action SimpleRepeatWhile 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "SimpleRepeatWhile.quorum")
        files:Add(main)
        results:Add(0, "2")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

//  FAIL TESTS
    
    action RepeatTimesConstBool
        Array<File> files
        File main
        main:SetPath(path + "RepeatTimesConstBool.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action RepeatTimesConstDouble
        Array<File> files
        File main
        main:SetPath(path + "RepeatTimesConstDouble.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action RepeatTimesConstText
        Array<File> files
        File main
        main:SetPath(path + "RepeatTimesConstText.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action RepeatTimesVarBool
        Array<File> files
        File main
        main:SetPath(path + "RepeatTimesVarBool.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action RepeatTimesVarDouble
        Array<File> files
        File main
        main:SetPath(path + "RepeatTimesVarDouble.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action RepeatTimesVarText
        Array<File> files
        File main
        main:SetPath(path + "RepeatTimesVarText.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

end
