package Libraries.Language.Compile

use Libraries.Containers.Array
use Libraries.Containers.HashTable

class CompilerProfiler 
    Array<number> timing
    HashTable<integer, text> phaseHash

    constant integer START_TIME = 0    
    constant integer PARSING_TIME = 1
    constant integer GET_REQUIRED_FILES_TIME = 2
    constant integer TYPE_RESOLUTION_TIME = 3
    constant integer SEMANTIC_ANALYSIS_TIME = 4
    constant integer BYTECODE_WRITE_TIME = 5
    constant integer PACKAGING_TIME = 6

    constant text START_TIME_NAME = "Start"   
    constant text PARSING_TIME_NAME = "Parsing"
    constant text GET_REQUIRED_FILES_TIME_NAME = "Get Required Files"
    constant text TYPE_RESOLUTION_TIME_NAME = "Type Resolution"
    constant text SEMANTIC_ANALYSIS_TIME_NAME = "Semantic Analysis"
    constant text BYTECODE_WRITE_TIME_NAME = "Write Bytecode to Disk"
    constant text PACKAGING_TIME_NAME = "Packagine"
    
    on create
        phaseHash:Add(START_TIME, START_TIME_NAME)
        phaseHash:Add(PARSING_TIME, PARSING_TIME_NAME)
        phaseHash:Add(GET_REQUIRED_FILES_TIME, GET_REQUIRED_FILES_TIME_NAME)
        phaseHash:Add(TYPE_RESOLUTION_TIME, TYPE_RESOLUTION_TIME_NAME)
        phaseHash:Add(SEMANTIC_ANALYSIS_TIME, SEMANTIC_ANALYSIS_TIME_NAME)
        phaseHash:Add(BYTECODE_WRITE_TIME, BYTECODE_WRITE_TIME_NAME)
        phaseHash:Add(PACKAGING_TIME, PACKAGING_TIME_NAME)
    end


    action Add(number time)
        timing:Add(time)
    end

    action GetTime(integer i) returns number
        return timing:Get(i)
    end

    action GetSize returns integer
        return timing:GetSize()
    end

    action Add(CompilerProfiler profiler)
        number start = 0
        number previous = 0
        i = 0
        repeat profiler:GetSize() times
            number value = profiler:GetTime(i)
            if i = 0
                start = value
                previous = start
                //this will always be zero, so there is no point in adding it
                //unless position zero is greater than size
                if i >= timing:GetSize()
                    Add(0)
                end
            else
                if i >= timing:GetSize()
                    Add((value - previous))
                else 
                    number myCurrentValue = me:GetTime(i)
                    number newValue = value - previous

                    if myCurrentValue  < 0 or newValue < 0
                        a = 5
                    end
                    timing:Set(i, myCurrentValue + newValue)
                end
                previous = value
            end
            i = i + 1
        end
    end

    action OutputTimes
        i = 0
        number start = 0
        number previous = 0
        repeat timing:GetSize() times
            number value = timing:Get(i)
            if i = 0
                output START_TIME_NAME + ": 0" 
                start = value
                previous = start
            else
                name = phaseHash:GetValue(i)
                output name + ": " + (value - previous)
                previous = value
            end
            i = i + 1
        end
    end

    action OutputSummaryTimes
        i = 0
        repeat timing:GetSize() times
            name = phaseHash:GetValue(i)
            number value = timing:Get(i)
            value = value / 1000.0
            output name + ": " + value + " seconds"
            i = i + 1
        end
    end

    action Empty
        timing:Empty()
    end
end