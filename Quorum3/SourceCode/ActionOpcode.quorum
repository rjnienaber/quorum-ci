package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type
use Libraries.Containers.List
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Symbol.Action
use Libraries.Language.Compile.Translate.JavaBytecodeOpcodes

class ActionOpcode is QuorumOpcode
    List<QuorumOpcode> opcodeList
    Action method = undefined
    JavaBytecodeMethodWriter methodWriter = undefined
    JavaBytecodeOpcodes opcodes

    action GetMethodWriter returns JavaBytecodeMethodWriter
        return methodWriter
    end

    action SetMethodWriter(JavaBytecodeMethodWriter writer)
        methodWriter = writer
    end

    action GetAction returns Action
        return method
    end

    action SetAction(Action method)
        me:method = method
    end

    action Write
        methodWriter:VisitCode()
        Iterator<QuorumOpcode> iterator = opcodeList:GetIterator()
        repeat while iterator:HasNext()
            QuorumOpcode opcode = iterator:Next()
            opcode:Write()
        end

        Type type = method:GetReturnType()

        if type:IsBoolean()
            methodWriter:VisitInstruction(opcodes:GetBooleanReturn())
        elseif type:IsInteger()
            methodWriter:VisitInstruction(opcodes:GetIntegerReturn())
        elseif type:IsNumber()
            methodWriter:VisitInstruction(opcodes:GetDoubleReturn())
        elseif type:IsText()
            methodWriter:VisitInstruction(opcodes:GetObjectReturn())
        elseif type:IsVoid()
            methodWriter:VisitInstruction(opcodes:GetReturn())
        else //assume it is an object otherwise
            methodWriter:VisitInstruction(opcodes:GetObjectReturn())
        end

        methodWriter:VisitMaxSize(1,1)
        methodWriter:VisitEnd()
    end

    action WriteJavaScript returns text
        return ""
    end

    action GetTemplateCopy returns QuorumOpcode
        ActionOpcode op
        return op
    end

    action Add(QuorumOpcode opcode)
        opcodeList:Add(opcode)
    end
end