package Libraries.Language.Compile.Symbol

use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Language.Compile.CompilerError
use Libraries.Containers.HashTable
use Libraries.Language.Compile.Location
use Libraries.Containers.Blueprints.Iterator

class Block
    HashTable<text, Variable> variables
    Array<Block> blocks
    integer currentBlock = 0
    Block parentBlock = undefined
    Class parentClass = undefined
    Action parentAction = undefined
    integer bytecodeLocation = 0
    integer bytecodeLocationStartOfBlock = 0
    Variable exceptionVariable = undefined
    Array<Variable> orderedVariables

    action Add(Variable variable) returns CompilerError
        if variables:HasKey(variable:GetStaticKey())
            CompilerError error
            error:SetLineNumber(variable:GetLineNumber())
            error:SetFile(variable:GetFile())
            error:SetErrorMessage("Variable " + variable:GetDisplayName() + " has already been defined.")
            return error
        end
        variables:Add(variable:GetStaticKey(), variable)
        orderedVariables:Add(variable)
        return undefined
    end

    action SetExceptionVariable(Variable variable) returns CompilerError
        if variables:HasKey(variable:GetStaticKey())
            CompilerError error
            error:SetLineNumber(variable:GetLineNumber())
            error:SetFile(variable:GetFile())
            error:SetErrorMessage("Variable " + variable:GetDisplayName() + " has already been defined.")
            return error
        end
        exceptionVariable = variable
        variables:Add(variable:GetStaticKey(), variable)
        return undefined
    end

    action GetExceptionVariable returns Variable
        return exceptionVariable
    end

    action AssignBytecodeLocations
        bytecodeLocation = 0
        
        if parentBlock not= undefined
            bytecodeLocation = parentBlock:GetBytecodeLocation()
        else 
            bytecodeLocation = parentAction:GetBytecodeLocation()
        end
        
        if exceptionVariable not= undefined
            Type type = exceptionVariable:GetType()
            size = type:GetBytecodeSize()
            exceptionVariable:SetBytecodeLocation(bytecodeLocation)
            bytecodeLocation = bytecodeLocation + size
        end

        i = 0 
        repeat while i < orderedVariables:GetSize()
            Variable var = orderedVariables:Get(i)
            Type type = var:GetType()
            size = type:GetBytecodeSize()
            var:SetBytecodeLocation(bytecodeLocation)
            bytecodeLocation = bytecodeLocation + size
            i = i + 1
        end

        i = 0
        repeat while i < blocks:GetSize()
            Block b = blocks:Get(i)
            b:AssignBytecodeLocations()
            i = i + 1
        end
    end

    action GetBlock(integer next) returns Block
        return blocks:Get(next)
    end

    action GetBlocks returns Iterator<Block>
        return blocks:GetIterator()
    end

    /*
        Returns the number of blocks that are contained 
        within this block at the root level. Blocks inside of this block
        may contain their own sub-blocks, but these are not counted
        by this action.
    */
    action GetSubBlockSize returns integer
        return blocks:GetSize()
    end

    action GetBytecodeLocation returns integer
        return bytecodeLocation
    end

    action GetVariableThisBlock(text key) returns Variable
        Variable variable = variables:GetValue(key)
        return variable
    end

    action GetVariable(text key) returns Variable
        Variable variable = variables:GetValue(key)
        if variable not= undefined
            return variable
        end
        //if undefined, check the parents
        Block parentBlock = GetParentBlock()
        repeat while parentBlock not= undefined
            //check for the variable
            variable = parentBlock:GetVariableThisBlock(key)
            if variable not= undefined
                return variable
            end
            parentBlock = parentBlock:GetParentBlock()
        end //it isn't in any of the parent blocks, check the action and class

        if parentAction = undefined
            a = 5
        end
        variable = parentAction:GetParameter(key)
        if variable not= undefined
            return variable
        end

        //not a parameter either, so check the class's fields
        variable = parentClass:GetVariable(key)
        return variable
    end 

    /*
        This action returns all variables in this, and only this, block. 
        Variables in parent scope or child scope are excluded.
    */
    action GetVariables returns Iterator<Variable>
        return variables:GetValueIterator()
    end

    action Add(Block block)
        block:SetParentBlock(me)
        block:SetParentAction(parentAction)
        block:SetParentClass(parentClass)
        blocks:Add(block)
    end

    action GetParentBlock returns Block
        return parentBlock
    end

    action SetParentBlock(Block block)
        me:parentBlock = block
    end

    action GetParentClass returns Class
        return parentClass
    end

    action SetParentClass(Class clazz)
        me:parentClass = clazz
    end

    action GetParentAction returns Action
        return parentAction
    end

    action SetParentAction(Action method)
        me:parentAction = method
    end
end