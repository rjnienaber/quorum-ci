package Libraries.Language.Compile.Test

use Libraries.Language.Compile.all
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Language.Compile.Parser
use Libraries.System.File
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Translate.QuorumJarGenerator
use Libraries.System.StackTraceItem

class ExpressionsTester 
    CompilerTestSuite suite = undefined
    action Test
        AddBooleanText()
        AddDoubleDouble()
        AddDoubleInt()
        AddDoubleText()
        AddIntDouble()
        AddIntInt()
        AddIntText()
        AddTextBoolean()
        AddTextDouble()
        AddTextInt()
        AddTextText()
        AndBooleanBoolean()
//      CompareTextTextField()
        //ComplexExpression()
        DivDoubleDouble()
        DivDoubleInt()
        DivIntDouble()
        DivIntInt()
        EqualBooleanBoolean()
//        EqualCustomCustom()
        EqualDoubleDouble()
        EqualDoubleInt()
        EqualIntDouble()
        EqualIntInt()
        EqualTextText()
        Expression()
        GTDoubleDouble()
        GTDoubleInt()
        GTEDoubleDouble()
        GTEDoubleInt()
        GTEIntDouble()
        GTEIntInt()
        GTETextText()
        GTIntDouble()
        GTIntInt()
        GTTextText()
//        GetCharacterParameterText()   //test runs but fails
//        GetMaxParameterInteger()
//        GetTextParameterBoolean()     //test runs but faila
        //HelloWorld()
//        IsA()
//        IsInfiniteNumberParameter()   //test runs but fails
        LTDoubleDouble()
        LTDoubleInt()
        LTEDoubleDouble()
        LTEDoubleInt()
        LTEIntDouble()
        LTEIntInt()
        LTIntInt2()
        LTETextText()
        LTIntInt()
        LTTextText()
//        LocalVarDecl()
        LTIntDouble()     
        MinusInteger()
        MinusNumber()
        ModDoubleDouble()
        ModDoubleInt()
        ModIntDouble()
        ModIntInt()
        MutlDoubleDouble()
        MultDoubleInt()
        MultIntDouble()
        MultIntInt()
        NotBoolean()                  //test runs but fails
        NotEqualBooleanBoolean()
//        NotEqualCustomCustom()
        NotEqualDoubleDouble()
        NotEqualDoubleInt()
        NotEqualIntDouble()
        NotEqualIntInt()
        NotEqualTextText()
        OrAndBooleanBoolean()
        OrBooleanBoolean()
        OutputBoolean()
        OutputDouble()
        OutputInt()
        OutputText()
        SubDoubleDouble()
        SubDoubleInt()
        SubIntDouble()
        SubIntInt()
// FAIL TESTS
        MainNotCapitalized()
    end

    action GetName returns text
        return "Expressions Tests"
    end

    action GetCompilerTestSuite returns CompilerTestSuite
        return suite
    end

    action SetCompilerTestSuite(CompilerTestSuite suite)
        me:suite = suite
    end

    action AddBooleanText
        suite:RunTest("Library/Tests/Expressions/Pass/AddBooleanText.quorum", "true text", "false text")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/AddBooleanText.quorum", "true text", "false text")
    end

    action AddDoubleDouble
        suite:RunTest("Library/Tests/Expressions/Pass/AddDoubleDouble.quorum", "7.1", "7.1")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/AddDoubleDouble.quorum", "7.1", "7.1")
    end

    action AddDoubleInt
        suite:RunTest("Library/Tests/Expressions/Pass/AddDoubleInt.quorum", "7.2", "7.2")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/AddDoubleInt.quorum", "7.2", "7.2")
    end

    action AddDoubleText
        suite:RunTest("Library/Tests/Expressions/Pass/AddDoubleText.quorum", "3.2 is a number.", "3.6 is a number.")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/AddDoubleText.quorum", "3.2 is a number.", "3.6 is a number.")
    end

    action AddIntDouble
        suite:RunTest("Library/Tests/Expressions/Pass/AddIntDouble.quorum", "13.5", "13.6")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/AddIntDouble.quorum", "13.5", "13.6")
    end

    action AddIntInt
        suite:RunTest("Library/Tests/Expressions/Pass/AddIntInt.quorum", "6")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/AddIntInt.quorum", "6")
    end

    action AddIntText
        suite:RunTest("Library/Tests/Expressions/Pass/AddIntText.quorum","1 is an integer", "2 is an integer")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/AddIntText.quorum","1 is an integer", "2 is an integer")
    end

    action AddTextBoolean
        suite:RunTest("Library/Tests/Expressions/Pass/AddTextBoolean.quorum","boolean is true", "boolean is false")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/AddTextBoolean.quorum","boolean is true", "boolean is false")
    end

    action AddTextDouble
        suite:RunTest("Library/Tests/Expressions/Pass/AddTextDouble.quorum","number is 1.0", "number is 2.0")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/AddTextDouble.quorum","number is 1.0", "number is 2.0")
    end

    action AddTextInt
        suite:RunTest("Library/Tests/Expressions/Pass/AddTextInt.quorum","int is 1", "int is 2")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/AddTextInt.quorum","int is 1", "int is 2")
    end

    action AddTextText
        suite:RunTest("Library/Tests/Expressions/Pass/AddTextText.quorum","hello world", "world hello")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/AddTextText.quorum","hello world", "world hello")
    end

    action AndBooleanBoolean
        suite:RunTest("Library/Tests/Expressions/Pass/AndBooleanBoolean.quorum",
            "true", "false", "false", "false")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/AndBooleanBoolean.quorum",
        //    "true", "false", "false", "false")
    end

    action CompareTextTextField
        suite:RunTest("Library/Tests/Expressions/Pass/CompareTextTextField.quorum", "1")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/CompareTextTextField.quorum", "1")
    end

    action ComplexExpression
        suite:RunTest("Library/Tests/Expressions/Pass/ComplexExpression.quorum", "false")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/LTIntInt.quorum", "false", "true")
    end

    action DivDoubleDouble
        suite:RunTest("Library/Tests/Expressions/Pass/DivDoubleDouble.quorum", "2.0", "2.0")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/DivDoubleDouble.quorum", "2.0", "2.0")
    end

    action DivDoubleInt
        suite:RunTest("Library/Tests/Expressions/Pass/DivDoubleInt.quorum", "2.0", "2.0")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/DivDoubleInt.quorum", "2.0", "2.0")
    end

    action DivIntDouble
        suite:RunTest("Library/Tests/Expressions/Pass/DivIntDouble.quorum", "2.0", "2.0")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/DivIntDouble.quorum", "2.0", "2.0")
    end

    action DivIntInt
        suite:RunTest("Library/Tests/Expressions/Pass/DivIntInt.quorum", "2", "2")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/DivIntInt.quorum", "2", "2")
    end

    action EqualBooleanBoolean
        suite:RunTest("Library/Tests/Expressions/Pass/EqualBooleanBoolean.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/EqualBooleanBoolean.quorum", "false", "true")
    end

    action EqualCustomCustom
        suite:RunTest("Library/Tests/Expressions/Pass/EqualCustomCustom.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/EqualCustomCustom.quorum", "false", "true")
    end

    action EqualDoubleDouble
        suite:RunTest("Library/Tests/Expressions/Pass/EqualDoubleDouble.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/EqualDoubleDouble.quorum", "false", "true")
    end

    action EqualDoubleInt
        suite:RunTest("Library/Tests/Expressions/Pass/EqualDoubleInt.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/EqualDoubleInt.quorum", "false", "true")
    end

    action EqualIntDouble
        suite:RunTest("Library/Tests/Expressions/Pass/EqualIntDouble.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/EqualIntDouble.quorum", "false", "true")
    end

    action EqualIntInt
        suite:RunTest("Library/Tests/Expressions/Pass/EqualIntInt.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/EqualIntInt.quorum", "false", "true")
    end

    action EqualTextText
        suite:RunTest("Library/Tests/Expressions/Pass/EqualTextText.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/EqualTextText.quorum", "false", "true")
    end

    action Expression
        suite:RunTest("Library/Tests/Expressions/Pass/Expression.quorum", "15")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/Expression.quorum", "15")
    end

    action GTDoubleDouble 
        suite:RunTest("Library/Tests/Expressions/Pass/GTDoubleDouble.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/GTDoubleDouble.quorum", "false", "true")
    end

    action GTDoubleInt
        suite:RunTest("Library/Tests/Expressions/Pass/GTDoubleInt.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/GTDoubleInt.quorum", "false", "true")
    end

    action GTEDoubleDouble
        suite:RunTest("Library/Tests/Expressions/Pass/GTEDoubleDouble.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/GTEDoubleDouble.quorum", "false", "true")
    end

    action GTEDoubleInt
        suite:RunTest("Library/Tests/Expressions/Pass/GTEDoubleInt.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/GTEDoubleInt.quorum", "false", "true")
    end

    action GTEIntDouble
        suite:RunTest("Library/Tests/Expressions/Pass/GTEIntDouble.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/GTEIntDouble.quorum", "false", "true")
    end

    action GTEIntInt
        suite:RunTest("Library/Tests/Expressions/Pass/GTEIntInt.quorum", "false", "true")
//        suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/GTEIntInt.quorum", "false", "true")
    end

    action GTETextText
        suite:RunTest("Library/Tests/Expressions/Pass/GTETextText.quorum", "false", "true")
//        suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/GTETextText.quorum", "false", "true")
    end

    action GTIntDouble
        suite:RunTest("Library/Tests/Expressions/Pass/GTIntDouble.quorum", "false", "true")
//        suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/GTIntDouble.quorum", "false", "true")
    end
    
    action GTIntInt
        suite:RunTest("Library/Tests/Expressions/Pass/GTIntInt.quorum", "false", "true")
//        suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/GTIntInt.quorum", "false", "true")
    end
    
    action GTTextText
        suite:RunTest("Library/Tests/Expressions/Pass/GTTextText.quorum", "false", "false")
//        suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/GTTextText.quorum", "false", "false")
    end
    
    action GetCharacterParameterText
        suite:RunTest("Library/Tests/Expressions/Pass/GetCharacterParameterText.quorum", "false")
//        suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/GetCharacterParameterText.quorum", "false")
    end

    action GetMaxParameterInteger
        suite:RunTest("Library/Tests/Expressions/Pass/GetMaxParameterInteger.quorum", "true")
//        suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/GetMaxParameterInteger.quorum", "true")
    end
    
    action GetTextParameterBoolean
        suite:RunTest("Library/Tests/Expressions/Pass/GetTextParameterBoolean.quorum", "true")
//        suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/GetTextParameterBoolean.quorum", "false")
    end

//    action HelloWorld
//        suite:RunTest("Library/Tests/Expressions/Pass/HelloWorld.quorum", "Hello, World!")
//        suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/HelloWorld.quorum", "Hello, World!")
//    end

    action IsA
        suite:RunTest("Library/Tests/Expressions/Pass/IsA.quorum", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/IsA.quorum", "true")
    end
    
    action IsInfiniteNumberParameter
        suite:RunTest("Library/Tests/Expressions/Pass/IsInfiniteNumberParameter.quorum", "false")
        //suite:RunTest("Library/Tests/Expressions/Pass/IsInfiniteNumberParameter.quorum", "false")
    end

    action LTDoubleDouble
        suite:RunTest("Library/Tests/Expressions/Pass/LTDoubleDouble.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/LTDoubleDouble.quorum", "false", "true")
    end

    action LTDoubleInt
        suite:RunTest("Library/Tests/Expressions/Pass/LTDoubleInt.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/LTDoubleInt.quorum", "false", "true")
    end

    action LTEDoubleDouble
        suite:RunTest("Library/Tests/Expressions/Pass/LTEDoubleDouble.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/LTEDoubleDouble.quorum", "false", "true")
    end

    action LTEDoubleInt
        suite:RunTest("Library/Tests/Expressions/Pass/LTEDoubleInt.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/LTEDoubleInt.quorum", "false", "true")
    end

    action LTEIntDouble
        suite:RunTest("Library/Tests/Expressions/Pass/LTEIntDouble.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/LTEIntDouble.quorum", "false", "true")
    end

    action LTEIntInt
        suite:RunTest("Library/Tests/Expressions/Pass/LTEIntInt.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/LTEIntInt.quorum", "false", "true")
    end

    action LTETextText
        suite:RunTest("Library/Tests/Expressions/Pass/LTETextText.quorum", "true", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/LTETextText.quorum", "true", "true")
    end

    action LTIntDouble
        suite:RunTest("Library/Tests/Expressions/Pass/LTIntDouble.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/LTIntDouble.quorum", "false", "true")
    end

    action LTIntInt
        suite:RunTest("Library/Tests/Expressions/Pass/LTIntInt.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/LTIntInt.quorum", "false", "true")
    end

    action LTIntInt2
        suite:RunTest("Library/Tests/Expressions/Pass/LTIntInt2.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/LTIntInt.quorum", "false", "true")
    end

    action LTTextText
        suite:RunTest("Library/Tests/Expressions/Pass/LTTextText.quorum", "true", "false")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/LTEextText.quorum", "true", "false")
    end

    action LocalVarDecl
        //note this test is not in ExpressionsTester.java
        //suite:RunTest("Library/Tests/Expressions/Pass/LocalVarDecl.quorum", "1000", "3.0", "c", "true", "false")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/LocalVarDecl.quorum", "1000", "3.0", "c", "true", "false")
    end

    action MinusInteger()
        suite:RunTest("Library/Tests/Expressions/Pass/MinusInteger.quorum", "-1", "-15")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/MinusInteger.quorum", "-1", "-15")
    end

    action MinusNumber()
        suite:RunTest("Library/Tests/Expressions/Pass/MinusNumber.quorum", "-1.0", "-15.0")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/MinusNumber.quorum", "-1.0", "-15.0")
    end

    action ModDoubleDouble
        suite:RunTest("Library/Tests/Expressions/Pass/ModDoubleDouble.quorum", "1.0", "1.0")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/ModDoubleDouble.quorum", "1.0", "1.0")
    end

    action ModDoubleInt
        suite:RunTest("Library/Tests/Expressions/Pass/ModDoubleInt.quorum", "1.0", "1.0")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/ModDoubleInt.quorum", "1.0", "1.0")
    end

    action ModIntDouble
        suite:RunTest("Library/Tests/Expressions/Pass/ModIntDouble.quorum", "1.0", "1.0")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/ModIntDouble.quorum", "1.0", "1.0")
    end

    action ModIntInt
        suite:RunTest("Library/Tests/Expressions/Pass/ModIntInt.quorum", "1", "1")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/ModIntInt.quorum", "1", "1")
    end

    action MutlDoubleDouble
        suite:RunTest("Library/Tests/Expressions/Pass/MultDoubleDouble.quorum", "4.0", "4.0")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/MultDoubleDouble.quorum", "4.0", "4.0")
    end

    action MultDoubleInt
        suite:RunTest("Library/Tests/Expressions/Pass/MultDoubleInt.quorum", "4.0", "4.0")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/MultDoubleInt.quorum", "4.0", "4.0")
    end

    action MultIntDouble
        suite:RunTest("Library/Tests/Expressions/Pass/MultIntDouble.quorum", "4.0", "4.0")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/MultIntDouble.quorum", "4.0", "4.0")
    end

    action MultIntInt
        suite:RunTest("Library/Tests/Expressions/Pass/MultIntInt.quorum", "4", "4")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/MultIntInt.quorum", "4", "4")
    end

    action NotBoolean
        //note this test is not in ExpressionsTester.java
        suite:RunTest("Library/Tests/Expressions/Pass/NotBoolean.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/NotBoolean.quorum", "false", "true")
    end
    
    action NotEqualBooleanBoolean
        suite:RunTest("Library/Tests/Expressions/Pass/NotEqualBooleanBoolean.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/NotEqualBooleanBoolean.quorum", "false", "true")
    end

    action NotEqualCustomCustom
        suite:RunTest("Library/Tests/Expressions/Pass/NotEqualCustomCustom.quorum", "true", "false")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/NotEqualCustomCustom.quorum", "true", "false")
    end

    action NotEqualDoubleDouble
        suite:RunTest("Library/Tests/Expressions/Pass/NotEqualDoubleDouble.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/NotEqualDoubleDouble.quorum", "false", "true")
    end

    action NotEqualDoubleInt
        suite:RunTest("Library/Tests/Expressions/Pass/NotEqualDoubleInt.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/NotEqualDoubleInt.quorum", "false", "true")
    end

    action NotEqualIntDouble
        suite:RunTest("Library/Tests/Expressions/Pass/NotEqualIntDouble.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/NotEqualIntDouble.quorum", "false", "true")
    end

    action NotEqualIntInt
        suite:RunTest("Library/Tests/Expressions/Pass/NotEqualIntInt.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/NotEqualIntInt.quorum", "false", "true")
    end

    action NotEqualTextText
        suite:RunTest("Library/Tests/Expressions/Pass/NotEqualTextText.quorum", "false", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/NotEqualTextText.quorum", "false", "true")
    end

    action OrAndBooleanBoolean
        suite:RunTest("Library/Tests/Expressions/Pass/OrAndBooleanBoolean.quorum", "false", "true", "true", "true")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/OrAndBooleanBoolean.quorum", "false", "true", "true", "true")
    end

    action OrBooleanBoolean
        suite:RunTest("Library/Tests/Expressions/Pass/OrBooleanBoolean.quorum", "true", "true", "true", "false")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/OrBooleanBoolean.quorum", "true", "true", "true", "false")
    end

    action OutputBoolean
        suite:RunTest("Library/Tests/Expressions/Pass/OutputBoolean.quorum", "true")
        suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/OutputBoolean.quorum", "true")
    end
   
    action OutputDouble
        suite:RunTest("Library/Tests/Expressions/Pass/OutputDouble.quorum", "7.5")
        suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/OutputDouble.quorum", "7.5")
    end

    action OutputInt
        suite:RunTest("Library/Tests/Expressions/Pass/OutputInt.quorum", "5")
        suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/OutputInt.quorum", "5")
    end
   
    action OutputText
        suite:RunTest("Library/Tests/Expressions/Pass/OutputText.quorum", "Hello, World!")
        suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/OutputText.quorum", "Hello, World!")
    end


    action SubDoubleDouble
        suite:RunTest("Library/Tests/Expressions/Pass/SubDoubleDouble.quorum", "0.0", "0.0")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/SubDoubleDouble.quorum", "0.0", "0.0")
    end

    action SubDoubleInt
        suite:RunTest("Library/Tests/Expressions/Pass/SubDoubleInt.quorum", "0.0", "0.0")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/SubDoubleInt.quorum", "0.0", "0.0")
    end

    action SubIntDouble
        suite:RunTest("Library/Tests/Expressions/Pass/SubIntDouble.quorum", "0.0", "0.0")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/SubIntDouble.quorum", "0.0", "0.0")
    end

    action SubIntInt
        suite:RunTest("Library/Tests/Expressions/Pass/SubIntInt.quorum", "0", "0")
        //suite:RunJavaScriptTest("Library/Tests/Expressions/Pass/SubIntInt.quorum", "0", "0")
    end

    action MainNotCapitalized
        suite:RunTestFail("Library/Tests/Expressions/Fail/MainNotCapitalized.quorum")
        //suite:RunJavaScriptTestFail("Library/Tests/Expressions/Fail/MainNotCapitalized.quorum")
    end
end