package Libraries.Compute

use Libraries.Containers.List
use Libraries.Language.Errors.OutOfBoundsError

/*
The Random class permits generation of pseudorandom numbers that can be used
for a variety of applications.

Attribute: Example

use Libraries.Compute.Random

    class Main
        action main
            // Print a list of ten random integers, each within the range
            // 5 to 9.
            Random random

            repeat 10 times
                output random:RandomIntegerBetween(5, 9)
            end
        end
    end
*/

class Random
    private system action InitializeNative()
    private system action RandomIntegerNative(integer maximum) returns integer

    /*
    This action sets the seed used to generate random numbers. On creation of
    a Random object, the seed is set to the current system time in milliseconds.

    Attribute: Parameter seed The number that should be used as a seed. Note that
    the fractional portion of the number will be ignored.

    Attribute: Example
    use Libraries.Compute.Random
    Random random
    random:SetSeed(1010001) // set the seed to 1010001

    */
    system action SetSeed(number seed)

    /*
    This action returns a random integer within the range
    0 to +2,147,483,646 (lower bound inclusive, upper bound inclusive).

    Attribute: Returns Returns the random number.

    Attribute: Example
    use Libraries.Compute.Random
    Random random
    integer randomNumber = random:RandomInteger()

    */
    system action RandomInteger() returns integer

    /*
    This action returns a random number within the range 0 to 1.

    Attribute: Returns Returns the random number.

    Attribute: Example
    use Libraries.Compute.Random
    Random random
    number randomNumber = random:RandomNumber()

    */
    system action RandomNumber() returns number

    /*
    This action returns a random boolean value. (True or False)

    Attribute: Returns Returns the random boolean.

    Attribute: Example
    use Libraries.Compute.Random
    Random random
    boolean randomBool = random:RandomBoolean()

    */
    system action RandomBoolean() returns boolean

    on create
        // Set up on the native side--basically, choose a reasonable default
        // seed value.
        InitializeNative()
    end

    /*
    This action returns a random integer that is between zero (inclusive) and
    +2,147,483,646 (inclusive).
    
    Attribute: Parameter maximum - The maximum integer that can be generated.
    Attribute: Returns Returns the random integer.

    Attribute: Example
    use Libraries.Compute.Random
    Random random
    integer randomNumber = random:RandomInteger(5)
    */
    action RandomInteger(integer maximum) returns integer
        if maximum <= 0
            OutOfBoundsError e
            e:SetErrorMessage("The maximum number must be a positive integer.")
            alert(e)
        end

        return me:RandomIntegerNative(maximum)
    end

    /*
    This action returns a random integer between minimum and maximum. Minimum
    and maximum are inclusive.

    Attribute: Parameter minimum The minimum number to be generated.
    Attribute: Parameter maximum The maximum number to be generated.
    Attribute: Returns Returns the random integer.

    Attribute: Example
    use Libraries.Compute.Random
    Random random
    integer randomNumber = random:RandomIntegerBetween(1, 5)

    */
    action RandomIntegerBetween(integer minimum, integer maximum) returns integer
        if minimum >= maximum
            OutOfBoundsError e
            e:SetErrorMessage("The minimum number must be smaller than the maximum number.")
            alert(e)
        elseif minimum < 0 or maximum < 0
            OutOfBoundsError e
            e:SetErrorMessage("The minimum and maximum numbers must be greater than or equal to zero.")
            alert(e)
        elseif (maximum - minimum) <= 0
            OutOfBoundsError e
            e:SetErrorMessage("There is no integer between " + minimum + " and " + maximum + ".")
            alert(e)
        end

        return me:RandomInteger(maximum - minimum) + minimum
    end

    /*
    This action returns a list of randomly generated integers in the range
    0 to +2,147,483,646 (lower bound inclusive, upper bound inclusive).

    Attribute: Parameter length the length of the list to be generated.

    Attribute: Returns Returns the list of random integers.

    Attribute: Example
    use Libraries.Compute.Random
    use Libraries.Containers.List
    Random random
    List<Integer> list
    list = random:RandomListOfIntegers(15)

    */
    action RandomListOfIntegers(integer length) returns List<integer>
        if length <= 0
            OutOfBoundsError e
            e:SetErrorMessage("The list length must be a positive integer.")
            alert(e)
        end

        List<integer> newList
        integer counter = 0
        
        repeat until counter = length
            newList:Add(me:RandomInteger())
            counter = counter + 1
        end

        return newList
    end

    /*
    This action returns a list of randomly generated numbers in the range
    0 to 1.

    Attribute: Parameter length the length of the list to be generated.

    Attribute: Returns Returns the list of random numbers.

    Attribute: Example
    use Libraries.Compute.Random
    use Libraries.Containers.List
    Random random
    List<number> list
    list = random:RandomListOfNumbers(15)

    */
    action RandomListOfNumbers(integer length) returns List<number>
        if length <= 0
            OutOfBoundsError e
            e:SetErrorMessage("The list length must be a positive integer.")
            alert(e)
        end

        List<number> newList
        integer counter = 0
        
        repeat until counter = length
            newList:Add(me:RandomNumber())
            counter = counter + 1
        end

        return newList
    end
end