package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type
use Libraries.Containers.List
use Libraries.Containers.Blueprints.Iterator

class BlockOpcode is QuorumOpcode
    List<QuorumOpcode> opcodes
    BlockOpcode parentOpcode = undefined

    action SetMethodWriterToAllChildren(JavaBytecodeMethodWriter writer)
        SetMethodWriter(writer)
        Iterator<QuorumOpcode> it = opcodes:GetIterator()
        repeat while it:HasNext()
            QuorumOpcode op = it:Next()
            op:SetMethodWriterToAllChildren(writer)
        end
    end

    action SetBytecodeWriteOffsetToAllChildren(integer offset)
        SetBytecodeWriteOffset(offset)
        Iterator<QuorumOpcode> it = opcodes:GetIterator()
        repeat while it:HasNext()
            QuorumOpcode op = it:Next()
            op:SetBytecodeWriteOffsetToAllChildren(offset)
        end
    end

    action Write
        Iterator<QuorumOpcode> iterator = opcodes:GetIterator()
        repeat while iterator:HasNext()
            QuorumOpcode opcode = iterator:Next()
            opcode:Write()
        end
    end

    action GetParentBlock returns BlockOpcode
        return parentOpcode
    end

    action SetParentBlock(BlockOpcode block)
        parentOpcode = block
    end

    /*
        This action returns true only if the block contains opcodes. This is
        potentially useful for the case when a block exists, but there
        is no valid code inside of it.
    */
    action IsEmpty returns boolean
        return opcodes:IsEmpty()
    end

    action WriteJavaScript returns text
        text result = ""
        Iterator<QuorumOpcode> iterator = opcodes:GetIterator()
        repeat while iterator:HasNext()
            QuorumOpcode opcode = iterator:Next()
            result = result + opcode:WriteJavaScript()
        end

        return result
    end

    action GetTemplateCopy returns QuorumOpcode
        BlockOpcode op
        return op
    end

    action Add(QuorumOpcode opcode)
        opcodes:Add(opcode)
    end
end