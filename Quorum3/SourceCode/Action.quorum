package Libraries.Language.Compile.Symbol

use Libraries.Containers.List
use Libraries.Containers.Blueprints.Iterator
use Libraries.Containers.HashTable

class Action is Symbol
    List<Variable> parameters
    HashTable<text, Variable> parameterHash
    boolean isBlueprint = false
    boolean isSystem = false
    Type returnType = undefined
    Block block = undefined
    Class parentClass = undefined
    integer bytecodeLocation = 1 //always start skipping "this"

    action GetBlock returns Block
        return block
    end

    action SetBlock(Block block)
        block:SetParentAction(me)
        block:SetParentClass(GetParentClass())
        if me:block = undefined
            me:block = block
        end
    end

    action AddParameter(Variable parameter)
        Type type = parameter:GetType()
        integer size = type:GetBytecodeSize()
        parameter:SetBytecodeLocation(bytecodeLocation)
        bytecodeLocation = bytecodeLocation + size

        parameters:Add(parameter)
        parameterHash:Add(parameter:GetStaticKey(), parameter)
    end

    action GetBytecodeLocation returns integer
        return bytecodeLocation
    end

    action GetParameter(text key) returns Variable
        return parameterHash:GetValue(key)
    end

    action GetParametersSize returns integer
        return parameters:GetSize()
    end

    action GetParentClass returns Class
        return parentClass
    end

    action SetParentClass(Class clazz)
        parentClass = clazz
    end

    /*
        This action returns true if this is a Main action and false otherwise.
        The rules for determinining this are that 1) it may not be a blueprint
        action, 2) it may not be a system action, 3) it must be named either
        main or Main. 

        Attribute: Returns whether or not the action is a main action.

        Attribute: Example
        use Libraries.Language.Compile.Symbol.Action

        Action act
        boolean test = act:IsMain() //would be false by default
    */
    action IsMain returns boolean
        if isBlueprint
            return false
        end

        if isSystem
            return false
        end

        if not parameters:IsEmpty()
            return false
        end

        if me:GetName() = "Main" or  me:GetName() = "main"
            return true
        end

        return false
    end
    /*
        This Iterator returns the parameters in the action in the order
        in which they are declared.
    */
    action GetParameterIterator returns Iterator<Variable>
        return parameters:GetIterator()
    end

    action IsBlueprint returns boolean
        return isBlueprint
    end

    action SetIsBluePrint(boolean isBlueprint)
        me:isBlueprint = isBlueprint
    end

    action IsSystem returns boolean
        return isSystem
    end

    action SetIsSystem(boolean isSystem)
        me:isSystem = isSystem
    end

    action GetStaticKey returns text
        text key = me:GetName()
        if parameters not= undefined
            Iterator<Variable> params = parameters:GetIterator()
            repeat while params:HasNext()
                Variable variable = params:Next()
                Type varType = variable:GetType()
                key = key + ":" + varType:GetStaticKey()
            end
        end
        return key
    end

    action GetDisplayName returns text
        text key = me:GetName() + "("
        if parameters not= undefined
            Iterator<Variable> params = parameters:GetIterator()
            repeat while params:HasNext()
                Variable variable = params:Next()
                Type varType = variable:GetType()
                key = key + ", " + varType:GetDisplayName()
            end
        end
        
        key = key + ")"

       if not returnType:IsVoid()
            key = " returns " + returnType:GetDisplayName()
        end
        return key
    end

    action GetReturnType returns Type
        return returnType
    end

    action SetReturnType(Type type)
        returnType = type
    end

    action ConvertActionToBytecodeParameterSignature returns text
        text parameters = "("
        Iterator<Variable> it = GetParameterIterator()
        repeat while it:HasNext()
            Variable param = it:Next()
            Type type = param:GetType()
            parameters = parameters + type:ConvertTypeToBytecodeSignature()
        end
        parameters = parameters + ")"

        Type returnType = GetReturnType()
        text returnText = returnType:ConvertTypeToBytecodeSignature()

        return parameters + returnText
    end
end