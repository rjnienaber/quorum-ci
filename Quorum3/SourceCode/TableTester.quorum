package Libraries.Language.Compile.Test

use Libraries.Language.Compile.all
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Language.Compile.Parser
use Libraries.System.File
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Translate.JarGenerator
use Libraries.System.StackTraceItem

class TableTester 
    CompilerTestSuite suite = undefined
    text path = "Library/Tests/Table/"
    text passPath = path + "Pass/"
    text failPath = path + "Fail/"

    action Test
        path = passPath
        Add()
        AddRow()
        AddToEndOfRow()
        AddToFrontOfRow()
        AutoResize()
        Copy()
        Empty()
        Get()
        GetAutoResize()
        GetFromEndOfRow()
        GetFromFrontOfRow()
        GetMaxNumberOfColumns()
        GetMaxNumberOfRows()
        GetNumberOfRows()
        GetRow()
        GetRowIterator()
        GetSizeOfRow()
        Has()
        IsEmpty()
        Remove()
        RemoveAll()
        RemoveAt()
        RemoveFromEndOfRow()
        RemoveFromFrontOfRow()
        Set()
        SetAutoResize()
        SetMaxSize()
        SetSize()

//FAIL TESTS
        path = failPath
    end

    action GetName returns text
        return "Table Tests"
    end
    
    action GetCompilerTestSuite returns CompilerTestSuite
        return suite
    end

    action SetCompilerTestSuite(CompilerTestSuite suite)
        me:suite = suite
    end

    action Add 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Add.quorum")
        files:Add(main)
        results:Add(0, "4")
        results:Add(1, "3")
        results:Add(2, "2")
        results:Add(3, "1")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action AddRow 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "AddRow.quorum")
        files:Add(main)
        results:Add(0, "1")
        results:Add(1, "2")
        results:Add(2, "3")
        results:Add(3, "4")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action AddToEndOfRow 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "AddToEndOfRow.quorum")
        files:Add(main)
        results:Add(0, "1")
        results:Add(1, "2")
        results:Add(2, "3")
        results:Add(3, "4")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action AddToFrontOfRow 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "AddToFrontOfRow.quorum")
        files:Add(main)
        results:Add(0, "1")
        results:Add(1, "2")
        results:Add(2, "3")
        results:Add(3, "4")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action AutoResize 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "AutoResize.quorum")
        files:Add(main)
        results:Add(0, "11")
        results:Add(1, "12")
        results:Add(2, "21")
        results:Add(3, "22")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Copy 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Copy.quorum")
        files:Add(main)
        results:Add(0, "1")
        results:Add(1, "2")
        results:Add(2, "3")
        results:Add(3, "4")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Empty 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Empty.quorum")
        files:Add(main)
        results:Add(0, "true")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Get 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Get.quorum")
        files:Add(main)
        results:Add(0, "1")
        results:Add(1, "2")
        results:Add(2, "3")
        results:Add(3, "4")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GetAutoResize 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GetAutoResize.quorum")
        files:Add(main)
        results:Add(0, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GetFromEndOfRow 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GetFromEndOfRow.quorum")
        files:Add(main)
        results:Add(0, "4")
        results:Add(1, "4")
        results:Add(2, "4")
        results:Add(3, "4")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GetFromFrontOfRow 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GetFromFrontOfRow.quorum")
        files:Add(main)
        results:Add(0, "1")
        results:Add(1, "1")
        results:Add(2, "1")
        results:Add(3, "1")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GetMaxNumberOfColumns 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GetMaxNumberOfColumns.quorum")
        files:Add(main)
        results:Add(0, "10")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GetMaxNumberOfRows 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GetMaxNumberOfRows.quorum")
        files:Add(main)
        results:Add(0, "10")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GetNumberOfRows 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GetNumberOfRows.quorum")
        files:Add(main)
        results:Add(0, "1")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GetRow 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GetRow.quorum")
        files:Add(main)
        results:Add(0, "1")
        results:Add(1, "2")
        results:Add(2, "3")
        results:Add(3, "4")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GetRowIterator 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GetRowIterator.quorum")
        files:Add(main)
        results:Add(0, "1")
        results:Add(1, "2")
        results:Add(2, "3")
        results:Add(3, "4")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GetSizeOfRow 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GetSizeOfRow.quorum")
        files:Add(main)
        results:Add(0, "4")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Has 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Has.quorum")
        files:Add(main)
        results:Add(0, "true")
        results:Add(1, "false")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action IsEmpty 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "IsEmpty.quorum")
        files:Add(main)
        results:Add(0, "true")
        results:Add(1, "false")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Remove 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Remove.quorum")
        files:Add(main)
        results:Add(0, "true")
        results:Add(1, "1")
        results:Add(2, "4")
        results:Add(3, "2")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RemoveAll 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RemoveAll.quorum")
        files:Add(main)
        results:Add(0, "true")
        results:Add(1, "1")
        results:Add(2, "4")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RemoveAt 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RemoveAt.quorum")
        files:Add(main)
        results:Add(0, "1")
        results:Add(1, "2")
        results:Add(2, "3")
        results:Add(3, "4")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RemoveFromEndOfRow 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RemoveFromEndOfRow.quorum")
        files:Add(main)
        results:Add(0, "4")
        results:Add(1, "3")
        results:Add(2, "2")
        results:Add(3, "1")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RemoveFromFrontOfRow 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RemoveFromFrontOfRow.quorum")
        files:Add(main)
        results:Add(0, "1")
        results:Add(1, "2")
        results:Add(2, "3")
        results:Add(3, "4")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Set 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Set.quorum")
        files:Add(main)
        results:Add(0, "1")
        results:Add(1, "2")
        results:Add(2, "3")
        results:Add(3, "4")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action SetAutoResize 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "SetAutoResize.quorum")
        files:Add(main)
        results:Add(0, "false")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action SetMaxSize 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "SetMaxSize.quorum")
        files:Add(main)
        results:Add(0, "5")
        results:Add(1, "3")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action SetSize 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "SetSize.quorum")
        files:Add(main)
        results:Add(0, "3")
        results:Add(1, "5")
        results:Add(2, "5")
        results:Add(3, "5")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

//FAIL TESTS
    action AddOverMaxSize
        Array<File> files
        File main
        main:SetPath(path + "AddOverMaxSize.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action AddOverSetSize
        Array<File> files
        File main
        main:SetPath(path + "AddOverSetSize.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action GetFromEmpty
        Array<File> files
        File main
        main:SetPath(path + "GetFromEmpty.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action GetFromOutOfBounds
        Array<File> files
        File main
        main:SetPath(path + "GetFromOutOfBounds.quorum")
        files:Add(main)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

end

