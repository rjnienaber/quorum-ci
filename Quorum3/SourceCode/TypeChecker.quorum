package Libraries.Language.Compile.Symbol

use Libraries.Containers.HashTable
use Libraries.Language.Compile.CompilerErrorType
use Libraries.Language.Compile.Translate.all
use Libraries.Containers.Array
use Libraries.Containers.Blueprints.Iterator

class TypeChecker
    HashTable<text, TypeCheckResult> results
    Type constants
    JavaBytecodeOpcodes opcodes
    on create
        GenerateTypeCheckingTable()
    end

    action GenerateTypeCheckingTable
        TypeCheckResult result = undefined
        Type type = undefined
        Operation opConstant
        ////////////////////////////////////////////////////////////////////////
        //INTEGER INTEGER
        ////////////////////////////////////////////////////////////////////////
        Operation op = GetOperation(opConstant:PLUS)
        text key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
                constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToInteger()
        BinaryOpcode binary = GetBinaryOpcode(opcodes:GetIntegerAdd(), -1, -1, type)
        binary:SetOperation(op)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:MINUS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToInteger()
        binary = GetBinaryOpcode(opcodes:GetIntegerSubtract(), -1, -1, type)
        binary:SetOperation(op)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:TIMES)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToInteger()
        binary = GetBinaryOpcode(opcodes:GetIntegerMultiply(), -1, -1, type)
        binary:SetOperation(op)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:DIVIDE)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToInteger()
        binary = GetBinaryOpcode(opcodes:GetIntegerDivide(), -1, -1, type)
        binary:SetOperation(op)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:MODULUS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToInteger()
        binary = GetBinaryOpcode(opcodes:GetIntegerModulus(), -1, -1, type)
        binary:SetOperation(op)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:EQUALS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        ComparisonOpcode compare = GetBinaryComparisonOpcode(opcodes:GetIfIntegerNotEquals(), -1, -1, type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:NOT_EQUALS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfIntegerEquals(), -1, -1, type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:GREATER_EQUALS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfIntegerLessThan(), -1, -1, type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:GREATER)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfIntegerLessThanEquals(), -1, -1, type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:LESS_EQUALS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfIntegerGreaterThan(), -1, -1, type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:LESS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfIntegerGreaterThanEquals(), -1, -1, type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        ////////////////////////////////////////////////////////////////////////
        //NUMBER NUMBER
        ////////////////////////////////////////////////////////////////////////
        op = GetOperation(opConstant:PLUS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleAdd(), -1, -1, type)
        binary:SetOperation(op)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:MINUS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleSubtract(), -1, -1, type)
        binary:SetOperation(op)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:TIMES)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleMultiply(), -1, -1, type)
        binary:SetOperation(op)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:DIVIDE)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleDivide(), -1, -1, type)
        binary:SetOperation(op)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:MODULUS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleModulus(), -1, -1, type)
        binary:SetOperation(op)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:EQUALS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfNotEquals(), -1, opcodes:GetCompareDoubleLess(), type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:NOT_EQUALS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfEquals(), -1, opcodes:GetCompareDoubleLess(), type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:GREATER_EQUALS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfLessThan(), -1, opcodes:GetCompareDoubleLess(), type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:GREATER)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfLessThanEquals(), -1, opcodes:GetCompareDoubleLess(), type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:LESS_EQUALS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfGreaterThan(), -1, opcodes:GetCompareDoubleGreater(), type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:LESS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfGreaterThanEquals(), -1, opcodes:GetCompareDoubleGreater(), type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        ////////////////////////////////////////////////////////////////////////
        //Boolean Boolean
        ////////////////////////////////////////////////////////////////////////
        op = GetOperation(opConstant:AND)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY,
            constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)

        op = GetOperation(opConstant:OR)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY,
            constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)

        op = GetOperation(opConstant:EQUALS)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY,
            constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfIntegerNotEquals(), -1, -1, type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:NOT_EQUALS)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY,
            constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfIntegerEquals(), -1, -1, type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        ////////////////////////////////////////////////////////////////////////
        //TEXT TEXT
        ////////////////////////////////////////////////////////////////////////
        op = GetOperation(opConstant:PLUS)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
            constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToText()
        ConcatenateOpcode textConcat = GetConcatenateOpcode(false, false, constants:TEXT_PRIMITIVE_KEY, type)
        textConcat:SetOperation(op)
        result:SetQuorumOpcode(textConcat)
        results:Add(key, result)

        op = GetOperation(opConstant:EQUALS)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
            constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfNotEquals(), -1, -1, type)
        compare:SetOperation(op)
        compare:isTextEquality = true
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:NOT_EQUALS)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
            constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfEquals(), -1, -1, type)
        compare:SetOperation(op)
        compare:isTextEquality = true
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:EQUALS)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
            constants:UNDEFINED_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfNonNull(), -1, -1, type)
        compare:SetOperation(op)
        compare:isTextEquality = true
        compare:isRightUndefined = true
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:EQUALS)
        key = GenerateTypeCheckKey(constants:UNDEFINED_KEY,
            constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfNonNull(), -1, -1, type)
        compare:SetOperation(op)
        compare:isTextEquality = true
        compare:isLeftUndefined = true
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:NOT_EQUALS)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
            constants:UNDEFINED_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfNull(), -1, -1, type)
        compare:SetOperation(op)
        compare:isRightUndefined = true
        compare:isTextEquality = true
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:NOT_EQUALS)
        key = GenerateTypeCheckKey(constants:UNDEFINED_KEY,
            constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfNull(), -1, -1, type)
        compare:SetOperation(op)
        compare:isTextEquality = true
        compare:isLeftUndefined = true
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:GREATER_EQUALS)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
            constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfLessThan(), -1, -1, type)
        compare:SetOperation(op)
        compare:isTextCompare = true
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:GREATER)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
            constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfLessThanEquals(), -1, -1, type)
        compare:SetOperation(op)
        compare:isTextCompare = true
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:LESS_EQUALS)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
            constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfGreaterThan(), -1, -1, type)
        compare:SetOperation(op)
        compare:isTextCompare = true
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:LESS)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
            constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfGreaterThanEquals(), -1, -1, type)
        compare:SetOperation(op)
        compare:isTextCompare = true
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        ////////////////////////////////////////////////////////////////////////
        //Assignment Operations
        ////////////////////////////////////////////////////////////////////////
        //Assign Integer integer
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, undefined, true, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToInteger()
        AssignmentOpcode assignment = GetAssignmentOpcode(opcodes:GetIntegerStore(), type)
        result:SetQuorumOpcode(assignment)
        results:Add(key, result)

        //Assign Text Text
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
            constants:TEXT_PRIMITIVE_KEY, undefined, true, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToText()
        assignment = GetAssignmentOpcode(opcodes:GetObjectStore(), type)
        result:SetQuorumOpcode(assignment)
        results:Add(key, result)

        //Assign Number Number
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, undefined, true, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToNumber()
        assignment = GetAssignmentOpcode(opcodes:GetDoubleStore(), type)
        result:SetQuorumOpcode(assignment)
        results:Add(key, result)

        //Assign Number Integer
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, undefined, true, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        assignment = GetAssignmentOpcode(opcodes:GetDoubleStore(), opcodes:GetIntegerToDouble(), type)
        result:SetQuorumOpcode(assignment)
        results:Add(key, result)

        //Assign Boolean Boolean
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY,
            constants:BOOLEAN_PRIMITIVE_KEY, undefined, true, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        assignment = GetAssignmentOpcode(opcodes:GetIntegerStore(), type)
        result:SetQuorumOpcode(assignment)
        results:Add(key, result)

        ////////////////////////////////////////////////////////////////////////
        //Unary Operations
        ////////////////////////////////////////////////////////////////////////
        text null = undefined
        op = GetOperation(opConstant:NOT)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY,
            null, op, false, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        FlipBooleanOpcode flipper
        result:SetQuorumOpcode(flipper)
        results:Add(key, result)

        //unary negate integer
        op = GetOperation(opConstant:MINUS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            null, op, false, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToInteger()
        NegateUnaryOpcode negateInteger
        negateInteger:SetJavaOpcode(opcodes:GetNegateInteger())
        result:SetQuorumOpcode(negateInteger)
        results:Add(key, result)

        //unary negate number
        op = GetOperation(opConstant:MINUS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            null, op, false, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToNumber()
        NegateUnaryOpcode negateNumber
        negateNumber:SetJavaOpcode(opcodes:GetNegateDouble())
        result:SetQuorumOpcode(negateNumber)
        results:Add(key, result)

        ////////////////////////////////////////////////////////////////////////
        //Return types
        ////////////////////////////////////////////////////////////////////////
        //integer integer
        op = GetOperation(opConstant:RETURN)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToInteger()
        ReturnOpcode returnMe = GetReturnOpcode(opcodes:GetIntegerReturn(), -1, type)
        result:SetQuorumOpcode(returnMe)
        results:Add(key, result)

        //text text
        op = GetOperation(opConstant:RETURN)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
            constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToText()
        returnMe = GetReturnOpcode(opcodes:GetObjectReturn(), -1, type)
        result:SetQuorumOpcode(returnMe)
        results:Add(key, result)

        //text undefined
        op = GetOperation(opConstant:RETURN)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
            constants:UNDEFINED_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToText()
        returnMe = GetReturnOpcode(opcodes:GetObjectReturn(), -1, type)
        result:SetQuorumOpcode(returnMe)
        results:Add(key, result)

        //number number
        op = GetOperation(opConstant:RETURN)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToNumber()
        returnMe = GetReturnOpcode(opcodes:GetDoubleReturn(), -1, type)
        result:SetQuorumOpcode(returnMe)
        results:Add(key, result)

        //boolean boolean
        op = GetOperation(opConstant:RETURN)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY,
            constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        returnMe = GetReturnOpcode(opcodes:GetBooleanReturn(), -1, type)
        result:SetQuorumOpcode(returnMe)
        results:Add(key, result)

        //number integer
        op = GetOperation(opConstant:RETURN)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        returnMe = GetReturnOpcode(opcodes:GetIntegerToDouble(), opcodes:GetDoubleReturn(), type)
        result:SetQuorumOpcode(returnMe)
        TypeConversionPoints points = result:points
        points:SetPoints(points:LOSSLESS_CONVERT)
        results:Add(key, result)

        //integer text
//        op = GetOperation(opConstant:RETURN)
//        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
//            constants:INTEGER_PRIMITIVE_KEY, op, false)
//        result = GetWideningConvertResult()
//        type = result:result
//        type:SetToText()
//        returnMe = GetReturnOpcode(opcodes:GetIntegerToDouble(), opcodes:GetDoubleReturn(), type)
//        result:SetQuorumOpcode(returnMe)
//        points = result:points
//        points:SetPoints(points:LOSSLESS_CONVERT)
//        results:Add(key, result)

        //text number
//        op = GetOperation(opConstant:RETURN)
//        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
//            constants:NUMBER_PRIMITIVE_KEY, op, false)
//        result = GetWideningConvertResult()
//        type = result:result
//        type:SetToText()
//        points = result:points
//        points:SetPoints(points:LOSSLESS_CONVERT)
//        results:Add(key, result)

        //text boolean
//        op = GetOperation(opConstant:RETURN)
//        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
//            constants:BOOLEAN_PRIMITIVE_KEY, op, false)
//        result = GetWideningConvertResult()
//        type = result:result
//        type:SetToText()
//        points = result:points
//        points:SetPoints(points:LOSSLESS_CONVERT)
//        results:Add(key, result)

        ////////////////////////////////////////////////////////////////////////
        //INTEGER NUMBER
        ////////////////////////////////////////////////////////////////////////
        //+
        op = GetOperation(opConstant:PLUS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleAdd(), opcodes:GetIntegerToDouble(), -1, type)
        binary:SetOperation(op)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:PLUS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleAdd(), -1, opcodes:GetIntegerToDouble(), type)
        binary:SetOperation(op)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        //-
        op = GetOperation(opConstant:MINUS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleSubtract(), opcodes:GetIntegerToDouble(), -1, type)
        binary:SetOperation(op)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:MINUS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleSubtract(), -1, opcodes:GetIntegerToDouble(), type)
        binary:SetOperation(op)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        //+
        op = GetOperation(opConstant:TIMES)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleMultiply(), opcodes:GetIntegerToDouble(), -1, type)
        binary:SetOperation(op)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:TIMES)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleMultiply(), -1, opcodes:GetIntegerToDouble(), type)
        binary:SetOperation(op)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        // divide
        op = GetOperation(opConstant:DIVIDE)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleDivide(), opcodes:GetIntegerToDouble(), -1, type)
        binary:SetOperation(op)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:DIVIDE)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleDivide(), -1, opcodes:GetIntegerToDouble(), type)
        binary:SetOperation(op)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        //mod
        op = GetOperation(opConstant:MODULUS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleModulus(), opcodes:GetIntegerToDouble(), -1, type)
        binary:SetOperation(op)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:MODULUS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleModulus(), -1, opcodes:GetIntegerToDouble(), type)
        binary:SetOperation(op)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        // >=
        op = GetOperation(opConstant:GREATER_EQUALS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfLessThan(), opcodes:GetIntegerToDouble(), opcodes:GetCompareDoubleLess(), type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:GREATER_EQUALS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryTwoOpComparisonOpcode(opcodes:GetIfLessThan(), -1,-1, opcodes:GetIntegerToDouble(), opcodes:GetCompareDoubleLess(), type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        // >
        op = GetOperation(opConstant:GREATER)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfLessThanEquals(), opcodes:GetIntegerToDouble(), opcodes:GetCompareDoubleLess(), type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:GREATER)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryTwoOpComparisonOpcode(opcodes:GetIfLessThanEquals(), -1,-1, opcodes:GetIntegerToDouble(), opcodes:GetCompareDoubleLess(), type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        // =
        op = GetOperation(opConstant:EQUALS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfNotEquals(), opcodes:GetIntegerToDouble(), opcodes:GetCompareDoubleLess(), type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:EQUALS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryTwoOpComparisonOpcode(opcodes:GetIfNotEquals(), -1,-1, opcodes:GetIntegerToDouble(), opcodes:GetCompareDoubleLess(), type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

         // not=
        op = GetOperation(opConstant:NOT_EQUALS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfEquals(), opcodes:GetIntegerToDouble(), opcodes:GetCompareDoubleLess(), type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:NOT_EQUALS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryTwoOpComparisonOpcode(opcodes:GetIfEquals(), -1,-1, opcodes:GetIntegerToDouble(), opcodes:GetCompareDoubleLess(), type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        // <=
        op = GetOperation(opConstant:LESS_EQUALS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfGreaterThan(), opcodes:GetIntegerToDouble(), opcodes:GetCompareDoubleLess(), type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:LESS_EQUALS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryTwoOpComparisonOpcode(opcodes:GetIfGreaterThan(), -1,-1, opcodes:GetIntegerToDouble(), opcodes:GetCompareDoubleLess(), type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        // <
        op = GetOperation(opConstant:LESS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfGreaterThanEquals(), opcodes:GetIntegerToDouble(), opcodes:GetCompareDoubleLess(), type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:LESS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryTwoOpComparisonOpcode(opcodes:GetIfGreaterThanEquals(), -1,-1, opcodes:GetIntegerToDouble(), opcodes:GetCompareDoubleLess(), type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)
        
        ////////////////////////////////////////////////////////////////////////
        //Text Conversion
        ////////////////////////////////////////////////////////////////////////
        op = GetOperation(opConstant:PLUS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToText()
        ConcatenateOpcode concat = GetConcatenateOpcode(true, false, constants:INTEGER_PRIMITIVE_KEY, type)
        concat:SetOperation(op)
        result:SetQuorumOpcode(concat)
        results:Add(key, result)

        op = GetOperation(opConstant:PLUS)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToText()
        concat = GetConcatenateOpcode(false, true, constants:INTEGER_PRIMITIVE_KEY, type)
        concat:SetOperation(op)
        result:SetQuorumOpcode(concat)
        results:Add(key, result)

        op = GetOperation(opConstant:PLUS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToText()
        concat = GetConcatenateOpcode(true, false, constants:NUMBER_PRIMITIVE_KEY, type)
        concat:SetOperation(op)
        result:SetQuorumOpcode(concat)
        results:Add(key, result)

        op = GetOperation(opConstant:PLUS)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToText()
        concat = GetConcatenateOpcode(false, true, constants:NUMBER_PRIMITIVE_KEY, type)
        concat:SetOperation(op)
        result:SetQuorumOpcode(concat)
        results:Add(key, result)

        op = GetOperation(opConstant:PLUS)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToText()
        concat = GetConcatenateOpcode(true, false, constants:BOOLEAN_PRIMITIVE_KEY, type)
        concat:SetOperation(op)
        result:SetQuorumOpcode(concat)
        results:Add(key, result)

        op = GetOperation(opConstant:PLUS)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToText()
        concat = GetConcatenateOpcode(false, true, constants:BOOLEAN_PRIMITIVE_KEY, type)
        concat:SetOperation(op)
        result:SetQuorumOpcode(concat)
        results:Add(key, result)

        ////////////////////////////////////////////////////////////////////////
        //TYPE CASTING - EXPLICIT
        ////////////////////////////////////////////////////////////////////////
        CastOpcode caster = undefined
        ExplicitCastOpcode explicitCaster = undefined
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToText()
        results:Add(key, result)

        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToInteger()
        results:Add(key, result)

        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToNumber()
        results:Add(key, result)

        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)

        //text to integer and back again
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNarrowingConvertResult()
        type = result:result
        type:SetToInteger()
        TextToIntegerCast textToIntegerCast
        textToIntegerCast:SetType(type)
        result:SetQuorumOpcode(textToIntegerCast)
        results:Add(key, result)

        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToText()
        IntegerToTextCast integerToTextCast
        integerToTextCast:SetType(type)
        result:SetQuorumOpcode(integerToTextCast)
        results:Add(key, result)

        //text to number and back again
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNarrowingConvertResult()
        type = result:result
        type:SetToNumber()
        TextToNumberCast textToNumberCast
        textToNumberCast:SetType(type)
        result:SetQuorumOpcode(textToNumberCast)
        results:Add(key, result)

        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToText()
        NumberToTextCast numberToTextCast
        numberToTextCast:SetType(type)
        result:SetQuorumOpcode(numberToTextCast)
        results:Add(key, result)

        //number to integer and back again
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        IntegerToNumberCast integerToNumberCast
        integerToNumberCast:SetType(type)
        result:SetQuorumOpcode(integerToNumberCast)
        results:Add(key, result)

        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNarrowingConvertResult()
        type = result:result
        type:SetToInteger()
        NumberToIntegerCast numberToIntegerCast
        numberToIntegerCast:SetType(type)
        result:SetQuorumOpcode(numberToIntegerCast)
        results:Add(key, result)

        //number to boolean and back again
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNarrowingConvertResult()
        type = result:result
        type:SetToBoolean()
        NumberToBooleanCast numberToBooleanCast
        numberToBooleanCast:SetType(type)
        result:SetQuorumOpcode(numberToBooleanCast)
        results:Add(key, result)

        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        BooleanToNumberCast booleanToNumberCast
        booleanToNumberCast:SetType(type)
        result:SetQuorumOpcode(booleanToNumberCast)
        results:Add(key, result)

        //integer to boolean and back again
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNarrowingConvertResult()
        type = result:result
        type:SetToBoolean()
        IntegerToBooleanCast integerToBooleanCast
        integerToBooleanCast:SetType(type)
        result:SetQuorumOpcode(integerToBooleanCast)
        results:Add(key, result)

        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToInteger()
        BooleanToIntegerCast booleanToIntegerCast
        booleanToIntegerCast:SetType(type)
        result:SetQuorumOpcode(booleanToIntegerCast)
        results:Add(key, result)

        //text to boolean and back again
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNarrowingConvertResult()
        type = result:result
        type:SetToBoolean()
        TextToBooleanCast textToBooleanCast
        textToBooleanCast:SetType(type)
        result:SetQuorumOpcode(textToBooleanCast)
        results:Add(key, result)

        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToText()
        BooleanToTextCast booleanToTextCast
        booleanToTextCast:SetType(type)
        result:SetQuorumOpcode(booleanToTextCast)
        results:Add(key, result)

        ////////////////////////////////////////////////////////////////////////
        //TYPE CASTING - IMPLICIT
        ////////////////////////////////////////////////////////////////////////
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToText()
        results:Add(key, result)

        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToInteger()
        results:Add(key, result)

        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToNumber()
        results:Add(key, result)

        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        points = result:points
        points:SetPoints(points:LOSSLESS_CONVERT)
        type = result:result
        type:SetToText()
        result:SetQuorumOpcode(integerToTextCast)
        results:Add(key, result)

        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        points = result:points
        points:SetPoints(points:LOSSLESS_CONVERT)
        type = result:result
        type:SetToText()
        result:SetQuorumOpcode(numberToTextCast)
        results:Add(key, result)

        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        points = result:points
        points:SetPoints(points:LOSSLESS_CONVERT)
        //caster = GetImplicitCastOpcode(opcodes:GetIntegerToDouble())
        type = result:result
        type:SetToNumber()
        //result:SetQuorumOpcode(caster)
        result:SetQuorumOpcode(integerToNumberCast)
        results:Add(key, result)
        
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)

        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        points = result:points
        points:SetPoints(points:LOSSLESS_CONVERT)
        type = result:result
        type:SetToText()
        result:SetQuorumOpcode(booleanToTextCast)
        results:Add(key, result)

        AddAutoBoxedTypes()
    end

    action AddAutoBoxedTypes
        TypeCheckResult result = undefined
        Type type = undefined
        Operation opConstant
        TypeConversionPoints points = undefined

        //autoboxes from Object to various primitives
        //implicit cast from Integer to text
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToText()
        points = result:points
        points:SetPoints(points:PARENT_AUTOBOX)
        ObjectToPrimitiveTextCast objectToPrimitiveTextCast
        objectToPrimitiveTextCast:SetType(type)
        result:SetQuorumOpcode(objectToPrimitiveTextCast)
        results:Add(key, result)

        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToInteger()
        points = result:points
        points:SetPoints(points:PARENT_AUTOBOX)
        ObjectToPrimitiveIntegerCast objectToPrimitiveIntegerCast
        objectToPrimitiveIntegerCast:SetType(type)
        result:SetQuorumOpcode(objectToPrimitiveIntegerCast)
        results:Add(key, result)

        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToInteger()
        points = result:points
        points:SetPoints(points:PARENT_AUTOBOX)
        ObjectToPrimitiveBooleanCast objectToPrimitiveBooleanCast
        objectToPrimitiveBooleanCast:SetType(type)
        result:SetQuorumOpcode(objectToPrimitiveBooleanCast)
        results:Add(key, result)

        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToInteger()
        points = result:points
        points:SetPoints(points:PARENT_AUTOBOX)
        ObjectToPrimitiveNumberCast objectToPrimitiveNumberCast
        objectToPrimitiveNumberCast:SetType(type)
        result:SetQuorumOpcode(objectToPrimitiveNumberCast)
        results:Add(key, result)


        //autoboxes from primitives to object

        //implicit cast from integer to object
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:OBJECT_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetSubclassWideningConvertResult()
        type = result:result
        type:SetToObject(type:OBJECT_KEY)
        points = result:points
        points:SetPoints(points:PARENT_AUTOBOX)
        IntegerPrimitiveToObjectCast integerPrimitiveToObjectCast
        integerPrimitiveToObjectCast:SetType(type)
        result:SetQuorumOpcode(integerPrimitiveToObjectCast)
        results:Add(key, result)

        //explicit cast from Integer to boolean 1739
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:OBJECT_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToObject(type:OBJECT_KEY)
        points = result:points
        points:SetPoints(points:PARENT_AUTOBOX)
        NumberPrimitiveToObjectCast numberPrimitiveToObjectCast
        numberPrimitiveToObjectCast:SetType(type)
        result:SetQuorumOpcode(numberPrimitiveToObjectCast)
        results:Add(key, result)

        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:OBJECT_KEY, constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToObject(type:OBJECT_KEY)
        points = result:points
        points:SetPoints(points:PARENT_AUTOBOX)
        BooleanPrimitiveToObjectCast booleanPrimitiveToObjectCast
        booleanPrimitiveToObjectCast:SetType(type)
        result:SetQuorumOpcode(booleanPrimitiveToObjectCast)
        results:Add(key, result)

        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:OBJECT_KEY, constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToObject(type:OBJECT_KEY)
        points = result:points
        points:SetPoints(points:PARENT_AUTOBOX)
        TextPrimitiveToObjectCast textPrimitiveToObjectCast
        textPrimitiveToObjectCast:SetType(type)
        result:SetQuorumOpcode(textPrimitiveToObjectCast)
        results:Add(key, result)




        //Various integer autoboxes
        //implicit casts
        //implicit cast integer to Integer
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:INTEGER_OBJECT_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetSubclassWideningConvertResult()
        type = result:result
        type:SetToIntegerObject()
        points = result:points
        points:SetPoints(points:EXACT_AUTOBOX)
        IntegerPrimitiveToIntegerObjectCast integerPrimitiveToIntegerObjectCast
        integerPrimitiveToIntegerObjectCast:SetType(type)
        result:SetQuorumOpcode(integerPrimitiveToIntegerObjectCast)
        results:Add(key, result)

        //implicit cast from Integer to integer
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:INTEGER_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToInteger()
        IntegerObjectToIntegerPrimitiveCast integerObjectToIntegerPrimitiveCast
        integerObjectToIntegerPrimitiveCast:SetType(type)
        result:SetQuorumOpcode(integerObjectToIntegerPrimitiveCast)
        points = result:points
        points:SetPoints(points:EXACT_AUTOBOX)
        results:Add(key, result)

        //casts
        //explicit cast from Integer to integer
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:INTEGER_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToInteger()
        result:SetQuorumOpcode(integerObjectToIntegerPrimitiveCast)
        results:Add(key, result)

        //explicit cast from Integer to integer
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:INTEGER_OBJECT_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToIntegerObject()
        result:SetQuorumOpcode(integerPrimitiveToIntegerObjectCast)
        results:Add(key, result)

        //explicit cast from Integer to integer
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_OBJECT_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetSubclassWideningConvertResult()
        type = result:result
        type:SetToNumberObject()
        points = result:points
        points:SetPoints(points:PARENT_AUTOBOX)
        IntegerPrimitiveToNumberObjectCast integerPrimitiveToNumberObjectCast
        integerPrimitiveToNumberObjectCast:SetType(type)
        result:SetQuorumOpcode(integerPrimitiveToNumberObjectCast)
        results:Add(key, result)

        //explicit cast from Integer to integer
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_OBJECT_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetSubclassWideningConvertResult()
        type = result:result
        type:SetToNumberObject()
        points = result:points
        points:SetPoints(points:PARENT_AUTOBOX)
        result:SetQuorumOpcode(integerPrimitiveToNumberObjectCast)
        results:Add(key, result)



        //various number autoboxes
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_OBJECT_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetSubclassWideningConvertResult()
        type = result:result
        type:SetToNumberObject()
        points = result:points
        points:SetPoints(points:EXACT_AUTOBOX)
        NumberPrimitiveToNumberObjectCast numberPrimitiveToNumberObjectCast
        numberPrimitiveToNumberObjectCast:SetType(type)
        result:SetQuorumOpcode(numberPrimitiveToNumberObjectCast)
        results:Add(key, result)

        //implicit cast from Integer to integer
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:NUMBER_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToNumber()
        NumberObjectToNumberPrimitiveCast numberObjectToNumberPrimitiveCast
        numberObjectToNumberPrimitiveCast:SetType(type)
        result:SetQuorumOpcode(numberObjectToNumberPrimitiveCast)
        points = result:points
        points:SetPoints(points:EXACT_AUTOBOX)
        results:Add(key, result)

        //casts
        //explicit cast from Integer to integer
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:NUMBER_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToNumber()
        result:SetQuorumOpcode(numberObjectToNumberPrimitiveCast)
        results:Add(key, result)

        //explicit cast from Integer to integer
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_OBJECT_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToNumberObject()
        result:SetQuorumOpcode(numberPrimitiveToNumberObjectCast)
        results:Add(key, result)


        //various boolean autoboxes
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:BOOLEAN_OBJECT_KEY, constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetSubclassWideningConvertResult()
        type = result:result
        type:SetToBooleanObject()
        points = result:points
        points:SetPoints(points:EXACT_AUTOBOX)
        BooleanPrimitiveToBooleanObjectCast booleanPrimitiveToBooleanObjectCast
        booleanPrimitiveToBooleanObjectCast:SetType(type)
        result:SetQuorumOpcode(booleanPrimitiveToBooleanObjectCast)
        results:Add(key, result)

        //implicit cast from Integer to integer
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:BOOLEAN_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToBoolean()
        BooleanObjectToBooleanPrimitiveCast booleanObjectToBooleanPrimitiveCast
        booleanObjectToBooleanPrimitiveCast:SetType(type)
        result:SetQuorumOpcode(booleanObjectToBooleanPrimitiveCast)
        points = result:points
        points:SetPoints(points:EXACT_AUTOBOX)
        results:Add(key, result)

        //casts
        //explicit cast from Integer to integer
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:BOOLEAN_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToBoolean()
        result:SetQuorumOpcode(booleanObjectToBooleanPrimitiveCast)
        results:Add(key, result)

        //explicit cast from Integer to integer
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:BOOLEAN_OBJECT_KEY, constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToBooleanObject()
        result:SetQuorumOpcode(booleanPrimitiveToBooleanObjectCast)
        results:Add(key, result)


        //various text autoboxes
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:TEXT_OBJECT_KEY, constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetSubclassWideningConvertResult()
        type = result:result
        type:SetToTextObject()
        points = result:points
        points:SetPoints(points:EXACT_AUTOBOX)
        TextPrimitiveToTextObjectCast textPrimitiveToTextObjectCast
        textPrimitiveToTextObjectCast:SetType(type)
        result:SetQuorumOpcode(textPrimitiveToTextObjectCast)
        results:Add(key, result)

        //implicit cast from Integer to integer
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:TEXT_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToText()
        TextObjectToTextPrimitiveCast textObjectToTextPrimitiveCast
        textObjectToTextPrimitiveCast:SetType(type)
        result:SetQuorumOpcode(textObjectToTextPrimitiveCast)
        points = result:points
        points:SetPoints(points:EXACT_AUTOBOX)
        results:Add(key, result)

        //casts
        //explicit cast from Integer to integer
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:TEXT_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToText()
        result:SetQuorumOpcode(textObjectToTextPrimitiveCast)
        results:Add(key, result)

        //explicit cast from Integer to integer
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:TEXT_OBJECT_KEY, constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToTextObject()
        result:SetQuorumOpcode(textPrimitiveToTextObjectCast)
        results:Add(key, result)



        //implicit cast from Integer to text. Should we allow this implicitly?
//        op = GetOperation(opConstant:IMPLICIT_CAST)
//        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:INTEGER_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToText()
//        results:Add(key, result)

        //implicit cast from Integer to boolean
//        op = GetOperation(opConstant:IMPLICIT_CAST)
//        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:INTEGER_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToBoolean()
//        results:Add(key, result)

        //Assign Integer object to integer
//        op = GetOperation(opConstant:CAST)
//        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:INTEGER_OBJECT_KEY, undefined, false)
//        result = GetWideningConvertResult()
//        type = result:result
//        type:SetToInteger()
//        result:SetQuorumOpcode(integerObjectToIntegerPrimitiveCast)
//        results:Add(key, result)

        //Assign integer object to primitive number
//        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_OBJECT_KEY, undefined, false)
//        result = GetWideningConvertResult()
//        type = result:result
//        type:SetToNumber()
//        results:Add(key, result)

        

        //explicit cast from Integer to number
//        op = GetOperation(opConstant:CAST)
//        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToNumber()
//        results:Add(key, result)

        //explicit cast from Integer to text
//        op = GetOperation(opConstant:CAST)
//        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:INTEGER_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToText()
//        results:Add(key, result)

        //explicit cast from Integer to boolean
//        op = GetOperation(opConstant:CAST)
//        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:INTEGER_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToBoolean()
//        results:Add(key, result)

        

//        //explicit cast from Integer to boolean 1749
//        op = GetOperation(opConstant:IMPLICIT_CAST)
//        key = GenerateTypeCheckKey(constants:NUMBER_OBJECT_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToNumberObject()
//        points = result:points
//        points:SetPoints(points:EXACT_AUTOBOX)
//        results:Add(key, result)
//
//        //Implicit cast from number object to number: 1760
//        op = GetOperation(opConstant:IMPLICIT_CAST)
//        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:NUMBER_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToNumber()
//        points = result:points
//        points:SetPoints(points:EXACT_AUTOBOX)
//        results:Add(key, result)

        //Implicit cast from number object to number: 1778
//        op = GetOperation(opConstant:IMPLICIT_CAST)
//        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:NUMBER_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToText()
//        results:Add(key, result)

        //Implicit cast from number object to boolean: 1787
//        op = GetOperation(opConstant:IMPLICIT_CAST)
//        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:NUMBER_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToBoolean()
//        results:Add(key, result)

        //Assgin number object to number: 1797
//        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:NUMBER_OBJECT_KEY, undefined, false)
//        result = GetWideningConvertResult()
//        type = result:result
//        type:SetToNumber()
//        results:Add(key, result)
//
//        //Cast number object to integer: 1823
//        op = GetOperation(opConstant:CAST)
//        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_OBJECT_KEY, undefined, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToInteger()
//        results:Add(key, result)

        //Cast number object to text: 1832
//        op = GetOperation(opConstant:CAST)
//        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:NUMBER_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToText()
//        results:Add(key, result)

        //Cast number object to boolean: 1840
//        op = GetOperation(opConstant:CAST)
//        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:NUMBER_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToBoolean()
//        results:Add(key, result)

        //Cast text to object: 1850
//        op = GetOperation(opConstant:IMPLICIT_CAST)
//        key = GenerateTypeCheckKey(constants:OBJECT_KEY, constants:TEXT_PRIMITIVE_KEY, op, false)
//        result = GetSubclassWideningConvertResult()
//        type = result:result
//        type:SetToTextObject()
//        points = result:points
//        points:SetPoints(points:PARENT_AUTOBOX)
//        results:Add(key, result)

        //Cast text to text object: 1860
//        op = GetOperation(opConstant:AUTOBOX_CAST)
//        key = GenerateTypeCheckKey(constants:TEXT_OBJECT_KEY, constants:TEXT_PRIMITIVE_KEY, op, false)
//        result = GetSubclassWideningConvertResult()
//        type = result:result
//        type:SetToTextObject()
//        points = result:points
//        points:SetPoints(points:EXACT_AUTOBOX)
//        results:Add(key, result)
//
//        //Cast text object to text: 1870
//        op = GetOperation(opConstant:AUTOBOX_CAST)
//        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:TEXT_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToText()
//        points = result:points
//        points:SetPoints(points:EXACT_AUTOBOX)
//        results:Add(key, result)

        //Cast text object to integer: 1880
//        op = GetOperation(opConstant:IMPLICIT_CAST)
//        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:TEXT_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToInteger()
//        results:Add(key, result)

        //Cast text object to number: 1889
//        op = GetOperation(opConstant:IMPLICIT_CAST)
//        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:TEXT_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToNumber()
//        results:Add(key, result)

        //Cast text object to boolean: 1898
//        op = GetOperation(opConstant:IMPLICIT_CAST)
//        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:TEXT_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToBoolean()
//        results:Add(key, result)

        //assign: 1907
//        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:TEXT_OBJECT_KEY, undefined, false)
//        result = GetWideningConvertResult()
//        type = result:result
//        type:SetToText()
//        results:Add(key, result)
//
//        //assign: 1923
//        op = GetOperation(opConstant:CAST)
//        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:TEXT_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToText()
//        results:Add(key, result)

        //assign: 1932
//        op = GetOperation(opConstant:CAST)
//        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:TEXT_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToInteger()
//        results:Add(key, result)

        //assign: 1942
//        op = GetOperation(opConstant:CAST)
//        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:TEXT_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToNumber()
//        results:Add(key, result)

        //assign: 1951
//        op = GetOperation(opConstant:CAST)
//        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:TEXT_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToBoolean()
//        results:Add(key, result)

        //assign: 1960
//        op = GetOperation(opConstant:IMPLICIT_CAST)
//        key = GenerateTypeCheckKey(constants:OBJECT_KEY, constants:BOOLEAN_PRIMITIVE_KEY, op, false)
//        result = GetSubclassWideningConvertResult()
//        type = result:result
//        type:SetToBooleanObject()
//        points = result:points
//        points:SetPoints(points:PARENT_AUTOBOX)
//        results:Add(key, result)

        //assign: 1970
//        op = GetOperation(opConstant:IMPLICIT_CAST)
//        key = GenerateTypeCheckKey(constants:BOOLEAN_OBJECT_KEY, constants:BOOLEAN_PRIMITIVE_KEY, op, false)
//        result = GetSubclassWideningConvertResult()
//        type = result:result
//        type:SetToBooleanObject()
//        points = result:points
//        points:SetPoints(points:EXACT_AUTOBOX)
//        results:Add(key, result)
//
//        //assign: 1980
//        op = GetOperation(opConstant:IMPLICIT_CAST)
//        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:BOOLEAN_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToBoolean()
//        points = result:points
//        points:SetPoints(points:EXACT_AUTOBOX)
//        results:Add(key, result)

        //assign: 1990
//        op = GetOperation(opConstant:IMPLICIT_CAST)
//        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:BOOLEAN_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToInteger()
//        results:Add(key, result)

        //assign: 1999
//        op = GetOperation(opConstant:IMPLICIT_CAST)
//        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:BOOLEAN_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToNumber()
//        results:Add(key, result)

        //assign: 2008
//        op = GetOperation(opConstant:IMPLICIT_CAST)
//        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:BOOLEAN_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToText()
//        results:Add(key, result)

        //assign: 2016
//        op = undefined
//        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:BOOLEAN_OBJECT_KEY, op, false)
//        result = GetWideningConvertResult()
//        type = result:result
//        type:SetToBoolean()
//        results:Add(key, result)
//
//        //assign: 2033
//        op = GetOperation(opConstant:CAST)
//        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:BOOLEAN_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToBoolean()
//        results:Add(key, result)

        //assign: 2042
//        op = GetOperation(opConstant:CAST)
//        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:BOOLEAN_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToInteger()
//        results:Add(key, result)

        //assign: 2051
//        op = GetOperation(opConstant:CAST)
//        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:BOOLEAN_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToNumber()
//        results:Add(key, result)

        //assign: 2060
//        op = GetOperation(opConstant:CAST)
//        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:BOOLEAN_OBJECT_KEY, op, false)
//        result = GetSubclassNarrowingConvertResult()
//        type = result:result
//        type:SetToText()
//        results:Add(key, result)
    end

    private action GetAssignmentOpcode(integer opcode, Type type) returns AssignmentOpcode
        return GetAssignmentOpcode(opcode, -1, type)
    end

    private action GetAssignmentOpcode(integer opcode, integer secondOpcode, Type type) returns AssignmentOpcode
        AssignmentOpcode op
        op:SetJavaOpcode(opcode)
        op:SetJavaOpcode2(secondOpcode)
        op:SetType(type)
        return op
    end

    private action GetImplicitCastOpcode(integer opcode) returns CastOpcode
        CastOpcode op
        op:SetJavaOpcode(opcode)
        return op
    end

    private action GetExplicitCastOpcode(Type type) returns ExplicitCastOpcode
        ExplicitCastOpcode op
        op:SetType(type)
        return op
    end

    private action GetAutoBoxReverseOpcode returns AutoBoxReverseOpcode
        AutoBoxReverseOpcode op
        return op
    end

    private action GetReturnOpcode(integer opcode, integer secondOpcode, Type type) returns ReturnOpcode
        ReturnOpcode returnMe
        returnMe:SetJavaOpcode(opcode)
        returnMe:SetJavaOpcode2(secondOpcode)
        returnMe:SetType(type)
        return returnMe
    end

    private action GetBinaryComparisonOpcode(integer opcode, integer leftOpcode,
        integer rightOpcode, Type type) returns ComparisonOpcode
        ComparisonOpcode op
        op:SetJavaOpcode(opcode)
        op:SetJavaLeftOpcode(leftOpcode)
        op:SetJavaRightOpcode(rightOpcode)
        op:SetType(type)
        return op
    end

    private action GetBinaryTwoOpComparisonOpcode(integer opcode, integer leftOpcode1,
        integer leftOpcode2, integer rightOpcode1, integer rightOpcode2, Type type) returns ComparisonOpcode
        ComparisonOpcode op
        op:SetJavaOpcode(opcode)
        op:SetJavaLeftOpcode(leftOpcode1)
        op:SetJavaLeftOpcode2(leftOpcode2)
        op:SetJavaRightOpcode(rightOpcode1)
        op:SetJavaRightOpcode2(rightOpcode2)
        op:SetType(type)
        return op
    end

    private action GetBinaryOpcode(integer opcode, integer leftOpcode, 
        integer rightOpcode, Type type) returns BinaryOpcode
        BinaryOpcode op
        op:SetJavaOpcode(opcode)
        op:SetJavaLeftOpcode(leftOpcode)
        op:SetJavaRightOpcode(rightOpcode)
        op:SetType(type)
        return op
    end

    private action GetConcatenateOpcode(boolean left, boolean right, 
        text convertText, Type type) returns ConcatenateOpcode
        ConcatenateOpcode op
        op:convertLeftToText = left
        op:convertRightToText = right
        op:SetConvertStringForConcatenation(convertText)
        op:SetType(type)
        return op
    end

    private action GetSwapOpcodes(text top, text second) returns Array<integer>
        Array<integer> array
        text num = constants:NUMBER_PRIMITIVE_KEY
        if top not= num and second not= num
            array:Add(opcodes:GetSwap())
        elseif top = num and second = num
            array:Add(opcodes:GetDuplicateDoubleUp2())
            array:Add(opcodes:GetPopDouble())
        elseif top = num
            array:Add(opcodes:GetDuplicateDoubleUp1())
            array:Add(opcodes:GetPopDouble())
        else
            array:Add(opcodes:GetDuplicateUp2())
            array:Add(opcodes:GetPop())
        end
        return array
    end

    action GetOperation(integer value) returns Operation
        Operation op
        op:SetOperation(value)
        return op
    end

    action GetNoConvertResult returns TypeCheckResult
        TypeCheckResult result
        TypeConversionConstants c = result:conversion
        c:SetConversion(c:NONE)
        result:errorMessage = ""
        return result
    end

    action GetWideningConvertResult returns TypeCheckResult
        TypeCheckResult result
        TypeConversionConstants c = result:conversion
        c:SetConversion(c:WIDENING)
        result:errorMessage = ""
        return result
    end

    action GetSubclassWideningConvertResult returns TypeCheckResult
        TypeCheckResult result
        TypeConversionConstants c = result:conversion
        c:SetConversion(c:SUBCLASS_WIDENING)
        result:errorMessage = ""
        return result
    end

    action GetSubclassNarrowingConvertResult returns TypeCheckResult
        TypeCheckResult result
        TypeConversionConstants c = result:conversion
        c:SetConversion(c:SUBCLASS_NARROWING)
        result:errorMessage = ""
        return result
    end

    action GetNarrowingConvertResult returns TypeCheckResult
        TypeCheckResult result
        TypeConversionConstants c = result:conversion
        c:SetConversion(c:NARROWING)
        result:errorMessage = ""
        return result
    end
    
    /*
        This action adds a class to the type checker, setting up operations
        for assignment or other aspects. This action also prepares
        any parent relationships in the type checker as well.

    */
    action Add(Class clazz)
        TypeCheckResult result = undefined
        Type type = undefined
        Operation opConstant
        text staticKey = clazz:GetStaticKey()
        text null = undefined

        //line 1376
        Operation op = undefined
        text key = GenerateTypeCheckKey(staticKey,
                null, op, true)
        result = GetNoConvertResult()
        type = result:result
        type:SetToObject(staticKey)
        CreateObjectOpcode cop
        cop:SetClass(clazz)
        result:SetQuorumOpcode(cop)
        results:Add(key, result)

        //line 1395
        op = undefined
        key = GenerateTypeCheckKey(staticKey,
                staticKey, op, true, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToObject(staticKey)
        AssignmentOpcode assignment = GetAssignmentOpcode(opcodes:GetObjectStore(), type)
        result:SetQuorumOpcode(assignment)
        results:Add(key, result)

        //line 1410
        op = GetOperation(opConstant:RETURN)
        key = GenerateTypeCheckKey(staticKey,
                staticKey, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToObject(staticKey)
        returnMe = GetReturnOpcode(opcodes:GetObjectReturn(), -1, type)
        result:SetQuorumOpcode(returnMe)
        results:Add(key, result)

        //line 1416
        op = GetOperation(opConstant:RETURN)
        key = GenerateTypeCheckKey(staticKey,
                constants:UNDEFINED_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToObject(staticKey)
        returnMe = GetReturnOpcode(opcodes:GetObjectReturn(), -1, type)
        result:SetQuorumOpcode(returnMe)
        results:Add(key, result)

        //line 1424
        op = undefined
        key = GenerateTypeCheckKey(staticKey,
                constants:UNDEFINED_KEY, op, true, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToObject(staticKey)
        assignment = GetAssignmentOpcode(opcodes:GetObjectStore(), type)
        result:SetQuorumOpcode(assignment)
        results:Add(key, result)

        //line 1439
        op = GetOperation(opConstant:EQUALS)
        key = GenerateTypeCheckKey(staticKey,
            staticKey, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        ComparisonOpcode compare = GetBinaryComparisonOpcode(opcodes:GetIfObjectNotEquals(), -1, -1, type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        //line 1447
        op = GetOperation(opConstant:NOT_EQUALS)
        key = GenerateTypeCheckKey(staticKey,
            staticKey, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfObjectEquals(), -1, -1, type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        //line 1455
        op = GetOperation(opConstant:IS)
        key = GenerateTypeCheckKey(staticKey,
            staticKey, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        IsOpcode isOpcode
        isOpcode:SetType(type)
        result:SetQuorumOpcode(isOpcode)
        results:Add(key, result)

        //line 1464
        op = GetOperation(opConstant:EQUALS)
        key = GenerateTypeCheckKey(staticKey,
            constants:UNDEFINED_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfObjectNotEquals(), -1, -1, type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        //1472
        op = GetOperation(opConstant:EQUALS)
        key = GenerateTypeCheckKey(constants:UNDEFINED_KEY,
            staticKey, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfObjectNotEquals(), -1, -1, type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        //line 1481
        op = GetOperation(opConstant:NOT_EQUALS)
        key = GenerateTypeCheckKey(staticKey,
            constants:UNDEFINED_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfObjectEquals(), -1, -1, type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        //line 1489
        op = GetOperation(opConstant:NOT_EQUALS)
        key = GenerateTypeCheckKey(constants:UNDEFINED_KEY,
            staticKey, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfObjectEquals(), -1, -1, type)
        compare:SetOperation(op)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        //line 1496
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(staticKey, constants:UNDEFINED_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToObject(staticKey)
        results:Add(key, result)

        //line 1505
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(staticKey, staticKey, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToObject(staticKey)
        results:Add(key, result)

        //line 1513
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(staticKey, staticKey, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToObject(staticKey)
        results:Add(key, result)

        Iterator<Class> parents = clazz:GetParentClasses()
        repeat while parents:HasNext()
            Class p = parents:Next()
            text parentKey = p:GetStaticKey()

            //line 1534
            op = undefined
            key = GenerateTypeCheckKey(staticKey,
                    staticKey, op, true, false)
            result = GetNoConvertResult()
            type = result:result
            type:SetToObject(parentKey)
            assignment = GetAssignmentOpcode(opcodes:GetObjectStore(), type)
            result:SetQuorumOpcode(assignment)
            results:Add(key, result)

            //line 1550
            op = GetOperation(opConstant:IMPLICIT_CAST)
            key = GenerateTypeCheckKey(parentKey, staticKey, op, false)
            result = GetNoConvertResult()
            type = result:result
            type:SetToObject(parentKey)
            results:Add(key, result)

            //line 1559
            op = GetOperation(opConstant:IS)
            key = GenerateTypeCheckKey(staticKey,
                parentKey, op, false)
            result = GetNoConvertResult()
            type = result:result
            type:SetToBoolean()
            IsOpcode isOpcode2
            isOpcode2:SetType(type)
            result:SetQuorumOpcode(isOpcode2)
            results:Add(key, result)

            //line 1567
            op = GetOperation(opConstant:IS)
            key = GenerateTypeCheckKey(parentKey,
                staticKey, op, false)
            result = GetNoConvertResult()
            type = result:result
            type:SetToBoolean()
            IsOpcode isOpcode3
            isOpcode3:SetType(type)
            result:SetQuorumOpcode(isOpcode3)
            results:Add(key, result)

            //line 1584
            op = GetOperation(opConstant:CAST)
            key = GenerateTypeCheckKey(parentKey, staticKey, op, false)
            result = GetSubclassNarrowingConvertResult()
            type = result:result
            ExplicitCastOpcode caster = GetExplicitCastOpcode(type)
            result:SetQuorumOpcode(caster)
            type:SetToObject(parentKey)
            results:Add(key, result)

            //line 1584. This is allowed, but nothing needs to be done at compile time
            op = GetOperation(opConstant:CAST)
            key = GenerateTypeCheckKey(staticKey, parentKey, op, false)
            result = GetSubclassWideningConvertResult()
            type = result:result
            caster = GetExplicitCastOpcode(type)
            result:SetQuorumOpcode(caster)
            type:SetToObject(staticKey)
            results:Add(key, result)

            //line 1593
            op = GetOperation(opConstant:RETURN)
            key = GenerateTypeCheckKey(parentKey,
                    staticKey, op, false)
            result = GetNoConvertResult()
            type = result:result
            type:SetToObject(staticKey)
            returnMe = GetReturnOpcode(opcodes:GetObjectReturn(), -1, type)
            result:SetQuorumOpcode(returnMe)
            TypeConversionPoints points = result:points
            points:SetPoints(points:LOSSLESS_CONVERT)
            results:Add(key, result)
        end
    end

    action GenerateTypeCheckKey(text left, text right,
            Operation op, boolean assignment) returns text
        return GenerateTypeCheckKey(left, right, op, assignment, false)
    end

    action GenerateTypeCheckKey(text left, text right,
            Operation op, boolean assignment, boolean local) returns text

        if right = undefined
            right = "|nullType|"
        end
        text a = "f"
        if assignment 
            a = "t"
        end

        if op not= undefined 
            return left  + "$" + right + "$" + op:GetText() + "$" + a + "$" + local
        else
            return left  + "$" + right + "$" + a + "$" + local
        end
    end
    
    action Check(Type left, Type right, Operation op) returns TypeCheckResult
        return Check(left, right, op, false, false)
    end

    action Check(Type left, Type right, Operation op, boolean assignment) returns TypeCheckResult
        return Check(left, right, op, assignment, false)
    end

    action Check(Type left, Type right, Operation op, boolean assignment, boolean local) returns TypeCheckResult
        text leftKey = ""
        text rightKey = ""

        if left not= undefined
            leftKey = left:GetStaticKey()
        end

        if right not= undefined
            rightKey = right:GetStaticKey()
        end

        text key = GenerateTypeCheckKey(leftKey, rightKey, op, assignment, local)
        TypeCheckResult result = results:GetValue(key)

        if result = undefined
            TypeCheckResult newResult
            CompilerErrorType error
            result = newResult

            TypeConversionConstants convert = result:conversion
            convert:SetConversion(convert:INCOMPATIBLE)
            text quote = leftKey:GetDoubleQuote()
            if assignment
                //leftKey = "" //account for generics later
                //rightKey = "" //account for generics later

                result:errorMessage = "Cannot assign a value of type " + quote + 
                    rightKey + quote + "" + " to a variable of type " + quote + leftKey + quote + "."
                error:SetCurrentType(error:INVALID_OPERATOR)
                result:errorType = error
            else 
                result:errorMessage = "The operation " + quote + leftKey + quote + " " + op:GetText()
                    + " " + quote + rightKey + quote + ", is not allowed."
                error:SetCurrentType(error:INCOMPATIBLE_TYPES)
                result:errorType = error
            end
        end
        
        return result
    end

    action Check(Type left, Operation op) returns TypeCheckResult
        text leftKey = ""
        if left not= undefined
            leftKey = left:GetStaticKey()
        end

        text value = undefined
        text key = GenerateTypeCheckKey(leftKey, value, op, false)
        TypeCheckResult result = results:GetValue(key)

        text quote = key:GetDoubleQuote()
        if result = undefined
            TypeCheckResult newResult
            CompilerErrorType error
            result = newResult
            TypeConversionConstants convert = result:conversion
            convert:SetConversion(convert:INCOMPATIBLE)
                result:errorMessage = "The unary operation " + quote + op:GetText() + 
                    quote + " " + leftKey + " is not allowed."

                error:SetCurrentType(error:INVALID_OPERATOR)
                result:errorType = error
        end
        return result
    end

    action CanInfer(QuorumOpcode opcode) returns InferenceResult
        InferenceResult result

        if opcode = undefined //can't infer a non-existent type
            result:canInfer = false
            return result
        end

        Type inferedType = opcode:GetType()

        if inferedType = undefined //can't infer a non-existent type
            result:canInfer = false
            return result
        end

        //by default, do not allow objects to be infered
        //TODO: Run empirical study to determine how flexible this system
        //is. AKA: Does the amount of inference impact human comprehension?
        //Debugging times? Productivity in general?
        if not inferedType:IsPrimitive()
            result:canInfer = false
            return result
        end

        boolean res = RecursiveCanInfer(opcode)
        result:canInfer = res
        
        return result
    end

    private action RecursiveCanInfer(QuorumOpcode opcode) returns boolean
        if opcode is QuorumConstant
            return true
        elseif opcode is ChainedActionCallOpcode
            return true
        elseif opcode is UnaryOpcode
            UnaryOpcode unary = cast(UnaryOpcode, opcode)
            return RecursiveCanInfer(unary:GetOpcode())
        elseif opcode is BinaryOpcode
            BinaryOpcode binary = cast(BinaryOpcode, opcode)
            QuorumOpcode left = binary:GetLeftOpcode()
            QuorumOpcode right = binary:GetRightOpcode()

            rLeft = RecursiveCanInfer(left)
            rRight = RecursiveCanInfer(right)
            
            Type leftType = left:GetType()
            Type rightType = right:GetType()
            if leftType:GetStaticKey() not= rightType:GetStaticKey()
                return false
            end

            return (rLeft and rRight)
        elseif opcode is BinaryAndOrOpcode
            return true
        else
            return false
        end

        return false
    end
end