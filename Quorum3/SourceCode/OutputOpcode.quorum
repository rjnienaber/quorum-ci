package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type
use Libraries.Containers.List
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Symbol.Action
use Libraries.Language.Compile.Translate.JavaBytecodeOpcodes

class OutputOpcode is QuorumOpcode
    QuorumOpcode opcode = undefined
    JavaBytecodeOpcodes opcodes
    QuorumBytecodeConverter converter
    
    action SetBytecodeWriteOffsetToAllChildren(integer offset)
        SetBytecodeWriteOffset(offset)
        if opcode not= undefined
            opcode:SetBytecodeWriteOffsetToAllChildren(offset)
        end
    end

    action SetMethodWriterToAllChildren(JavaBytecodeMethodWriter writer)
        SetMethodWriter(writer)
        if opcode not= undefined
            opcode:SetMethodWriterToAllChildren(writer)
        end
    end

    action GetOpcode returns QuorumOpcode
        return opcode
    end

    action SetOpcode(QuorumOpcode op)
        opcode = op
    end

    action Write
        VisitLineNumber()
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        methodWriter:VisitField(opcodes:GetStaticField(), "java/lang/System", "out", "Ljava/io/PrintStream;")
        Type type = opcode:GetType()
        opcode:Write()
        methodWriter:VisitMethodInvoke(opcodes:GetInvokeVirtual(), "java/io/PrintStream", "println",
                "(" + converter:ConvertTypeToBytecodeSignature(type) + ")V", false)
    end

    action WriteJavaScript returns text
        constant text OUTPUT_VARIABLE = "OuTpUt_$tRiNg_"
        EOL = ""
        quote = EOL:GetDoubleQuote()
        EOL = EOL:GetCarriageReturn() + EOL:GetLineFeed()
        opcodeResult = opcode:WriteJavaScript()
        JSOutput = OUTPUT_VARIABLE + " += " + opcodeResult + " + " + quote + "<br />" + quote + ";" + EOL
        return JSOutput
    end

    action GetTemplateCopy returns QuorumOpcode
        OutputOpcode op
        return op
    end
end