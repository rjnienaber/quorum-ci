package Libraries.Language.Compile

use Libraries.Language.Compile.Parser
use Libraries.System.File
use Libraries.System.DateTime
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Translate.JarGenerator
use Libraries.Web.WebResponder
use Libraries.Web.WebResponse
use Libraries.Web.WebRequest
use Libraries.Containers.Array
use Libraries.System.Console
use Libraries.Compute.Math
use Libraries.Containers.HashTable
use Libraries.Language.Errors.OutOfBoundsError
use Libraries.Language.Compile.Test.CompilerTestSuite

class Main is WebResponder
    public constant text NAME_FLAG = "-name"
    public constant text COMPILE_FLAG = "-compile"
    public constant text WEB_FLAG = "-web"
    public constant text JAVASCRIPT_FLAG = "-javascript"
    public constant text TEST_FLAG = "-test"
    public constant text HELP_FLAG = "-help"
    HashTable<text, Array<text>> flagValues

    action Main
        //ProcessConsoleFlags()
        //ProfileTest()
        //ProfileWeb()
        CompileHardcodedFile()
        //CompileCompiler()
        //CompileSingleTest()
    end

    private action CompileSingleTest
        Compiler compiler
        output compiler:GetVersion()

        File fake
        fake:SetPath("FakeFile.quorum")
        compiler:ParseSingle("output 5", fake)

        if compiler:IsCompilationErrorFree()
            output "Build Successful"
            if compiler:GetOutputType() = compiler:JAVASCRIPT
                output compiler:GetCompiledJavaScript()
            end
        else
            output compiler:GetCompilerErrorsAsText()
        end
    end

    private action StartTime
        DateTime time
        startTime = time:GetEpochTime()
    end

    private action CompileCompiler

        Compiler compiler
        output compiler:GetVersion() + ", Compile the compiler."
        File main
        main:SetPath("SourceCode")
        standardLibraryFolder = compiler:GetStandardLibraryFolder()
        compiler:SetStandardLibraryFolder(standardLibraryFolder)
        Array<File> files = main:GetDirectoryListing()

        File actualMain
        actualMain:SetPath("SourceCode/main.quorum")
        compiler:SetMain(actualMain)
        compiler:Compile(files)
        if compiler:IsCompilationErrorFree()
            output "Build Successful"
            if compiler:GetOutputType() = compiler:JAVASCRIPT
                output compiler:GetCompiledJavaScript()
            end
        else
            output compiler:GetCompilerErrorsAsText()
        end
    end

    private action CompileHardcodedFile
        Compiler compiler
        standardLibraryFolder = compiler:GetStandardLibraryFolder()
        compiler:SetStandardLibraryFolder(standardLibraryFolder)
        output compiler:GetVersion()
        File root
        root:SetPath("Output")
        compiler:SetOutputFolder(root)
        File main
        main:SetPath("Library/Tests/Actions/Pass/NoMissingReturnTest.quorum")

        File class2
        class2:SetPath("Library/Tests/Exceptions/Pass/A_2.quorum")

        File class3
        class3:SetPath("Library/Tests/Exceptions/Pass/B_2.quorum")

        File class4
        class4:SetPath("Library/Tests/Inheritance/Pass/Truck.quorum")

        File class5
        class5:SetPath("Library/Tests/Inheritance/Pass/GrandChildWithMultiple.quorum")
        Array<File> files

        files:Add(main)
        //files:Add(class2)
        //files:Add(class3)
        //files:Add(class4)
        //files:Add(class5)

        compiler:SetOutputSpeech(false) //don't speak while in test mode
        //compiler:SetOutputType(compiler:JAVASCRIPT)
        compiler:SetMain(main)
        //compiler:CompileSingle("a = b")
        compiler:Compile(files)

        if compiler:IsCompilationErrorFree()
            output "Build Successful"
            if compiler:GetOutputType() = compiler:JAVASCRIPT
                output compiler:GetCompiledJavaScript()
            end
        else
            output compiler:GetCompilerErrorsAsText()
        end
    end

    private action ProcessConsoleFlags
        Console console
        Array<text> flags = console:GetConsoleArguments()

        if flags:IsEmpty()
            output GetHelpText()
            return now
        end

        Array<text> values = undefined
        i = 0
        repeat while i < flags:GetSize()
            text flag = flags:Get(i)
            if flag:GetCharacter(0) = "-" //it's a flag, process commands until next flag.
                Array<text> v
                values = v
                //put this new array in the hash. It's empty, but we can still
                //add to it.

                //duplicate?
                if flagValues:HasKey(flag)
                    output "The flag " + flag + " has two or more values, which I do not understand. Each flag can be used only once."
                    return now
                end
                flagValues:Add(flag, values)
            else 

                //is this the first one? If it is, they may be trying to compile
                if i = 0
                    Array<text> newValues
                    flagValues:Add(COMPILE_FLAG, newValues)
                    values = newValues
                end
                values:Add(flag)
            end
            i = i + 1
        end
        DoFlagActions()
        //DisplayFlagValues()
    end

    /*
        Flags are processed by Quorum in a particular order and within certain
        constraints. The -help flag overrides everything, so it is requested, 
        other flags are ignored. If -compile is requested, then -web cannot be. 
        The converse is also true. If the -test flag is issued, there can be no other flags. 
        The name flag can be used in combination with either -web or -compile, 
        but not both.
    */
    private action DoFlagActions
        //first check if the help flag is in there
        if flagValues:HasKey(HELP_FLAG)
            output GetHelpText()
            return now
        end
        

        if flagValues:HasKey(TEST_FLAG)
            if flagValues:GetSize() = 1
                RunTestSuite()
                return now
            else
                output "I noticed a -test flag was issued, but this flag can only be requested on its own, not with other flags."
                return now
            end
        end

        text name = "Default"
        if flagValues:HasKey(NAME_FLAG)
            Array<text> names = flagValues:GetValue(NAME_FLAG)
            if names:GetSize() not= 1
                output "I noticed the name flag was used, but it does not have exactly 1 value."
                return now
            end
        end

        if flagValues:HasKey(COMPILE_FLAG)
            if flagValues:HasKey(WEB_FLAG)
                output "I noticed the compile flag and the web flag were both used. Only one can be passed, otherwise I cannot determine how to package the program."
                return now
            end

            Array<text> names = flagValues:GetValue(COMPILE_FLAG)

            if names:IsEmpty()
                output "I noticed you asked for a program to be compiled, but that no files were passed."
            end

            Compile(name, names, false)
            return now
        end

        if flagValues:HasKey(WEB_FLAG)
            if flagValues:HasKey(COMPILE_FLAG)
                output "I noticed the compile flag and the web flag were both used. Only one can be passed, otherwise I cannot determine how to package the program."
                return now
            end

            Array<text> names = flagValues:GetValue(WEB_FLAG)

            if names:IsEmpty()
                output "I noticed you asked for a program to be compiled, but that no files were passed."
            end

            Compile(name, names, true)
            return now
        end
    end

    private action Compile(text name, Array<text> fileNames, boolean isWebApplication)
        Array<File> files
        i = 0
        repeat fileNames:GetSize() times
            text fileName = fileNames:Get(i)
            File file
            file:SetPath(fileName)
            files:Add(file)
            i = i + 1
        end

        Compiler compiler
        output compiler:GetVersion()

        File main = files:Get(0)
        compiler:SetMain(main)
        compiler:SetIsWebApplication(isWebApplication)
        compiler:Compile(files)

        if compiler:IsCompilationErrorFree()
            output "Build Successful"
            if compiler:GetOutputType() = compiler:JAVASCRIPT
                output compiler:GetCompiledJavaScript()
            end
        else
            output compiler:GetCompilerErrorsAsText()
        end
    end

    private action RunTestSuite
        CompilerTestSuite suite
        suite:Main()
    end

    private action DisplayFlagValues
        Iterator<text> keys = flagValues:GetKeyIterator()
        repeat while keys:HasNext()
            text key = keys:Next()
            Array<text> values = flagValues:GetValue(key)
            text result = key
            i = 0
            repeat values:GetSize() times
                if i = 0
                    result = result + ": " + values:Get(i)
                else
                    result = result + ", " + values:Get(i)
                end
                i = i + 1
            end

            output result
        end
    end

    private action GetHelpText returns text
        Compiler compiler
        text help = 
"Quorum " + compiler:GetVersion() + "

Quorum is a computer programming language, which you can use either " +
"from the console using flags (the program you just ran) or from a development environment (like NetBeans). " +
"For this version, the commands that Quorum knows take the following format:

    quorum (-flag value*)*

What this means is that you can pass a flag to Quorum combined with any number of values. " +
"The legal flags are listed as follows:
    -name This flag tells Quorum to change the name the file is outputs.

    -compile This flag tells Quorum to compile a set of files.

    -web This flag tells Quorum to compile and generate output for use on the web through what " +
"is called a Tomcat or Glassfish server. These are server technologies designed to serve web pages.

    -test This flag tells Quorum to run its test suite on itself.

    -help This flag tells Quorum to output this help screen. 


Here are a few examples of how you can use this program:
    quorum Hello.quorum 

        This would request that Quorum compiles the source file Hello.quorum.

    quorum -compile Hello.quorum

        This would have the same impact, compiling Hello.quorum

    quorum -web Hello.quorum

        This would have Quorum compile Hello.quorum and package it for the web.

    quorum -name MyProgram -compile Hello.quorum

        This would cause Quorum to compile Hello.quorum and name the output MyProgram.

    quorum -name MyProgram -web Hello.quorum

        This would cause Quorum to compile Hello.quorum and name the output MyProgram.

    quorum Hello.quorum Goodbye.quorum

        This would cause Quorum to Compile two source code files. The first file must have a Main action.

For more information on writing programs in Quorum, visit www.quorumlanguage.com."     
        return help
    end

    private action ProfileWeb
        number total = 0
        integer amount = 1000
        output "Starting Compiler Profiler: Web mode"
        repeat amount times
            DateTime time
            start = time:GetEpochTime()
            WebRequest request
            request:AddParameter("code", "  class HelloWorld 
                                    action Main
                                        output 5
                                    end
                                end")
            WebResponse response = Respond(request)
            DateTime endTime
            theEnd = endTime:GetEpochTime()

            runtime = theEnd - start

            total = total + runtime
        end
        
        output "We ran the compiler " + amount + " times."
        output "The total running time was " + (total / 1000.0) + " seconds."
        output "The average running time was " + ((total / 1000.0) / amount) + " seconds."
        number compilesPerSecond = (1.0 / ((total / 1000.0) / amount))
        output "The total throughput of the compiler is " + compilesPerSecond + " compiles per second."
    end

    private action ProfileTest
        number total = 0
        integer amount = 1000
        output "Starting Compiler Profiler: Desktop mode"
        repeat amount times
            DateTime time
            start = time:GetEpochTime()
            Compiler compiler
            compiler:SetOutputType(compiler:JAVASCRIPT)
            compiler:CompileSingle("  class HelloWorld 
                                    action Main
                                        output 5
                                    end
                                end")
            DateTime endTime
            theEnd = endTime:GetEpochTime()

            runtime = theEnd - start

            total = total + runtime
        end
        
        output "We ran the compiler " + amount + " times."
        output "The total running time was " + (total / 1000.0) + " seconds."
        output "The average running time was " + ((total / 1000.0) / amount) + " seconds."
        number compilesPerSecond = (1.0 / ((total / 1000.0) / amount))
        output "The total throughput of the compiler is " + compilesPerSecond + " compiles per second."
    end

    action Respond(WebRequest request) returns WebResponse
        text result = ""
        WebResponse response
        constant text CODE_REQUEST = "code"
        Compiler compiler
        

        File library
        //To deploy to a particular server, change this line to the 
        //parent directory for where the standard library is housed.
        library:SetWorkingDirectory("/home/stefika/converter")
        library:SetPath("Library/Standard")
        compiler:SetStandardLibraryFolder(library)
        
        text directory = library:GetWorkingDirectory()
        //if there is no code tag, then just ignore the request
        if not request:HasParameter(CODE_REQUEST)
            
            response:SetPageText("No Quorum code was sent to the server.")
            //response:SetPageText(directory)
            return response
        end

        text source = request:GetParameter("code")
        compiler:SetOutputType(compiler:JAVASCRIPT)
        compiler:CompileSingle(source)

        if compiler:IsCompilationErrorFree()
            response:SetPageText(compiler:GetCompiledJavaScript())
        else
            response:SetPageText(compiler:GetCompilerErrorsAsShortText())
        end
        return response
    end
end
