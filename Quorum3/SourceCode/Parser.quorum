package Libraries.Language.Compile

use Libraries.Language.Compile.Context.all
use Libraries.Containers.Stack
use Libraries.Language.Compile.Symbol.all
use Libraries.System.File
use Libraries.Containers.List
use Libraries.Containers.Blueprints.Iterator
use Libraries.Containers.Array

class Parser is QuorumSourceListener
    QualifiedName packageValue = undefined
    Source source
    SymbolTable symbolTable = undefined
    Action currentAction = undefined
    Class currentClass = undefined
    Block currentBlock = undefined
    integer loopCounter = 0
    Stack<Block> blocks
    Array<QualifiedName> unresolvedUseStatements
    List<Class> classes
    boolean isFirstGenericInFile = false

    /*
        This action returns an iterator of all of the classes parsed
        by this parser.
    */
    action GetClassesIterator returns Iterator<Class>
        return classes:GetIterator()
    end

    action EnterStart(StartContext context) 
        source:SetFile(me:GetFile())
        symbolTable = me:GetSymbolTable()
    end

    action ExitPackageRule(PackageContext context) 
        packageValue = context:name
    end

    action EnterFullClassDeclaration(FullClassDeclarationContext context)
        text name = context:className
        AddClass(name)
        isFirstGenericInFile = true
    end

    action ExitFullClassDeclaration(FullClassDeclarationContext context) 
        i = 0
        repeat while i < unresolvedUseStatements:GetSize()
            currentClass:AddUnresolvedUseStatement(unresolvedUseStatements:Get(i))
            i = i + 1
        end

        QualifiedName generics = context:name

        i = 0
        repeat generics:GetNumberGenerics() times
            currentClass:AddGeneric(generics:GetGeneric(i))
            i = i + 1
        end
        ExitClass()
    end

    action EnterNoActionsNoClass(NoActionsNoClassContext context) 
        File file = GetFile()
        text name = file:GetFileName()
        text extension = file:GetFileExtension()
        integer length = extension:GetSize()
        name = name:GetSubtext(0, name:GetSize() - length - 1)
        AddClass(name)
        isFirstGenericInFile = true

        Action act
        currentAction = act
        act:SetParentClass(currentClass)

        Type type
        type:SetToVoid()
        currentAction:SetReturnType(type)
        currentAction:SetName("Main")
        currentAction:SetLocation(context:GetLocation())

        //add it to the class
        CompilerError error = currentClass:Add(currentAction)
        if error not= undefined
            CompilerErrorManager manager = me:GetCompilerErrorManager()
            manager:Add(error)
        end

        BlockContext b
        Location loc = b:GetLocation()
        loc:SetLocation(context:GetLocation())
        EnterBlock(b)
    end

    action ExitNoActionsNoClass(NoActionsNoClassContext context) 
        BlockContext b
        Location loc = b:GetLocation()
        loc:SetLocation(context:GetLocation())
        ExitBlock(b)
        ExitClass()
    end

    action ExitClass
        i = 0
        repeat while i < unresolvedUseStatements:GetSize()
            currentClass:AddUnresolvedUseStatement(unresolvedUseStatements:Get(i))
            i = i + 1
        end

        currentClass:SetFile(me:GetFile())

        if currentClass:GetStaticKey() not= "Libraries.Language.Object"
            //if this class is not Libraries.Language.Object, add this class
            //as a parent
            QualifiedName object
            object:Add("Libraries")
            object:Add("Language")
            object:Add("Object")

            //by default, all classes inherit from Object
            currentClass:AddUnresolvedParent(object)
        end

        Array<QualifiedName> newArray
        unresolvedUseStatements = newArray
        classes:Add(currentClass)
    end

    action EnterActionsNoClass(ActionsNoClassContext context) 
        File file = GetFile()
        text name = file:GetFileName()
        text extension = file:GetFileExtension()
        integer length = extension:GetSize()
        name = name:GetSubtext(0, name:GetSize() - length - 1)
        AddClass(name)
        isFirstGenericInFile = true
    end

    action ExitActionsNoClass(ActionsNoClassContext context) 
        ExitClass()
    end

    action ExitUse(UseContext context) 
        QualifiedName name = context:name
        name:SetLocation(context:GetLocation())
        unresolvedUseStatements:Add(name)       
    end

    action EnterGenericStatement(GenericContext context) end
    action ExitGenericStatement(GenericContext context) end

    action EnterGenericDeclaration(GenericDeclarationContext context) end
    action ExitGenericDeclaration(GenericDeclarationContext context) 
    end

    action ExitInheritStatement(InheritStatementContext context) 
        currentClass:AddUnresolvedParent(context:name)
    end

    action AddClass(text name)
        text key = name
        Class clazz
        if packageValue not= undefined
            key = packageValue:GetStaticKey() + "." + name
            clazz:SetPackage(packageValue)
        else 
            QualifiedName default
            clazz:SetPackage(default)
        end
        
        clazz:SetName(name)
        clazz:SetFile(GetFile())
        CompilerError error = symbolTable:Add(clazz)
        if error not= undefined
            CompilerErrorManager manager = GetCompilerErrorManager()
            manager:Add(error)
        else 
            currentClass = clazz
        end
    end

    action EnterSystemAction(ActionContext context) 
        Action act
        currentAction = act
        currentAction:SetParentClass(currentClass)
        currentAction:SetIsSystem(true)
    end

    action EnterBlock(BlockContext context) 
        Block block
        if currentBlock not= undefined
            currentBlock:Add(block)
        elseif currentAction not= undefined
            currentAction:SetBlock(block)
        end
        currentBlock = block
        blocks:Push(block)
    end
    
    action ExitBlock(BlockContext context)
        if currentBlock not= undefined
            currentBlock = currentBlock:GetParentBlock() //might be null, which is fine
        end
    end


    action ExitSystemAction(ActionContext context) 
    end

    action EnterBlueprintAction(ActionContext context) 
        Action act
        currentAction = act
        currentAction:SetParentClass(currentClass)
        currentAction:SetIsBluePrint(true)
    end

    action ExitBlueprintAction(ActionContext context)
    end

    action EnterLoopStatement(LoopContext context)
        if context:isTimes
            constant text LOOP_NAME = "Loopy"
            Variable variable
            variable:SetParentClass(currentClass)
            variable:SetName(loopCounter + LOOP_NAME)
            variable:SetIsParameter(false)
            variable:SetVisibleToDebugger(false)
            Type type
            type:SetToInteger()
            type:SetIntegerConstant(0)
            variable:SetType(type)
            currentBlock:Add(variable)
        end

        loopCounter = loopCounter + 1
    end

    action ExitActionHeader(ActionContext context)
        List<Variable> headerParams = context:parameters
        Iterator<Variable> it = headerParams:GetIterator()
        repeat while it:HasNext()
            Variable param = it:Next()
            currentAction:AddParameter(param)
        end

        
        currentAction:SetReturnType(context:returnType)
        currentAction:SetName(context:actionName)
        currentAction:SetLocation(context:GetLocation())

        //add it to the class
        CompilerError error = currentClass:Add(currentAction)
        if error not= undefined
            CompilerErrorManager manager = me:GetCompilerErrorManager()
            manager:Add(error)
        end
    end

    action EnterConstructor(ConstructorContext context) 
        Action act
        currentAction = act
        act:SetParentClass(currentClass)
        currentAction:SetName("on create")
        currentAction:SetLocation(context:GetLocation())
        
        if currentClass:GetConstructor() not= undefined
            CompilerError error
            error:SetLocation(context:GetLocation())
            CompilerErrorType cet
            cet:SetCurrentType(cet:METHOD_DUPLICATE)
            error:SetCompilerErrorType(cet)
            error:SetErrorMessage("I noticed that there is a second constructor defined, but I am not sure " +
                "which one is supposed to setup the object.")
        else
            currentClass:SetConstructor(act)
        end
    end

    action ExitConstructor(ConstructorContext context) 
        currentAction = undefined
    end

    action EnterAction(ActionContext context) 
        Action act
        currentAction = act
        act:SetParentClass(currentClass)
    end

    action ExitAction(ActionContext context) 
    end

    action ExitNormalAssignment(NormalAssignmentContext context)
        Variable variable
        variable:SetParentClass(currentClass)
        variable:SetLocation(context:GetLocation())
        if context:isPublic
            variable:SetPublic()
        end

        variable:SetHasExplicitModifier(context:hasModifier)
        variable:SetName(context:name)
        variable:SetIsParameter(false)
        variable:SetType(context:leftHandSide) //guaranteed to exist for this rule
        //the right hand side is not guaranteed to exist for this
        //particular rule. If it is there, we don't care about it in the 
        //parser anyway, because we can't type check in the first pass
        CompilerError error = undefined
        if currentBlock = undefined //we're in a field initiatlization block
            error = currentClass:Add(variable)
        else //we're in the block of an action
            error = currentBlock:Add(variable)
        end

        if error not= undefined
            CompilerErrorManager manager = GetCompilerErrorManager()
            manager:Add(error)
        end
    end

    action EnterParentAssignment(ParentAssignmentContext context) end
    action ExitParentAssignment(ParentAssignmentContext context) end

    action EnterObjectAssignment(ObjectAssignmentContext context) end
    action ExitObjectAssignment(ObjectAssignmentContext context) end

    action EnterNoTypeAssignment(NoTypeAssignmentContext context) end
    action ExitNoTypeAssignment(NoTypeAssignmentContext context) 
        Variable variable
        variable:SetParentClass(currentClass)
        variable:SetLocation(context:GetLocation())
        variable:SetName(context:name)
        variable:SetIsParameter(false)

        Variable isDefinedAlready = undefined
        if currentBlock = undefined //we're in a field initiatlization block
            isDefinedAlready = currentClass:GetVariable(context:name)
        else //we're in the block of an action
            if currentBlock:GetParentAction() = undefined
                a = 5
            end
            isDefinedAlready = currentBlock:GetVariable(context:name)
        end

        CompilerError error = undefined
        if isDefinedAlready = undefined
            if currentBlock = undefined //we're in a field initiatlization block
                error = currentClass:Add(variable)
            else //we're in the block of an action
                error = currentBlock:Add(variable)
            end
        else 
            isDefinedAlready:AddUsage(context:GetLocation())
        end

        if error not= undefined
            CompilerErrorManager manager = GetCompilerErrorManager()
            manager:Add(error)
        end
    end
end