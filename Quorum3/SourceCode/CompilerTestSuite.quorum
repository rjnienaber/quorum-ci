package Libraries.Language.Compile.Test

use Libraries.Language.Compile.all
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Language.Compile.Parser
use Libraries.System.File
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Translate.QuorumJarGenerator

class CompilerTestSuite 
    //Compiler compiler
    //HashTable<text, TestResult> passing
    integer total = 0
    integer passed = 0
    integer failed = 0

    action Main
        output "Starting Quorum Test Suite, version  " //+ compiler:VERSION + "."
        Test1()
        
        output ""
        output "Finished Testing:"
        output "Tests Passed: " + passed
        output "Tests Failed: " + failed
        output "Total Percentage: "
    end

    action Test1
        Compiler compiler
        File file
        //file:SetPath("Test/Expression.quorum")
        file:SetPath("Library/Tests/Expressions/Pass/AddIntInt.quorum")
        compiler:SetMain(file)

        Parser parser
        compiler:Parse(file, parser)
        TypeCheckListener checker
        compiler:Parse(file, checker)
        QuorumBytecodeListener bytecode
        compiler:Parse(file, bytecode)
        
        CompilerErrorManager manager = parser:GetCompilerErrorManager()

        if manager:IsCompilationErrorFree() //run the program
            QuorumJarGenerator generator

            File f = compiler:GetDistributionFile()
            generator:SetCompiler(compiler)
            generator:Write()

//            File runMe = bytecode:GetBuildFile()


  //          CompilerTestResult result = RunClassFile(file)
            a = 5
        else 
            CompilerTestResult result
            result:passed = false
        end
    end

    system action RunClassFile(File file) returns CompilerTestResult
end