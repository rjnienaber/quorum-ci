package Libraries.Language.Compile.Symbol

use Libraries.Language.Compile.QualifiedName
use Libraries.Containers.Array
use Libraries.Containers.Blueprints.Iterator

class Type 
    boolean isConstant = false
    text genericName = ""
    text staticKey = ""
    Array<Type> generics
    text mappedGeneric = undefined

    public constant text OBJECT_KEY = "Libraries.Language.Object"
    public constant text INTEGER_PRIMITIVE_KEY = "integer"
    public constant text BOOLEAN_PRIMITIVE_KEY = "boolean"
    public constant text NUMBER_PRIMITIVE_KEY = "number"
    public constant text TEXT_PRIMITIVE_KEY = "text"
    public constant text INTEGER_OBJECT_KEY = "Libraries.Language.Types.Integer"
    public constant text BOOLEAN_OBJECT_KEY = "Libraries.Language.Types.Boolean"
    public constant text NUMBER_OBJECT_KEY = "Libraries.Language.Types.Number"
    public constant text TEXT_OBJECT_KEY = "Libraries.Language.Types.Text"
    public constant text UNDEFINED_KEY = "undefined"
    public constant text VOID_KEY = "void"
    public constant text ERROR_KEY = "Libraries.Language.Errors.Error"

    /* This is the value of the boolean if it happens to be a constant. */
    boolean booleanConstant = false
    /* This is the value of the integer if it happens to be a constant. */
    integer integerConstant = 0
    /* This is the value of the number if it happens to be a constant. */
    number numberConstant = 0.0
    /* This is the value of the text if it happens to be a constant. */
    text textConstant = ""

    action Copy returns Type //TODO: does not yet handle generics
        Type type
        if IsInteger()
            type:SetToInteger()
            type:SetIntegerConstant(type:GetIntegerConstant())
        elseif IsBoolean()
            type:SetToBoolean()
            type:SetBooleanConstant(booleanConstant)
        elseif IsNumber()
            type:SetToNumber()
            type:SetNumberConstant(numberConstant)
        elseif IsText()
            type:SetToText()
            type:SetTextConstant(textConstant)
        elseif IsVoid()
            type:SetToVoid()
        elseif IsUndefined()
            type:SetToUndefined()
        else
            type:SetToObject(staticKey)
        end
        type:SetIsConstant(isConstant)
        return type
    end

    /*
        Returns a static key for the object version of this type, even if it is
        a primitive. It does not change the type itself.
    */
    action ConvertToNonPrimitiveStaticKey returns text
        if IsInteger()
            return me:INTEGER_OBJECT_KEY
        elseif IsBoolean()
            return me:BOOLEAN_OBJECT_KEY
        elseif IsNumber()
            return me:NUMBER_OBJECT_KEY
        elseif IsText()
            return me:TEXT_OBJECT_KEY
        elseif IsVoid()
            return me:VOID_KEY
        elseif IsUndefined()
            return me:UNDEFINED_KEY
        end
        return staticKey
    end

    action IsMappedToGeneric returns boolean
        return not (mappedGeneric = undefined)
    end

    action GetMappedGeneric returns text
        return mappedGeneric
    end

    /* 
        This action sets up this type value to be equivalent to a particular
        generic in a generic list. For example, if we have
        Array<Item>, and the array class is defined at class Array<type>
        then returning "type" would be equivalent to Item in this instance.
    */
    action MapToGeneric(text key)
        mappedGeneric = key
    end


    /*
        This action adds a generic to this type as a subtype.
    */
    action AddGeneric(Type type)
        generics:Add(type)
    end

    /*
        This action returns whether or not this action has generics.
    */
    action HasGenerics returns boolean
        return not generics:IsEmpty()
    end

    /*

        This action returns a top-level generic at a particular location. If,
        for example, I have:

        T<V<F<I>>, M<Z>>, this action would return the generic M<Z>.
    */
    action GetGeneric(integer location) returns Type
        return generics:Get(location)
    end

    /*
        This action returns all top level generics. Each of these generics
        may have subgenerics.
    */
    action GetGenerics returns Iterator<Type>
        return generics:GetIterator()
    end

    /*
        This action returns the number of top level generics. Nested generics
        are not taken into account by this action. For example, if I had

        T<V>, this would return 1. If I had
        T<V<X>>, this action would still return 1. If I had:
        T<V<X>, V<X>>, this action would return 2.
        
    */
    action GetNumberGenerics returns integer
        return generics:GetSize()
    end

    action GetStaticKey returns text
        return staticKey
    end

    action GetStaticKeyWithGenerics returns text
        text final = staticKey
        boolean first = true

        if HasGenerics()
            final = final + "<"
            Iterator<Type> gen = generics:GetIterator()
            repeat while gen:HasNext()
                Type type = gen:Next()
                if first
                    final = final + type:GetStaticKeyWithGenerics()
                    first = false
                else
                    final = final + ":" + type:GetStaticKeyWithGenerics()
                end
            end
            final = final + ">"
        end
        return final
    end

    action GetBytecodeSize returns integer
        if me:IsNumber()
            return 2
        end
        return 1
    end

    action GetDisplayName returns text
        return staticKey
    end
    
    /* This action returns a constant value representing a known constant
       for this type. If this type is not declared as a constant, this
       action is invalid.
    */
    action GetBooleanConstant returns boolean
        return booleanConstant
    end

    /* This action returns a constant value representing a known constant
       for this type. If this type is not declared as a constant, this
       action is invalid.
    */
    action GetIntegerConstant returns integer
        return integerConstant
    end

    /* This action returns a constant value representing a known constant
       for this type. If this type is not declared as a constant, this
       action is invalid.
    */
    action GetNumberConstant returns number
        return numberConstant
    end

    action GetTextConstant returns text
        return textConstant
    end

    action SetBooleanConstant(boolean value)
        booleanConstant = value
        SetToBoolean()
    end

    action SetIntegerConstant(integer value)
        integerConstant = value
        SetToInteger()
    end

    action SetNumberConstant(number value)
        numberConstant = value
        SetToNumber()
    end

    action SetTextConstant(text value) 
        textConstant = value
        SetToText()
    end

    /* This action returns a constant value representing a known constant
       for this type. If this type is not declared as a constant, this
       action is invalid.
    */
    action IsConstant returns boolean
        return isConstant
    end

    action SetIsConstant(boolean final) 
        isConstant = final
    end

    action IsVoid returns boolean
        return staticKey = VOID_KEY
    end

    action IsInteger returns boolean
        return staticKey = INTEGER_PRIMITIVE_KEY
    end

    action IsBoolean returns boolean
        return staticKey = BOOLEAN_PRIMITIVE_KEY
    end

    action IsNumber returns boolean
        return staticKey = NUMBER_PRIMITIVE_KEY
    end

    action IsPrimitive returns boolean
        if IsInteger() or IsNumber() or IsBoolean() or IsText()
            return true
        end
        return false
    end

    action IsText returns boolean
        return staticKey = TEXT_PRIMITIVE_KEY
    end

    action IsIntegerObject returns boolean
        return staticKey = INTEGER_OBJECT_KEY
    end

    action IsBooleanObject returns boolean
        return staticKey = BOOLEAN_OBJECT_KEY
    end

    action IsNumberObject returns boolean
        return staticKey = NUMBER_OBJECT_KEY
    end

    action IsTextObject returns boolean
        return staticKey = TEXT_OBJECT_KEY
    end

    action SetToVoid
        staticKey = VOID_KEY
    end

    action SetToUndefined
        staticKey = UNDEFINED_KEY
    end
    
    action IsUndefined returns boolean
        return staticKey = UNDEFINED_KEY
    end

    action SetToInteger
        staticKey = INTEGER_PRIMITIVE_KEY
    end

    action SetToBoolean
        staticKey = BOOLEAN_PRIMITIVE_KEY
    end

    action SetToNumber
        staticKey = NUMBER_PRIMITIVE_KEY
    end

    action SetToText
        staticKey = TEXT_PRIMITIVE_KEY
    end

    action SetToIntegerObject
        staticKey = INTEGER_OBJECT_KEY
    end

    action SetToBooleanObject
        staticKey = BOOLEAN_OBJECT_KEY
    end

    action SetToNumberObject
        staticKey = NUMBER_OBJECT_KEY
    end

    action SetToTextObject
        staticKey = TEXT_OBJECT_KEY
    end

    action SetToObject(QualifiedName name)
        if name not= undefined
            QualifiedName val = name:Copy()
            QualifiedName objectName = val
            staticKey = val:GetStaticKey()
        end
    end

    action SetToObject(text name)
        if not(name = undefined)
            staticKey = name
        end
    end

    action SetToObject(Class clazz)
        key = clazz:GetStaticKey()
        SetToObject(key)
    end

    /*
        This action changes this type to represent a generic, with the given
        name that is currently its static key. 
    */ 
    action SetToGeneric
        genericName = staticKey
        staticKey = OBJECT_KEY
    end

    action ConvertTypeToBytecodeSignature returns text
        if IsBoolean()
            return "Z"
        elseif IsText()
            return "Ljava/lang/String;"
        elseif IsNumber()
            return "D"
        elseif IsInteger()
            return "I"
        elseif IsVoid()
            return "V"
        else //it is an object, so return its interface type
            return "L" + ConvertStaticKeyToBytecodePath() + ";"
        end
    end

    action ConvertTypeToBytecodeSignatureInterface returns text
        if IsBoolean()
            return "Z"
        elseif IsText()
            return "Ljava/lang/String;"
        elseif IsNumber()
            return "D"
        elseif IsInteger()
            return "I"
        elseif IsVoid()
            return "V"
        else //it is an object, so return its interface type
            return "L" + ConvertStaticKeyToBytecodePath() + "$Interface;"
        end
    end

    action ConvertToSignatureFromField(boolean isGetter) returns text
        text result = ""
        if isGetter
            result = result +  "()" + ConvertTypeToBytecodeSignature()
        else
            result = result + "(" + ConvertTypeToBytecodeSignature() + ")V"
        end

        return result
    end

    action ConvertToSignatureFromFieldInterface(boolean isGetter) returns text
        text result = ""
        if isGetter
            result = result +  "()" + ConvertTypeToBytecodeSignatureInterface()
        else
            result = result + "(" + ConvertTypeToBytecodeSignatureInterface() + ")V"
        end

        return result
    end

    action ConvertStaticKeyToBytecodePath() returns text
        text key = GetStaticKey()
        text result = "quorum/" + key:Replace(".", "/")
        return result
    end

    action ConvertStaticKeyToJavaScriptName() returns text
        text key = GetStaticKey()
        text result = "quorum_" + key:Replace(".", "_")
        return result
    end
end