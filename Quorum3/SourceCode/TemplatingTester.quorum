package Libraries.Language.Compile.Test

use Libraries.Language.Compile.all
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Language.Compile.Parser
use Libraries.System.File
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Translate.JarGenerator
use Libraries.System.StackTraceItem

class TemplatingTester 
    CompilerTestSuite suite = undefined
    text path = "Library/Tests/Templating/"
    text passPath = path + "Pass/"
    text failPath = path + "Fail/"
    
    action Test
//PASS TESTS
        path = passPath
        ArraySetAndGet_0()
        ExpressionInTemplatedMethodParameter()
        ExpressionInTemplatedMethodParameter2()
        ExpressionInTemplatedMethodParameter3()
        ExpressionInTemplatedMethodParameter4()
        ExpressionInTemplatedMethodParameter5()
        GenericPass()     //Test not in 2.0 test suite, not sure if complete
        ListNodeInteger()
        ListNodeNumber()
        ListNodeText()
        PassBooleanTakesBoolean_5()
        PassBooleanTakesText_14()
        PassIntegerTakesInteger_4()
        PassIntegerTakesNumber_11()
        PassIntegerTakesText_12()
        PassNumberTakesNumber_6()
        PassNumberTakesText_13()
        PassTextTakesText_7()
        ProgramUsingEntryWithThreeTypes_2()
        ReturnNullWithTemplatedReturnType_9()
        TempClassHasATempClass_8()
        TempClassHasTempClassThatInheritsFromTempClass_10()
        TemplateUsingInteger_1()
        TemplateUsingTemplatedClass_15() 
        TemplateUsingTwoIntegers_3()
        TemplatedParentAutoBox()
        
//FAIL TESTS
        path = failPath
        ArrayFilledWithWrongType()
        DefineTypeOfUntemplatedClass_10()
        DiamondProblemWithTwoTypes_9()
        PassBooleanTakesInteger_1()
        PassBooleanTakesNumber_7()
        PassIntegerTakesBoolean_4()
        PassNumberTakesBoolean_5()
        PassNumberTakesInteger_2()
        PassTextTakesBoolean_6()
        PassTextTakesInteger_3()
        PassTextTakesNumber_8()
        TypeCheckTemplatedChildOfTempClass_12()
        TypeCheckUntemplatedChildOfTempClass_11()
    end

    action GetName returns text
        return "Templating Tests"
    end

    action GetCompilerTestSuite returns CompilerTestSuite
        return suite
    end

    action SetCompilerTestSuite(CompilerTestSuite suite)
        me:suite = suite
    end

    action ArraySetAndGet_0
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ArraySetAndGet_0.quorum")
        files:Add(main)
        results:Add(0, "34")
        results:Add(1, "16")
        results:Add(2, "-62")
        results:Add(3, "3")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)
    end

    action ExpressionInTemplatedMethodParameter()
        Array<File> files
        Array<text> results
        File main
        File dependent1
        main:SetPath(path + "ExpressionInTemplatedMethodParameter.quorum")
        dependent1:SetPath(path + "Returner.quorum")
        files:Add(main)
        files:Add(dependent1)
        results:Add(0, "passed")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)
    end

    action ExpressionInTemplatedMethodParameter2()
        Array<File> files
        Array<text> results
        File main
        File dependent1
        main:SetPath(path + "ExpressionInTemplatedMethodParameter2.quorum")
        dependent1:SetPath(path + "Returner.quorum")
        files:Add(main)
        files:Add(dependent1)
        results:Add(0, "passed")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)
    end

    action ExpressionInTemplatedMethodParameter3()
        Array<File> files
        Array<text> results
        File main
        File dependent1
        main:SetPath(path + "ExpressionInTemplatedMethodParameter3.quorum")
        dependent1:SetPath(path + "Returner.quorum")
        files:Add(main)
        files:Add(dependent1)
        results:Add(0, "passed")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)
    end

    action ExpressionInTemplatedMethodParameter4()
        Array<File> files
        Array<text> results
        File main
        File dependent1
        main:SetPath(path + "ExpressionInTemplatedMethodParameter4.quorum")
        dependent1:SetPath(path + "Returner.quorum")
        files:Add(main)
        files:Add(dependent1)
        results:Add(0, "passed")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)
    end

    action ExpressionInTemplatedMethodParameter5()
        Array<File> files
        Array<text> results
        File main
        File dependent1
        main:SetPath(path + "ExpressionInTemplatedMethodParameter5.quorum")
        dependent1:SetPath(path + "Returner.quorum")
        files:Add(main)
        files:Add(dependent1)
        results:Add(0, "passed")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)
    end

    action GenericPass()
        Array<File> files
        Array<text> results
        File main
        File dependent1
        File dependent2
        File dependent3
        main:SetPath(path + "GenericPass.quorum")
        dependent1:SetPath(path + "GenericParentA.quorum")
        dependent2:SetPath(path + "GenericParentB.quorum")
        dependent3:SetPath(path + "GenericParentC.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        files:Add(dependent3)
        results:Add(0, "passed")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)
    end

    action ListNodeInteger()
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ListNodeInteger.quorum")
        files:Add(main)
        results:Add(0, "integerPassed")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)
    end

    action ListNodeNumber()
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ListNodeNumber.quorum")
        files:Add(main)
        results:Add(0, "numberPassed")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)
    end

    action ListNodeText()
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ListNodeText.quorum")
        files:Add(main)
        results:Add(0, "textPassed")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)
    end

    action PassBooleanTakesBoolean_5()
        Array<File> files
        Array<text> results
        File main
        File dependent1
        main:SetPath(path + "PassBooleanTakesBoolean_5.quorum")
        dependent1:SetPath(path + "Test_4.quorum")
        files:Add(main)
        files:Add(dependent1)
        results:Add(0, "doSomething")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)
    end

    action PassBooleanTakesText_14()
        Array<File> files
        Array<text> results
        File main
        File dependent1
        main:SetPath(path + "PassBooleanTakesText_14.quorum")
        dependent1:SetPath(path + "Test_4.quorum")
        files:Add(main)
        files:Add(dependent1)
        results:Add(0, "doSomething")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)
    end

    action PassIntegerTakesInteger_4()
        Array<File> files
        Array<text> results
        File main
        File dependent1
        main:SetPath(path + "PassIntegerTakesInteger_4.quorum")
        dependent1:SetPath(path + "Test_4.quorum")
        files:Add(main)
        files:Add(dependent1)
        results:Add(0, "doSomething")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)
    end

    action PassIntegerTakesNumber_11()
        Array<File> files
        Array<text> results
        File main
        File dependent1
        main:SetPath(path + "PassIntegerTakesNumber_11.quorum")
        dependent1:SetPath(path + "Test_4.quorum")
        files:Add(main)
        files:Add(dependent1)
        results:Add(0, "doSomething")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)
    end

    action PassIntegerTakesText_12()
        Array<File> files
        Array<text> results
        File main
        File dependent1
        main:SetPath(path + "PassIntegerTakesText_12.quorum")
        dependent1:SetPath(path + "Test_4.quorum")
        files:Add(main)
        files:Add(dependent1)
        results:Add(0, "doSomething")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)
    end

    action PassNumberTakesNumber_6()
        Array<File> files
        Array<text> results
        File main
        File dependent1
        main:SetPath(path + "PassNumberTakesNumber_6.quorum")
        dependent1:SetPath(path + "Test_4.quorum")
        files:Add(main)
        files:Add(dependent1)
        results:Add(0, "doSomething")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)
    end

    action PassNumberTakesText_13()
        Array<File> files
        Array<text> results
        File main
        File dependent1
        main:SetPath(path + "PassNumberTakesText_13.quorum")
        dependent1:SetPath(path + "Test_4.quorum")
        files:Add(main)
        files:Add(dependent1)
        results:Add(0, "doSomething")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)
    end

    action PassTextTakesText_7()
        Array<File> files
        Array<text> results
        File main
        File dependent1
        main:SetPath(path + "PassTextTakesText_7.quorum")
        dependent1:SetPath(path + "Test_4.quorum")
        files:Add(main)
        files:Add(dependent1)
        results:Add(0, "doSomething")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)
    end

    action ProgramUsingEntryWithThreeTypes_2()
        Array<File> files
        Array<text> results
        File main
        File dependent1
        main:SetPath(path + "ProgramUsingEntryWithThreeTypes_2.quorum")
        dependent1:SetPath(path + "SimpleEntryUsingThreeTypes_2.quorum")
        files:Add(main)
        files:Add(dependent1)
        results:Add(0, "doSomething1")
        results:Add(1, "doSomething2")
        results:Add(2, "doSomething3")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)
    end

    action ReturnNullWithTemplatedReturnType_9()
        Array<File> files
        Array<text> results
        File main
        File dependent1
        main:SetPath(path + "ReturnNullWithTemplatedReturnType_9.quorum")
        dependent1:SetPath(path + "Node_8.quorum")
        files:Add(main)
        files:Add(dependent1)
        results:Add(0, "")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)

    end

    action TempClassHasATempClass_8()
        Array<File> files
        Array<text> results
        File main
        File dependent1
        File dependent2
        main:SetPath(path + "TempClassHasATempClass_8.quorum")
        dependent1:SetPath(path + "LinkedList_8.quorum")
        dependent2:SetPath(path + "Node_8.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        results:Add(0, "5")
        results:Add(1, "35")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)
    end

    action TempClassHasTempClassThatInheritsFromTempClass_10()
        Array<File> files
        Array<text> results
        File main
        File dependent1
        File dependent2
        File dependent3
        main:SetPath(path + "TempClassHasTempClassThatInheritsFromTempClass_10.quorum")
        dependent1:SetPath(path + "DoubleNodeList_10.quorum")
        dependent2:SetPath(path + "DoubleNode_10.quorum")
        dependent3:SetPath(path + "Node_8.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        files:Add(dependent3)
        results:Add(0, "1")
        results:Add(0, "Slattery")
        results:Add(0, "Stefik")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)
    end

    action TemplateUsingInteger_1()
        Array<File> files
        Array<text> results
        File main
        File dependent1
        main:SetPath(path + "TemplateUsingInteger_1.quorum")
        dependent1:SetPath(path + "Entry_1.quorum")
        files:Add(main)
        files:Add(dependent1)
        results:Add(0, "5")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)
    end

    action TemplateUsingTemplatedClass_15()
        Array<File> files
        Array<text> results
        File main
        File dependent1
        File dependent2
        main:SetPath(path + "TemplateUsingTemplatedClass_15.quorum")
        dependent1:SetPath(path + "Entry_1.quorum")
        dependent2:SetPath(path + "Container_15.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        results:Add(0, "5")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)
    end

    action TemplateUsingTwoIntegers_3()
        Array<File> files
        Array<text> results
        File main
        File dependent1
        main:SetPath(path + "TemplateUsingTwoIntegers_3.quorum")
        dependent1:SetPath(path + "Entry2_3.quorum")
        files:Add(main)
        files:Add(dependent1)
        results:Empty()
        results:Add(0, "10")
        results:Add(1, "5")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)
    end

    action TemplatedParentAutoBox()
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "TemplatedParentAutoBox.quorum")
        files:Add(main)
        results:Add(0, "1")

        suite:Test(files, results)
        //suite:TestJavaScript(files, results)
    end

    //FAIL TESTS
    action ArrayFilledWithWrongType()
        Array<File> files
        File main
        main:SetPath(path + "ArrayFilledWithWrongType.quorum")
        files:Add(main)

        suite:TestFail(files)
    end

    action DefineTypeOfUntemplatedClass_10()
        Array<File> files
        File main
        File dependent1
        File dependent2
        File dependent3
        main:SetPath(path + "DefineTypeOfUntemplatedClass_10.quorum")
        dependent1:SetPath(path + "C_10.quorum")
        dependent2:SetPath(path + "B_10.quorum")
        dependent3:SetPath(path + "A_10.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        files:Add(dependent3)

        suite:TestFail(files)
    end

    action DiamondProblemWithTwoTypes_9()
        Array<File> files
        File main
        File dependent1
        File dependent2
        File dependent3
        File dependent4
        main:SetPath(path + "DiamondProblemWithTwoTypes_9.quorum")
        dependent1:SetPath(path + "A_9.quorum")
        dependent2:SetPath(path + "B_9.quorum")
        dependent3:SetPath(path + "C_9.quorum")
        dependent4:SetPath(path + "D_9.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        files:Add(dependent3)
        files:Add(dependent4)

        suite:TestFail(files)
    end

    action PassBooleanTakesInteger_1()
        Array<File> files
        File main
        File dependent1
        main:SetPath(path + "PassBooleanTakesInteger_1.quorum")
        dependent1:SetPath(path + "Test_1.quorum")
        files:Add(main)
        files:Add(dependent1)

        suite:TestFail(files)
    end

    action PassBooleanTakesNumber_7()
        Array<File> files
        File main
        File dependent1
        main:SetPath(path + "PassBooleanTakesNumber_7.quorum")
        dependent1:SetPath(path + "Test_1.quorum")
        files:Add(main)
        files:Add(dependent1)

        suite:TestFail(files)
    end

    action PassIntegerTakesBoolean_4()
        Array<File> files
        File main
        File dependent1
        main:SetPath(path + "PassIntegerTakesBoolean_4.quorum")
        dependent1:SetPath(path + "Test_1.quorum")
        files:Add(main)
        files:Add(dependent1)

        suite:TestFail(files)
    end

    action PassNumberTakesBoolean_5()
        Array<File> files
        File main
        File dependent1
        main:SetPath(path + "PassNumberTakesBoolean_5.quorum")
        dependent1:SetPath(path + "Test_1.quorum")
        files:Add(main)
        files:Add(dependent1)

        suite:TestFail(files)
    end

    action PassNumberTakesInteger_2()
        Array<File> files
        File main
        File dependent1
        main:SetPath(path + "PassNumberTakesInteger_2.quorum")
        dependent1:SetPath(path + "Test_1.quorum")
        files:Add(main)
        files:Add(dependent1)

        suite:TestFail(files)
    end

    action PassTextTakesBoolean_6()
        Array<File> files
        File main
        File dependent1
        main:SetPath(path + "PassTextTakesBoolean_6.quorum")
        dependent1:SetPath(path + "Test_1.quorum")
        files:Add(main)
        files:Add(dependent1)

        suite:TestFail(files)
    end

    action PassTextTakesInteger_3()
        Array<File> files
        File main
        File dependent1
        main:SetPath(path + "PassTextTakesInteger_3.quorum")
        dependent1:SetPath(path + "Test_1.quorum")
        files:Add(main)
        files:Add(dependent1)

        suite:TestFail(files)
    end

    action PassTextTakesNumber_8()
        Array<File> files
        File main
        File dependent1
        main:SetPath(path + "PassTextTakesNumber_8.quorum")
        dependent1:SetPath(path + "Test_1.quorum")
        files:Add(main)
        files:Add(dependent1)

        suite:TestFail(files)
    end

    action TypeCheckTemplatedChildOfTempClass_12()
        Array<File> files
        File main
        File dependent1
        File dependent2
        File dependent3
        main:SetPath(path + "TypeCheckTemplatedChildOfTempClass_12.quorum")
        dependent1:SetPath(path + "B_11.quorum")
        dependent2:SetPath(path + "A_11.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)

        suite:TestFail(files)
    end

    action TypeCheckUntemplatedChildOfTempClass_11()
        Array<File> files
        File main
        File dependent1
        File dependent2
        File dependent3
        main:SetPath(path + "TypeCheckUntemplatedChildOfTempClass_11.quorum")
        dependent1:SetPath(path + "B_12.quorum")
        dependent2:SetPath(path + "A_11.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)

        suite:TestFail(files)
    end
end