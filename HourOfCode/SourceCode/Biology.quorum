use Libraries.Compute.Random

class Biology 
    action IsDNA(text dna) returns boolean
        index = 0
        repeat dna:GetSize() times
            if dna:GetCharacter(index) not= "A" and dna:GetCharacter(index) not= "C" and dna:GetCharacter(index) not= "G" and dna:GetCharacter(index) not= "T"
                text character = dna:GetCharacter(index)
                return false
            end
            index = index + 1
        end
        return true
    end

    action Clone(text value) returns text
        text newDNA = value
        //loop through DNA string and change a letter within it 10% of the time
        Random random
        integer randomNumber = random:RandomIntegerBetween(1,10)
        if(randomNumber = 7)
            newDNA:Replace(newDNA:GetSubtext(0,0), "U")
        end
        //at the end of the loop, update the DNA string with whatever it is after the mutation checking
        output newDNA
        return value
    end

    action IsParent(text child, text possibleParent) returns boolean
        // Check if both the child and possible parent are DNA at all; also check that child and possible parent DNA are the same size
        if(child:GetSize() = possibleParent:GetSize() and IsDNA(child) and IsDNA(possibleParent))
            // If they are, loop through the characters of child and possible parent and count how many of them are the same
            integer index = 0
            integer count = 0
            repeat child:GetSize() times
                if(child:GetCharacter(index) = possibleParent:GetCharacter(index))
                    count = count + 1
                end
                index = index + 1
            end
            // The DNA counts as a parent if the DNA has at least 25% equal characters
            number percentSimilar = count / child:GetSize()
            if(percentSimilar > 0.25)
                return true
            end
        end
        return false
    end

    action GenerateBug(text bugDNA)
        text superpower = ""
        boolean isValidMutation = true
        if(bugDNA = "XGATTACA")
            superpower = "Laser beams: Bug shoots laser beams out of its eyes"
        elseif(bugDNA = "GXATTACA")
            superpower = ""
        elseif(bugDNA = "GATXTACA")
            superpower = ""
        elseif(bugDNA = "GATTXACA")
            superpower = ""
        elseif(bugDNA = "GATTAXCA")
            superpower = ""
        elseif(bugDNA = "GATTACXA")
            superpower = ""
        elseif(bugDNA = "GATTACAX")
            superpower = ""
        elseif(bugDNA = "YGATTACA")
            superpower = ""
        elseif(bugDNA = "GYATTACA")
            superpower = ""
        elseif(bugDNA = "GAYTTACA")
            superpower = ""
        elseif(bugDNA = "GATYTACA")
            superpower = ""
        elseif(bugDNA = "GATTYACA")
            superpower = ""
        elseif(bugDNA = "GATTAYCA")
            superpower = ""
        elseif(bugDNA = "GATTACYA")
            superpower = ""
        elseif(bugDNA = "GATTACAY")
            superpower = ""
        else
            isValidMutation = false
        end
        if(isValidMutation)
            output "This bug has the super power of " + superpower
        else
            output "This is not a valid DNA sequence. The bug has died."
        end
    end

    action Breed(text parent1, text parent2) returns text
        // Check that both parents are valid DNA sequences, and of the same length
        Biology bio
        text child = ""
        Random rand
        if(parent1:GetSize() = parent2:GetSize() and bio:IsDNA(parent1) and bio:IsDNA(parent2))
            // Loop through each character, create a new string that will either take the parent1's or parent2's character randomly
            integer index = 0
            repeat parent1:GetSize() times
                if(rand:RandomIntegerBetween(0,1) = 0)
                    child = child + parent1:GetSubtext(index, index)
                else
                    child = child + parent2:GetSubtext(index, index)
                end
                index = index + 1
            end
            return child
        end
        return "These parents aren't compatible"
        
    end
        
 end
