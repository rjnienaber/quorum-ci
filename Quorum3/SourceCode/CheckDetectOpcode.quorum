package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type
use Libraries.Language.Compile.Translate.BlockOpcode
use Libraries.Language.Compile.Location
use Libraries.Containers.List

class CheckDetectOpcode is QuorumOpcode
    BlockOpcode block = undefined
    BlockOpcode alwaysBlock = undefined
    List<DetectBlockOpcode> detectBlocks
    JavaBytecodeOpcodes opcodes

    integer whichCheck = 0


    action AddDetectBlock(DetectBlockOpcode op)
        detectBlocks:Add(op)
    end

    action GetCheckLabelInteger returns integer
        return whichCheck
    end

    action SetCheckLabelInteger(integer value)
        whichCheck = value
    end

    action SetBlock(BlockOpcode block)
        me:block = block
    end

    action GetBlock returns BlockOpcode
        return block
    end

    action SetAlwaysBlock(BlockOpcode block)
        me:alwaysBlock = block
    end

    action GetAlwaysBlock returns BlockOpcode
        return alwaysBlock
    end

    action Write 
        JavaBytecodeLabel checkStart
        JavaBytecodeLabel checkEnd
        JavaBytecodeLabel fullEnd

        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        
        if block not= undefined
            methodWriter:VisitLabel(checkStart)
            block:Write()
            //methodWriter:VisitJump(opcodes:GetGoto(), fullEnd)
            methodWriter:VisitLabel(checkEnd)
        end


        if alwaysBlock not= undefined
            JavaBytecodeLabel alwaysStart
            methodWriter:VisitLabel(alwaysStart)
            alwaysBlock:Write()
            text null = undefined //workaround
            methodWriter:VisitTryCatchBlock(checkStart, checkEnd, alwaysStart, "java/lang/Exception")
        end

        methodWriter:VisitLabel(fullEnd)
    end

    action WriteJavaScript returns text
        return ""
    end

    action GetTemplateCopy returns QuorumOpcode
        CheckDetectOpcode op


        return op
    end
end