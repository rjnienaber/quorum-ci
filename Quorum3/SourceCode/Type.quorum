package Libraries.Language.Compile.Symbol

use Libraries.Language.Compile.QualifiedName
use Libraries.Containers.Array
use Libraries.Containers.Blueprints.Iterator

class Type 
    boolean isInteger = false
    boolean isText = false
    boolean isNumber = false
    boolean isBoolean = false
    boolean isIntegerObject = false
    boolean isTextObject = false
    boolean isNumberObject = false
    boolean isBooleanObject = false
    boolean isVoid = false
    boolean isPrimitive = false
    boolean isConstant = false
    boolean isGeneric = false
    text genericName = ""
    text staticKey = ""
    Array<Type> generics

    public constant text OBJECT_KEY = "Libraries.Language.Object"
    public constant text INTEGER_PRIMITIVE_KEY = "integer"
    public constant text BOOLEAN_PRIMITIVE_KEY = "boolean"
    public constant text NUMBER_PRIMITIVE_KEY = "number"
    public constant text TEXT_PRIMITIVE_KEY = "text"
    public constant text INTEGER_OBJECT_KEY = "Libraries.Language.Types.Integer"
    public constant text BOOLEAN_OBJECT_KEY = "Libraries.Language.Types.Boolean"
    public constant text NUMBER_OBJECT_KEY = "Libraries.Language.Types.Number"
    public constant text TEXT_OBJECT_KEY = "Libraries.Language.Types.Text"
    public constant text UNDEFINED_KEY = "undefined"
    public constant text VOID_KEY = "void"

    /* This is the value of the boolean if it happens to be a constant. */
    boolean booleanConstant = false
    /* This is the value of the integer if it happens to be a constant. */
    integer integerConstant = 0
    /* This is the value of the number if it happens to be a constant. */
    number numberConstant = 0.0
    /* This is the value of the text if it happens to be a constant. */
    text textConstant = ""

    action Copy returns Type //TODO: does not yet handle generics
        Type type
        if IsInteger()
            type:SetToInteger()
            type:SetIntegerConstant(type:GetIntegerConstant())
        elseif IsBoolean()
            type:SetToBoolean()
            type:SetBooleanConstant(booleanConstant)
        elseif IsNumber()
            type:SetToNumber()
            type:SetNumberConstant(numberConstant)
        elseif IsText()
            type:SetToText()
            type:SetTextConstant(textConstant)
        elseif IsVoid()
            type:SetToVoid()
        else
            type:SetToObject(staticKey)
        end
        type:SetIsConstant(isConstant)
        return type
    end

    /*
        This action adds a generic to this type as a subtype.
    */
    action AddGeneric(Type type)
        generics:Add(type)
    end

    /*
        This action returns whether or not this action has generics.
    */
    action HasGenerics returns boolean
        return not generics:IsEmpty()
    end

    /*

        This action returns a top-level generic at a particular location. If,
        for example, I have:

        T<V<F<I>>, M<Z>>, this action would return the generic M<Z>.
    */
    action GetGeneric(integer location) returns Type
        return generics:Get(location)
    end

    /*
        This action returns all top level generics. Each of these generics
        may have subgenerics.
    */
    action GetGenerics returns Iterator<Type>
        return generics:GetIterator()
    end

    /*
        This action returns the number of top level generics. Nested generics
        are not taken into account by this action. For example, if I had

        T<V>, this would return 1. If I had
        T<V<X>>, this action would still return 1. If I had:
        T<V<X>, V<X>>, this action would return 2.
        
    */
    action GetNumberGenerics returns integer
        return generics:GetSize()
    end

    action GetStaticKey returns text
        return staticKey
    end

    action GetStaticKeyWithGenerics returns text
        text final = staticKey
        boolean first = true

        if HasGenerics()
            final = final + "<"
            Iterator<Type> gen = generics:GetIterator()
            repeat while gen:HasNext()
                Type type = gen:Next()
                if first
                    final = final + type:GetStaticKeyWithGenerics()
                    first = false
                else
                    final = final + ":" + type:GetStaticKeyWithGenerics()
                end
            end
            final = final + ">"
        end
        return final
    end

    action GetBytecodeSize returns integer
        if me:IsNumber()
            return 2
        end
        return 1
    end

    action GetDisplayName returns text
        return staticKey
    end
    
    /* This action returns a constant value representing a known constant
       for this type. If this type is not declared as a constant, this
       action is invalid.
    */
    action GetBooleanConstant returns boolean
        return booleanConstant
    end

    /* This action returns a constant value representing a known constant
       for this type. If this type is not declared as a constant, this
       action is invalid.
    */
    action GetIntegerConstant returns integer
        return integerConstant
    end

    /* This action returns a constant value representing a known constant
       for this type. If this type is not declared as a constant, this
       action is invalid.
    */
    action GetNumberConstant returns number
        return numberConstant
    end

    action GetTextConstant returns text
        return textConstant
    end

    action SetBooleanConstant(boolean value)
        booleanConstant = value
        SetToBoolean()
    end

    action SetIntegerConstant(integer value)
        integerConstant = value
        SetToInteger()
    end

    action SetNumberConstant(number value)
        numberConstant = value
        SetToNumber()
    end

    action SetTextConstant(text value) 
        textConstant = value
        SetToText()
    end

    /* This action returns a constant value representing a known constant
       for this type. If this type is not declared as a constant, this
       action is invalid.
    */
    action IsConstant returns boolean
        return isConstant
    end

    action SetIsConstant(boolean final) 
        isConstant = final
    end

    action IsGeneric returns boolean
        return isGeneric
    end

    action SetIsGeneric(boolean generic) 
        isGeneric = generic
    end

    action IsVoid returns boolean
        return isVoid
    end

    action IsInteger returns boolean
        return isInteger
    end

    action IsBoolean returns boolean
        return isBoolean
    end

    action IsNumber returns boolean
        return isNumber
    end

    action IsPrimitive returns boolean
        if IsInteger() or IsNumber() or IsBoolean() or IsText()
            return true
        end
        return false
    end

    action IsText returns boolean
        return isText
    end

    action IsIntegerObject returns boolean
        return isIntegerObject
    end

    action IsBooleanObject returns boolean
        return isBooleanObject
    end

    action IsNumberObject returns boolean
        return isNumberObject
    end

    action IsTextObject returns boolean
        return isTextObject
    end

    action SetToVoid
        isInteger = false
        isText = false
        isNumber = false
        isBoolean = false
        isVoid = true
        staticKey = VOID_KEY
    end

    action SetToInteger
        isInteger = true
        isText = false
        isNumber = false
        isBoolean = false
        isVoid = false
        isIntegerObject = false
        isTextObject = false
        isNumberObject = false
        isBooleanObject = false
        isPrimitive = true
        staticKey = INTEGER_PRIMITIVE_KEY
    end

    action SetToBoolean
        isInteger = false
        isText = false
        isNumber = false
        isBoolean = true
        isVoid = false
        isIntegerObject = false
        isTextObject = false
        isNumberObject = false
        isBooleanObject = false
        isPrimitive = true
        staticKey = BOOLEAN_PRIMITIVE_KEY
    end

    action SetToNumber
        isInteger = false
        isText = false
        isNumber = true
        isBoolean = false
        isVoid = false
        isIntegerObject = false
        isTextObject = false
        isNumberObject = false
        isBooleanObject = false
        isPrimitive = true
        staticKey = NUMBER_PRIMITIVE_KEY
    end

    action SetToText
        isInteger = false
        isText = true
        isNumber = false
        isBoolean = false
        isVoid = false
        isIntegerObject = false
        isTextObject = false
        isNumberObject = false
        isBooleanObject = false
        isPrimitive = true
        staticKey = TEXT_PRIMITIVE_KEY
    end

    action SetToIntegerObject
        isInteger = false
        isText = false
        isNumber = false
        isBoolean = false
        isVoid = false
        isIntegerObject = true
        isTextObject = false
        isNumberObject = false
        isBooleanObject = false
        isPrimitive = false
        staticKey = INTEGER_OBJECT_KEY
    end

    action SetToBooleanObject
        isInteger = false
        isText = false
        isNumber = false
        isBoolean = false
        isVoid = false
        isIntegerObject = false
        isTextObject = false
        isNumberObject = false
        isBooleanObject = true
        isPrimitive = false
        staticKey = BOOLEAN_OBJECT_KEY
    end

    action SetToNumberObject
        isInteger = false
        isText = false
        isNumber = false
        isBoolean = false
        isVoid = false
        isIntegerObject = false
        isTextObject = false
        isNumberObject = true
        isBooleanObject = false
        isPrimitive = false
        staticKey = NUMBER_OBJECT_KEY
    end

    action SetToTextObject
        isInteger = false
        isText = false
        isNumber = false
        isBoolean = false
        isVoid = false
        isIntegerObject = false
        isTextObject = true
        isNumberObject = false
        isBooleanObject = false
        isPrimitive = false
        staticKey = TEXT_OBJECT_KEY
    end

    action SetToObject(QualifiedName name)
        if name not= undefined
            QualifiedName val = name:Copy()
            objectName = val
            staticKey = val:GetStaticKey()
        end

        isInteger = false
        isText = false
        isNumber = false
        isBoolean = false
        isVoid = false
        isIntegerObject = false
        isTextObject = true
        isNumberObject = false
        isBooleanObject = false
        isPrimitive = false
    end

    action SetToObject(text name)
        if not(name = undefined)
            staticKey = name
        end

        isInteger = false
        isText = false
        isNumber = false
        isBoolean = false
        isVoid = false
        isIntegerObject = false
        isTextObject = true
        isNumberObject = false
        isBooleanObject = false
        isPrimitive = false
    end

    action SetToObject(Class clazz)
        key = clazz:GetStaticKey()
        SetToObject(key)
    end

    /*
        This action changes this type to represent a generic, with the given
        name that is currently its static key. 
    */ 
    action SetToGeneric
        genericName = staticKey
        staticKey = OBJECT_KEY
    end

    action ConvertTypeToBytecodeSignature returns text
        if IsBoolean()
            return "Z"
        elseif IsText()
            return "Ljava/lang/String;"
        elseif IsNumber()
            return "D"
        elseif IsInteger()
            return "I"
        elseif IsVoid()
            return "V"
        else //it is an object, so return its interface type
            return "L" + ConvertStaticKeyToBytecodePath() + ";"
        end
    end

    action ConvertTypeToBytecodeSignatureInterface returns text
        if IsBoolean()
            return "Z"
        elseif IsText()
            return "Ljava/lang/String;"
        elseif IsNumber()
            return "D"
        elseif IsInteger()
            return "I"
        elseif IsVoid()
            return "V"
        else //it is an object, so return its interface type
            return "L" + ConvertStaticKeyToBytecodePath() + "$Interface;"
        end
    end

    action ConvertToSignatureFromField(boolean isGetter) returns text
        text result = ""
        if isGetter
            result = result +  "()" + ConvertTypeToBytecodeSignatureInterface()
        else
            result = result + "(" + ConvertTypeToBytecodeSignatureInterface() + ")V"
        end

        return result
    end

    private action ConvertStaticKeyToBytecodePath() returns text
        text key = GetStaticKey()
        text result = "quorum/" + key:Replace(".", "/")
        return result
    end
end