package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type
use Libraries.Containers.List
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Symbol.Action
use Libraries.Language.Compile.Symbol.Class
use Libraries.Language.Compile.Symbol.Variable
use Libraries.Language.Compile.Translate.JavaBytecodeOpcodes

class ActionOpcode is QuorumOpcode
    List<QuorumOpcode> opcodeList
    Action method = undefined
    Class clazz = undefined
    JavaBytecodeOpcodes opcodes

    action SetMethodWriterToAllChildren(JavaBytecodeMethodWriter writer)
        SetMethodWriter(writer)
        //no need to write to children, because this can't be called in a constructor
    end

    action GetAction returns Action
        return method
    end

    action SetAction(Action method)
        me:method = method
    end

    action GetClass returns Class
        return clazz
    end

    action SetClass(Class clazz)
        me:clazz = clazz
    end

    action Write
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()

        if method:IsSystem()
            methodWriter:VisitCode()
            methodWriter:VisitVariable(opcodes:GetObjectLoad(), 0)
            methodWriter:VisitField(opcodes:GetField(), clazz:ConvertStaticKeyToBytecodePath(),
                clazz:GetPluginName(), clazz:ConvertStaticKeyToPluginPathTypeName())

            Iterator<Variable> parameters = method:GetParameterIterator()
            integer position = 1
            repeat while parameters:HasNext()
                Variable param = parameters:Next()
                Type type = param:GetType()
                methodWriter:VisitVariable(opcodes:GetLoadOpcode(type), position)
                position = position + type:GetBytecodeSize()
            end

            methodWriter:VisitMethodInvoke(opcodes:GetInvokeVirtual(), 
                clazz:ConvertStaticKeyToPluginPath(), method:GetName(), 
                method:ConvertActionToBytecodeParameterInterfaceSignature(), false)

            methodWriter:VisitInstruction(opcodes:GetReturnOpcode(method:GetReturnType()))
        else 
            methodWriter:VisitCode()
            Iterator<QuorumOpcode> iterator = opcodeList:GetIterator()
            repeat while iterator:HasNext()
                QuorumOpcode opcode = iterator:Next()
                opcode:Write()
            end

            Type type = method:GetReturnType()

            if type:IsBoolean()
                methodWriter:VisitInstruction(opcodes:GetBooleanReturn())
            elseif type:IsInteger()
                methodWriter:VisitInstruction(opcodes:GetIntegerReturn())
            elseif type:IsNumber()
                methodWriter:VisitInstruction(opcodes:GetDoubleReturn())
            elseif type:IsText()
                methodWriter:VisitInstruction(opcodes:GetObjectReturn())
            elseif type:IsVoid()
                methodWriter:VisitInstruction(opcodes:GetReturn())
            else //assume it is an object otherwise
                methodWriter:VisitInstruction(opcodes:GetObjectReturn())
            end
        end

        methodWriter:VisitMaxSize(0,0)
        methodWriter:VisitEnd()
    end

    action WriteJavaScript returns text
        text result = "function " + method:GetName() + "() {
"
        
        Iterator<QuorumOpcode> iterator = opcodeList:GetIterator()
        repeat while iterator:HasNext()
            QuorumOpcode opcode = iterator:Next()
            result = result + opcode:WriteJavaScript()
        end

        result = result + "}

"

        return result
    end

    action GetTemplateCopy returns QuorumOpcode
        ActionOpcode op
        return op
    end

    action Add(QuorumOpcode opcode)
        opcodeList:Add(opcode)
    end
end