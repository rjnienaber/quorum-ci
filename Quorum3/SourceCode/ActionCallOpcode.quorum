package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type
use Libraries.Language.Compile.Symbol.ActionCallResolution
use Libraries.Language.Compile.Symbol.Action
use Libraries.Language.Compile.Symbol.Class

class ActionCallOpcode is QuorumOpcode
    QuorumOpcode rightHandSide = undefined
    integer bytecodeLocation = -1
    JavaBytecodeOpcodes opcodes
    boolean isActionCall = false
    ActionCallResolution actionResolution = undefined
    boolean pushOnMe = false

    action GetPushOnMe returns boolean
        return pushOnMe
    end

    action SetPushOnMe(boolean this)
        pushOnMe = this
    end


    action SetMethodWriterToAllChildren(JavaBytecodeMethodWriter writer)
        SetMethodWriter(writer)
        rightHandSide:SetMethodWriterToAllChildren(writer)
    end

    action GetActionCallResolution returns ActionCallResolution
        return actionResolution
    end

    action SetActionCallResolution(ActionCallResolution resolution)
        actionResolution = resolution
        Action act = actionResolution:resolvedAction
        Type returnType = act:GetReturnType()
        me:SetType(returnType)
    end

    action IsActionCall returns boolean
        return isActionCall
    end

    action SetIsActionCall(boolean act)
        isActionCall = act
    end

    action GetBytecodeLocation returns integer
        return bytecodeLocation
    end

    action SetBytecodeLocation(integer location)
        bytecodeLocation = location
    end

    action Write //TODO: make this work for action calls and fields
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        if isActionCall
            //if there's a variable, load it.
            //this isn't right, but load "THIS" onto the stack for testing
            if pushOnMe
                methodWriter:VisitVariable(opcodes:GetObjectLoad(), 0)
            end

            //actual plan - push on variables, if necessary

            //push on parameters, if necessary


            Action act = actionResolution:resolvedAction
            Class clazz = act:GetParentClass()
            if act not= undefined and clazz not= undefined
                methodWriter:VisitMethodInvoke(opcodes:GetInvokeVirtual(), 
                    clazz:ConvertStaticKeyToBytecodePath(), act:GetName(), 
                    act:ConvertActionToBytecodeParameterInterfaceSignature(), false)
            end
        else
            if GetType() not= undefined
                methodWriter:VisitVariable(opcodes:ConvertTypeToBytecodeLoadOpcode(GetType()), bytecodeLocation)
            end
        end
    end

    action WriteJavaScript returns text 
        return ""
    end

    action GetTemplateCopy returns QuorumOpcode
        ActionCallOpcode op
        Type t = GetType()
        me:SetType(t:Copy())
        return op
    end
end