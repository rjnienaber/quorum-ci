package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type

class ConditionalOpcode is QuorumOpcode
    QuorumOpcode expression = undefined
    BlockOpcode block = undefined
    integer whichIf = 0
    JavaBytecodeLabel endLabel = undefined
    JavaBytecodeMethodWriter methodWriter = undefined
    JavaBytecodeOpcodes opcodes

    action GetMethodWriter returns JavaBytecodeMethodWriter
        return methodWriter
    end

    action SetMethodWriter(JavaBytecodeMethodWriter writer)
        methodWriter = writer
    end

    action GetNewLabel returns JavaBytecodeLabel
        JavaBytecodeLabel label
        return label
    end

    action GetIfLabelInteger returns integer
        return whichIf
    end

    action SetIfLabelInteger(integer value)
        whichIf = value
    end

    action GetExpression returns QuorumOpcode
        return expression
    end

    action SetExpression(QuorumOpcode op)
        expression = op
    end

    action GetBlock returns BlockOpcode
        return block
    end

    action SetBlock(BlockOpcode op)
        block = op
    end

    action Write
        expression:Write()
        endLabel = GetNewLabel()

        if expression is BinaryOpcode
            BinaryOpcode bop = cast(BinaryOpcode, expression)
            methodWriter:VisitJump(bop:GetJavaOpcode(), endLabel)
        else 
            methodWriter:VisitJump(opcodes:GetIfEquals(), endLabel)
        end
        block:Write()
        methodWriter:VisitLabel(endLabel)

        //if there are else if statements, put them here.


        //if there is an else block, put it here

    end

    action WriteJavaScript returns text
        return ""
    end

    action GetTemplateCopy returns QuorumOpcode
        ConditionalOpcode copy

        return copy
    end
end