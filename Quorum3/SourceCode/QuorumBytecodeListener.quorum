package Libraries.Language.Compile

use Libraries.Language.Compile.Context.all
use Libraries.Language.Compile.Translate.JavaBytecodeClassWriter
use Libraries.Language.Compile.Translate.JavaBytecodeMethodWriter
use Libraries.Language.Compile.Translate.QuorumBytecodeConverter
use Libraries.Language.Compile.Translate.JavaBytecodeOpcodes
use Libraries.Language.Compile.Symbol.all
use Libraries.Language.Compile.Translate.all

use Libraries.Containers.Array
use Libraries.System.File
use Libraries.Containers.Stack

class QuorumBytecodeListener is QuorumSourceListener 
    QualifiedName packageValue = undefined
    JavaBytecodeClassWriter classWriter = undefined
    JavaBytecodeClassWriter interfaceWriter = undefined
    JavaBytecodeMethodWriter methodWriter = undefined
    QuorumBytecodeConverter converter
    JavaBytecodeOpcodes opcodes
    Action currentAction = undefined
    Class currentClass = undefined
    Block currentBlock = undefined
    constant integer ME = 0
    text build = "TestBuild"
    text run = "TestRun"
    constant text QUORUM = "quorum"

    constant text JAVA_THROWABLE = "java/lang/Throwable"
    constant text JAVA_OBJECT = "java/lang/Object"
    constant text QUORUM_ERROR = "quorum/Libraries/Language/Errors/Error"
    boolean isNormalAction = false
    boolean isSystemAction = false
    boolean isBluePrintAction = false
    boolean isNextVariableReferenceMe = false
    //Stack<QuorumOpcode> expressionStack
    Stack<QuorumOpcode> opcodeStack
    File buildFile = undefined
    File buildInterfaceFile = undefined

    action GetBuildFile returns File
        return buildFile
    end

    action GetBuildInterfaceFile returns File
        return buildInterfaceFile
    end
    
    private action SetNormalAction 
        isNormalAction = true
        isSystemAction = false
        isBluePrintAction = false
    end

    private action SetSystemAction 
        isNormalAction = false
        isSystemAction = true
        isBluePrintAction = false
    end

    private action SetBlueprintAction 
        isNormalAction = false
        isSystemAction = false
        isBluePrintAction = true
    end

    private action ClearActionState
        isNormalAction = false
        isSystemAction = false
        isBluePrintAction = false
    end

    action ExitPackageRule(PackageContext context) 
        packageValue = context:name
    end

    action EnterFullClassDeclaration(FullClassDeclarationContext context) 
        JavaBytecodeClassWriter newClassWriter
        JavaBytecodeClassWriter newIinterfaceWriter

        classWriter = newClassWriter
        interfaceWriter = newIinterfaceWriter

        text name = context:className
        SymbolTable table = me:GetSymbolTable()
        
        text staticKey = ""
        if packageValue = undefined
            QualifiedName default
            packageValue = default
        end
        staticKey = packageValue:GetClassStaticKey(name)
        currentClass = table:GetClass(staticKey)


        integer version = opcodes:GetJavaVersion(7)
        integer access = opcodes:GetPublic() + opcodes:GetSuper()
        text interfaceName = converter:ConvertClassNameToInterfaceName(name)
        Array<text> interfaces
        //interfaces:Add(interfaceName)
        text null = undefined //temporary workaround for Bug#97 https://quorum.atlassian.net/browse/QUOR-97
        //once fully integrated, check if this is a the Quorum error class or a subclass. For now, just weave in Object.
        classWriter:Visit(version, access, converter:ConvertStaticKeyToBytecodePath(staticKey), null, JAVA_OBJECT, interfaces)
    end


    action ExitFullClassDeclaration(FullClassDeclarationContext context) 
        if currentClass not= undefined
            ComputeConstructor(true)
            ComputeConstructor(false)
            classWriter:VisitEnd()
            File classFile
            text path = build + "/" + QUORUM + "/" + packageValue:GetPath() 
            classFile:SetPath(path)
            classFile:CreateDirectories()
            classFile:SetPath(path + "/" + currentClass:GetName() + ".class")
            classWriter:Write(classFile)

            buildFile = classFile

            interfaceWriter:VisitEnd()
            File interfaceFile
            path = build + "/" + QUORUM + "/" + packageValue:GetPath()
            
            interfaceFile:SetPath(path + "/" + currentClass:GetName() + "$Interface.class")
            interfaceWriter:Write(interfaceFile)

            buildInterfaceFile = interfaceFile
        end
    end

    action ComputeConstructor(boolean isParent)
        
        //integer numSystem = currentClass:getNumberSystemActions()
        text staticKey = currentClass:GetStaticKey()
        text name = converter:ConvertStaticKeyToBytecodePath(staticKey)

        text signature = ""
        if isParent
            signature = "()V"
        else
            signature = "(Z)V"
        end


        //call the class's initialization function
        text null = undefined
        methodWriter = classWriter:VisitMethod(opcodes:GetPublic(), "<init>", signature, null, undefined)
        methodWriter:VisitCode()
        methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
        methodWriter:VisitMethodInvoke(opcodes:GetInvokeSpecial(), "java/lang/Object", "<init>", "()V", false)




        methodWriter:VisitInstruction(opcodes:GetReturn())
        methodWriter:VisitMaxSize(1, 1)
        methodWriter:VisitEnd()
    end

    action ExitActionHeader(ActionContext context)
        if currentClass not= undefined
            //get the method name
            text key = context:GetStaticKey()
            Action method = currentClass:GetAction(key)
            currentAction = method
            boolean isMain = method:IsMain()

            if isMain
                WriteMain(method)
            end
            text null = undefined
            text name = context:actionName
            text params = converter:ConvertActionToBytecodeParameterSignature(method)
            methodWriter = 
                classWriter:VisitMethod(opcodes:GetPublic(), 
                name, params, null, undefined)
            //addParametersAsVariables(method.getMethodDescriptor());
            methodWriter:VisitCode()
        end
    end

    action WriteMain(Action method)
        //make a new method, if it exists. 
        text null = undefined
        methodWriter = 
        classWriter:VisitMethod(opcodes:GetPublic() + opcodes:GetStatic(), 
            "main", "([Ljava/lang/String;)V", null, undefined)

        text key = currentClass:GetStaticKey()
        text bytecode = converter:ConvertStaticKeyToBytecodePath(key)

        //create the new object and place it on the stack
        methodWriter:VisitType(opcodes:GetNew(), bytecode)
        methodWriter:VisitInstruction(opcodes:GetDuplicate())
        methodWriter:VisitMethodInvoke(opcodes:GetInvokeSpecial(), bytecode, "<init>", "()V", false)

        //store it in a variable and load it back on the stack
        methodWriter:VisitVariable(opcodes:GetObjectStore(), 1)
        methodWriter:VisitVariable(opcodes:GetObjectLoad(), 1)

        //call a method on the object, its non-static main
        methodWriter:VisitMethodInvoke(opcodes:GetInvokeVirtual(), bytecode,
            method:GetName(), converter:ConvertActionToBytecodeParameterSignature(method), false)

        //close out the main method
        methodWriter:VisitInstruction(opcodes:GetReturn())
        methodWriter:VisitMaxSize(2,2)
        methodWriter:VisitEnd()
    end

    action EnterAction(ActionContext context) 
        SetNormalAction()
    end

    action ExitAction(ActionContext context) 
        ClearActionState()

        if methodWriter not= undefined
            if currentClass not= undefined
                //get the method name
                text key = context:GetStaticKey()
                Action method = currentClass:GetAction(key)
                Type type = method:GetReturnType()

                if type:IsBoolean()
                    methodWriter:VisitInstruction(opcodes:GetBooleanReturn())
                elseif type:IsInteger()
                    methodWriter:VisitInstruction(opcodes:GetIntegerReturn())
                elseif type:IsNumber()
                    methodWriter:VisitInstruction(opcodes:GetDoubleReturn())
                elseif type:IsText()
                    methodWriter:VisitInstruction(opcodes:GetObjectReturn())
                elseif type:IsVoid()
                    methodWriter:VisitInstruction(opcodes:GetReturn())
                else //assume it is an object otherwise
                    methodWriter:VisitInstruction(opcodes:GetObjectReturn())
                end
            end
            
            methodWriter:VisitMaxSize(1,1)
            methodWriter:VisitEnd()
            methodWriter = undefined
        end
    end
    
    //output
    action EnterPrintStatement 
        methodWriter:VisitField(opcodes:GetStaticField(), "java/lang/System", "out", "Ljava/io/PrintStream;")
    end

    action ExitPrintStatement 
        QuorumOpcode op = opcodeStack:Pop()
        Type type = op:GetType()
        op:Write()
        methodWriter:VisitMethodInvoke(opcodes:GetInvokeVirtual(), "java/io/PrintStream", "println",
                "(" + converter:ConvertTypeToBytecodeSignature(type) + ")V", false)
    end

    action EnterBlock
        if currentBlock = undefined
            currentBlock = currentAction:GetBlock()
        end
    end
    
    action ExitBlock
        if currentBlock not= undefined
            currentBlock = currentBlock:GetParentBlock() //may be undefined
        end
    end

    action ExitNormalAssignment(NormalAssignmentContext context) 
        text name = context:name
        Variable variable = undefined
        if context:isField
            variable = currentClass:GetVariable(name)
            //write the field


        else 
            variable = currentBlock:GetVariable(name)
            Type left = variable:GetType()
            QuorumOpcode right = opcodeStack:Pop()

            Operation assign
            assign:SetOperation(assign:EQUALS)

            TypeChecker checker = GetTypeChecker()
            TypeCheckResult result = checker:Check(left, right:GetType(), undefined, true) 

            right:Write()
            //write the local variable, which is guaranteed at this stage not null
            integer location = variable:GetBytecodeLocation()
            JavaOpcodeWriter writer = result:writer
            writer:Write(methodWriter, location)
        end
    end

    action ExitNoTypeAssignment(NoTypeAssignmentContext context) 

        text name = context:name
        Variable variable = undefined

        if context:hasMe or context:isField
            variable = currentClass:GetVariable(name)
            //write the field


        else 
            variable = currentBlock:GetVariable(name)
            Type left = variable:GetType()
            QuorumOpcode right = opcodeStack:Pop()

            Operation assign
            assign:SetOperation(assign:EQUALS)

            TypeChecker checker = GetTypeChecker()
            TypeCheckResult result = checker:Check(left, right:GetType(), undefined, true) 

            //write the local variable, guaranteed at this stage not be null
            integer location = variable:GetBytecodeLocation()
            //temporary --- replace with actual opcode output
            JavaOpcodeWriter writer = result:writer
            writer:Write(methodWriter, location)
            //methodWriter:VisitVariable(opcodes:GetIntegerStore(),location)
            
        end
        //methodVisitor.visitVarInsn(QuorumConverter.getStoreOpcode(valueType), mappedVariableNumber);
    end

    
    action EnterVariableFunctionCall(VariableFunctionCallContext context) 
        isNextVariableReferenceMe = context:hasMe
    end
    action ExitVariableFunctionCall(VariableFunctionCallContext context) 
        isNextVariableReferenceMe = false
    end

    action EnterParentVariableFunctionCall(ParentVariableFunctionCallContext context)
        a =5
    end
    action ExitParentVariableFunctionCall(ParentVariableFunctionCallContext context)
        a =5
    end

    action EnterActionCall(ActionCallContext context)
        if context:isActionCall //push the "this" pointer
            PushThis()
        else //push the variable
            name = context:name
            Variable variable = undefined
            
            if isNextVariableReferenceMe
                variable = currentClass:GetVariable(name)
            else 
                variable = currentBlock:GetVariable(name)
                isNextVariableReferenceMe = false
            end

            Type type = variable:GetType()
            if variable:IsField()

            else //it's a local
                methodWriter:VisitVariable(opcodes:ConvertTypeToBytecodeLoadOpcode(type), variable:GetBytecodeLocation())
            end
            BlankOpcode op
            op:SetType(type:Copy())
            opcodeStack:Push(op)
            //expressionStack:Push(type:Copy())
        end
    end

    action ExitActionCall(ActionCallContext context)
        a =5
    end

    action EnterParentCall(ParentCallContext context)
        a =5
    end
    action ExitParentCall(ParentCallContext context)
        a =5
    end

    action PushThis

    end

    action ExitEquals (EqualsContext context)
//        TypeChecker checker = GetTypeChecker()
//        Type right = expressionStack:Pop()
//        Type left = expressionStack:Pop()
//        Operation add
//        add:SetOperation(add:EQUALS)
//        
//        TypeCheckResult result = checker:Check(left, right, add) 
//        JavaOpcodeWriter opcodeWriter = result:writer
//        opcodeWriter:WriteComparison(methodWriter)
//        Type value = result:result
//        expressionStack:Push(value:Copy())

    end

    action EnterAnd end
    action ExitAnd 
        TypeChecker checker = GetTypeChecker()
        QuorumOpcode right = opcodeStack:Pop()
        QuorumOpcode left = opcodeStack:Pop()
        Operation op
        op:SetOperation(op:AND)
        
        TypeCheckResult result = checker:Check(left:GetType(), right:GetType(), op) 
        JavaOpcodeWriter opcodeWriter = result:writer
        Type value = result:result
        BinaryAndOrOpcode binary
        binary:methodWriter = methodWriter
        binary:SetType(value)
        binary:left = left
        binary:right = right
        binary:opcodeWriter = opcodeWriter

        if left is BinaryAndOrOpcode
            BinaryAndOrOpcode theAnd = cast(BinaryAndOrOpcode, left)
            theAnd:hasRightAndOr = true
            theAnd:SetFalseLabel(binary:GetFalseLabel())
            theAnd:SetFinalLabel(binary:GetFinalLabel())
        end

        if right is BinaryAndOrOpcode
            BinaryAndOrOpcode theAnd = cast(BinaryAndOrOpcode, right)
            theAnd:hasRightAndOr = true
            theAnd:SetFalseLabel(binary:GetFalseLabel())
            theAnd:SetFinalLabel(binary:GetFinalLabel())
        end

        opcodeStack:Push(binary)
    end

    action EnterOr end
    action ExitOr end

    action ExitAddition(Addition addition) 
        TypeChecker checker = GetTypeChecker()
        QuorumOpcode right = opcodeStack:Pop()
        QuorumOpcode left = opcodeStack:Pop()
        Operation add
        add:SetOperation(add:PLUS)
        
        TypeCheckResult result = checker:Check(left:GetType(), right:GetType(), add) 
        JavaOpcodeWriter opcodeWriter = result:writer

        Type value = result:result
        BinaryOpcode binary
        binary:methodWriter = methodWriter
        binary:SetType(value)
        binary:left = left
        binary:right = right
        binary:opcodeWriter = opcodeWriter
        opcodeStack:Push(binary)
    end

    action ExitInteger(IntegerContext context) 
        Type type
        type:SetIsConstant(true)
        type:SetIntegerConstant(context:value)
        //expressionStack:Push(type)

        QuorumConstant const
        const:methodWriter = methodWriter
        const:SetType(type)
        const:integerValue = context:value
        opcodeStack:Push(const)
        //methodWriter:VisitConstant(context:value)
    end
    
    action ExitText(TextContext context) 
        Type type
        type:SetIsConstant(true)
        type:SetTextConstant(context:value)
        //expressionStack:Push(type)

        QuorumConstant const
        const:methodWriter = methodWriter
        const:SetType(type)
        const:textValue = context:value
        opcodeStack:Push(const)
        //methodWriter:VisitConstant(context:value)
    end

    action ExitBoolean(BooleanContext context) 
        Type type
        type:SetIsConstant(true)
        type:SetBooleanConstant(context:value)
        //expressionStack:Push(type)

        QuorumConstant const
        const:methodWriter = methodWriter
        const:SetType(type)
        const:booleanValue = context:value
        opcodeStack:Push(const)
        //methodWriter:VisitConstant(context:value)
    end

    action ExitNumber(NumberContext context) 
        Type type
        type:SetIsConstant(true)
        type:SetNumberConstant(context:value)
        //expressionStack:Push(type)

        QuorumConstant const
        const:methodWriter = methodWriter
        const:SetType(type)
        const:numberValue = context:value
        opcodeStack:Push(const)

       // methodWriter:VisitConstant(context:value)
    end
end