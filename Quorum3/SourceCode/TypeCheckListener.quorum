package Libraries.Language.Compile

use Libraries.Language.Compile.Context.all
use Libraries.Containers.Stack
use Libraries.Language.Compile.Symbol.all
use Libraries.System.File
use Libraries.Containers.List
use Libraries.Containers.Blueprints.Iterator

class TypeCheckListener is QuorumSourceListener
    QualifiedName packageValue = undefined
    Action currentAction = undefined
    Class currentClass = undefined
    Block currentBlock = undefined
    Stack<Block> blocks
    Stack<Type> expressionStack

    action ExitPackageRule(PackageContext context) 
        packageValue = context:name
    end

    action EnterFullClassDeclaration(FullClassDeclarationContext context) 
        text name = context:className
        SymbolTable table = me:GetSymbolTable()
        
        text staticKey = ""
        if packageValue = undefined
            QualifiedName default
            packageValue = default
        end
        staticKey = packageValue:GetClassStaticKey(name)
        currentClass = table:GetClass(staticKey)

        if currentClass = undefined //throw an error
            Location location = context:GetLocation()
            CompilerError error
            error:SetLineNumber(location:GetLineNumber())
            error:SetFile(location:GetFile())
            error:SetErrorMessage("Class " + context:className + " could not be found.")
            CompilerErrorManager manager = GetCompilerErrorManager()
            manager:Add(error)
        end
    end

    action ExitActionHeader(ActionContext context)
        if currentClass not= undefined
            //get the method name
            text key = context:GetStaticKey()
            Action method = currentClass:GetAction(key)
            currentAction = method

            if currentAction = undefined //throw an error
                Location location = context:GetLocation()
                CompilerError error
                error:SetLineNumber(location:GetLineNumber())
                error:SetFile(location:GetFile())
                error:SetErrorMessage("Action " + key + " could not be found.")
                CompilerErrorManager manager = GetCompilerErrorManager()
                manager:Add(error)
            end
        end
    end

    action EnterBlock(BlockContext context)
        if currentBlock = undefined
            currentBlock = currentAction:GetBlock()
        end
        blocks:Push(currentBlock)
    end
    
    action ExitBlock(BlockContext context)
        if not blocks:IsEmpty()
            currentBlock = blocks:Pop()
        else 
            currentBlock = undefined
        end
    end

    action ExitAction(ActionContext context) 
        currentAction = undefined
    end

    action ExitNormalAssignment(NormalAssignmentContext context) 
        text name = context:name
        Variable variable = undefined

        if context:isField
            variable = currentClass:GetVariable(name)
        else 
            variable = currentBlock:GetVariable(name)
        end
        
        if variable = undefined
            Location location = context:GetLocation()
            CompilerError error
            error:SetLineNumber(location:GetLineNumber())
            error:SetFile(location:GetFile())
            error:SetErrorMessage("Variable " + context:name + " could not be found.")
            CompilerErrorManager manager = GetCompilerErrorManager()
            manager:Add(error)
            return now
        end

        if not expressionStack:IsEmpty() //ignore the operation, a compiler should have already been issued
            Type right = expressionStack:Pop()
            integer bytecodeSize = right:GetBytecodeSize()

            if not context:isField
                currentBlock:SetByteCodeLocation(variable)
            end

            TypeChecker checker = GetTypeChecker()
            TypeCheckResult result = checker:Check(variable:GetType(), right, undefined, true) 
            CompilerError error = result:GetCompilerError(context:GetLocation())
            if error not= undefined
                CompilerErrorManager manager = GetCompilerErrorManager()
                manager:Add(error)
                return now
            end

            expressionStack:Push(result:result)
        end
    end

    action ExitNoTypeAssignment(NoTypeAssignmentContext context) 
        text name = context:name
        Variable variable = undefined

        if context:hasMe or context:isField
            variable = currentClass:GetVariable(name)
        else 
            variable = currentBlock:GetVariable(name)
        end
        
        if variable = undefined
            Location location = context:GetLocation()
            CompilerError error
            error:SetLineNumber(location:GetLineNumber())
            error:SetFile(location:GetFile())
            error:SetErrorMessage("Variable " + context:name + " could not be found.")
            CompilerErrorManager manager = GetCompilerErrorManager()
            manager:Add(error)
            return now
        end

        Type type = expressionStack:Pop()
        integer bytecodeSize = type:GetBytecodeSize()
        if variable:IsDefined() //this is another assignment, not the initial one
            //ask the type checker if this assignment is legal
        else //this is an implicit cast, so make sure if follows the rules
            if variable:GetType() = undefined //implicit cast. If it follows the rules, allow it
                variable:SetType(type)
            end
            if not context:hasMe and not context:isField
                currentBlock:SetByteCodeLocation(variable)
            end
        end
    end

    action ExitEquals(EqualsContext context)
        TypeChecker checker = GetTypeChecker()
        Type right = expressionStack:Pop()
        Type left = expressionStack:Pop()
        Operation add
        add:SetOperation(add:EQUALS)
        
        TypeCheckResult result = checker:Check(left, right, add)

//        CompilerError error = result:GetCompilerError(addition:GetLocation())
//        if error not= undefined
//            CompilerErrorManager manager = GetCompilerErrorManager()
//            manager:Add(error)
//            return now
//        end

        Type value = result:result
        expressionStack:Push(value:Copy())
    end

    action ExitAddition(AdditionContext context) 
        TypeChecker checker = GetTypeChecker()
        Type right = expressionStack:Pop()
        Type left = expressionStack:Pop()
        Operation add
        add:SetOperation(add:PLUS)
        
        TypeCheckResult result = checker:Check(left, right, add) 
        CompilerError error = result:GetCompilerError(context:GetLocation())
        if error not= undefined
            CompilerErrorManager manager = GetCompilerErrorManager()
            manager:Add(error)
            return now
        end

        expressionStack:Push(result:result)
    end

    action ExitInteger(IntegerContext context) 
        Type type
        type:SetIsConstant(true)
        type:SetIntegerConstant(context:value)
        expressionStack:Push(type)
    end
    
    action ExitText(TextContext context) 
        Type type
        type:SetIsConstant(true)
        type:SetTextConstant(context:value)
        expressionStack:Push(type)
    end

    action ExitBoolean(BooleanContext context) 
        Type type
        type:SetIsConstant(true)
        type:SetBooleanConstant(context:value)
        expressionStack:Push(type)
    end

    action ExitNumber(NumberContext context) 
        Type type
        type:SetIsConstant(true)
        type:SetNumberConstant(context:value)
        expressionStack:Push(type)
    end
end