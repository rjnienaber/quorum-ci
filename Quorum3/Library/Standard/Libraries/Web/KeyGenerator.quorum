package Libraries.Web

use Libraries.Web.WebTag
use Libraries.Web.Attribute
use Libraries.Web.Attributes

/*
The KeyGenerator class represents HTML's (Hypertext Markup Language) keygen tag which is
used to make a key-pair generator for forms. When the form is submitted two keys 
are created. One key, the private key, is stored locally while the other key, the 
public key is sent to the server.
You can find more information about this tag at: 
        <a href="http://www.w3schools.com/tags/tag_keygen.asp">The keygen attribute</a>.

Attribute: Example
use Libraries.Web.all
class Main
   action main
      WebPage page
      
      KeyGenerator keyGen
      keyGen:SetName("secure")
      page:AddToBody(keyGen)
      
      output page:Generate()
   end
end
*/
class KeyGenerator is WebTag
    constant text autofocus = "autofocus"
    constant text challenge = "challenge"
    constant text disabled = "disabled"
    constant text formId = "form"
    constant text keyType = "keytype"
    constant text name = "name"

    public constant text rsaKeyType = "rsa"
    public constant text dsaKeyType = "dsa"
    public constant text ecKeyType = "ec"

    /*
        This action returns true if the KeyGenerator should automatically get 
        focus as the page loads.

        Attribute: Returns This returns true if KeyGenerator automatically gets 
        focus.

        Attribute: Example
        use Libraries.Web.all

        KeyGenerator keyGen
        boolean autoFocus = keyGen:GetAutoFocus()
    */
     action GetAutoFocus returns boolean
        Attribute isAutoFocus = GetAttribute(autofocus)
        if isAutoFocus not= undefined
            return isAutoFocus:GetValue() = autofocus
        end
        return false
    end

    /*
        This action should be set to true if the KeyGenerator should automatically get 
        focus as the page loads.

        Attribute: Example
        use Libraries.Web.all

        KeyGenerator keyGen
        keyGen:SetAutoFocus(true)
    */
    action SetAutoFocus(boolean value)
        if value
            AddAttribute(autofocus, autofocus)
        else
            RemoveAttribute(autofocus)
        end
    end

    /*
        This action gets the string that will be used if the KeyGenerator is 
        challenged.

        Attribute: Returns The string used for challenge 

        Attribute: Example
        use Libraries.Web.KeyGenerator
        use Libraries.Web.Attribute

        KeyGenerator keyGen
        Attribute challengeValue = keyGen:GetChallenge()
        if challengeValue not= undefined
            text challenge = challengeValue:GetValue()
        end
    */
    action GetChallenge returns Attribute
        return me:GetAttribute(challenge)
    end

    /*
        This action sets text used if the KeyGenerator is challenged.

        Attribute: Example
        use Libraries.Web.KeyGenerator
        use Libraries.Web.Attribute

        KeyGenerator keyGen
        keyGen:SetChallenge("challenge")
    */
    action SetChallenge(text value)
        AddAttribute(challenge, value)
    end

    /*
        This action returns true if the KeyGenerator should be disabled.

        Attribute: Returns This returns true should be disabled.

        Attribute: Example
        use Libraries.Web.all

        KeyGenerator keyGen
        boolean isDisabled = keyGen:GetDisabled()
    */
    action GetDisabled returns boolean
        Attribute isDisabled = GetAttribute(disabled)
        if isDisabled not= undefined
            return isDisabled:GetValue() = disabled
        end
        return false
    end

    /*
        This action should be set to true if the KeyGenerator should be disabled.

        Attribute: Example
        use Libraries.Web.all

        KeyGenerator keyGen
        keyGen:SetDisabled(true)
    */
    action SetDisabled(boolean value)
        if value
            AddAttribute(disabled, disabled)
        else
            RemoveAttribute(disabled)
        end
    end

    /*
        This action gets form id attribute for the form that the KeyGenerator is 
        set to.

        Attribute: Returns The form id for form the KeyGenerator is connected to. 

        Attribute: Example
        use Libraries.Web.KeyGenerator
        use Libraries.Web.Attribute

        KeyGenerator keyGen
        Attribute formIdValue = keyGen:GetFormId()
        if formIdValue not= undefined
            text formId = formIdValue:GetValue()
        end
    */
    action GetFormId returns Attribute
        return me:GetAttribute(formId)
    end

    /*
        This action sets the form id that the KeyGenerator will be connected to.

        Attribute: Example
        use Libraries.Web.KeyGenerator
        use Libraries.Web.Attribute

        KeyGenerator keyGen
        keyGen:SetFormId("aForm")
    */
    action SetFormId(text value)
        AddAttribute(formId, value)
    end

    /*
        This action gets key type algorithm that will be used to generate the key.

        Attribute: Returns The key type algorithm that will be used.

        Attribute: Example
        use Libraries.Web.KeyGenerator
        use Libraries.Web.Attribute

        KeyGenerator keyGen
        Attribute keyTypeValue = keyGen:GetKeyType()
        if keyTypeValue not= undefined
            text keyType = keyTypeValue:GetValue()
        end
    */
    action GetKeyType returns Attribute
        return me:GetAttribute(keyType)
    end

    /*
        This action sets key type algorithm that will be used to generate the key.

        Attribute: Example
        use Libraries.Web.KeyGenerator
        use Libraries.Web.Attribute

        KeyGenerator keyGen
        keyGen:SetFormId(keyGen:rsaKeyType)
    */
    action SetKeyType(text value)
        AddAttribute(keyType, value)
    end
   
    /*
        This action gets the name attribute of the KeyGenerator. the value of the name
        is stored in the value of the name attribute.

        Attribute: Returns The name attribute.

        Attribute: Example
        use Libraries.Web.KeyGenerator
        use Libraries.Web.Attribute

        KeyGenerator keyGen
        Attribute keyGenNameValue = keyGen:GetName()
        if keyGenNameValue not= undefined
           text name = keyGenNameValue:GetValue()
        end
    */
    action GetName returns Attribute
        return me:GetAttribute(name)
    end

    /*
        This action sets the name attribute of the KeyGenerator.

        Attribute: Parameter value The name attribute. 

        Attribute: Example
        use Libraries.Web.KeyGenerator
        use Libraries.Web.Attribute

        KeyGenerator keyGen
        keyGen:SetName("name")
    */
   action SetName(text value)
        AddAttribute(name, value)
    end


    action Generate returns text
        text result = "<keygen " 
        Attributes attributes = parent:WebTag:GetAttributes()
        attributeText = attributes:Generate()
        result = result + attributeText + ">"
        result = result + me:GenerateNestedTags()
        result = result + GetDescription() + "</keygen>"
        return result
    end
end