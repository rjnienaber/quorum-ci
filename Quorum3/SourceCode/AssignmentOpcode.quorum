package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type
use Libraries.Language.Compile.Symbol.Variable
use Libraries.Language.Compile.Symbol.Class

class AssignmentOpcode is QuorumOpcode
    integer bytecodeLocation = -1
    integer opcode = -1
    integer opcode2 = -1
    //JavaBytecodeMethodWriter methodWriter = undefined
    QuorumOpcode rightHandSide = undefined
    Variable variable = undefined
    JavaBytecodeOpcodes opcodes
    constant integer ME = 0
    Class clazz = undefined
    boolean isObjectField = false
    Variable field = undefined

    action IsObjectField returns boolean
        return isObjectField
    end

    action SetIsObjectField(boolean field)
        isObjectField = field
    end

    action GetField returns Variable
        return field
    end

    action SetField(Variable field)
        me:field = field
    end

    action GetClass returns Class
        return clazz
    end

    action SetClass(Class clazz)
        me:clazz = clazz
    end

    action GetVariable returns Variable
        return variable
    end

    action SetVariable(Variable var)
        variable = var
    end

    action GetRightHandSide returns QuorumOpcode
        return rightHandSide
    end

    action SetRightHandSide(QuorumOpcode opcode)
        rightHandSide = opcode
    end

    action GetJavaOpcode returns integer
        return opcode
    end

    action SetJavaOpcode(integer op)
        opcode = op
    end

    action GetJavaOpcode2 returns integer
        return opcode2
    end

    action SetJavaOpcode2(integer op)
        opcode2 = op
    end
    
    action GetBytecodeLocation returns integer
        return bytecodeLocation
    end

    action SetBytecodeLocation(integer location)
        bytecodeLocation = location
    end

    action SetMethodWriterToAllChildren(JavaBytecodeMethodWriter writer)
        SetMethodWriter(writer)
        rightHandSide:SetMethodWriterToAllChildren(writer)
    end

    action Write 
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        
        if not isObjectField
            if variable not= undefined
                if variable:IsField()
                    methodWriter:VisitVariable(opcodes:GetObjectLoad(), ME)
                    rightHandSide:Write()
                    Type type = variable:GetType()
                    methodWriter:VisitField(opcodes:GetPutField(), 
                        clazz:ConvertStaticKeyToBytecodePath(), variable:GetName(), 
                        type:ConvertTypeToBytecodeSignature())
                else
                    rightHandSide:Write()
                    methodWriter:VisitVariable(opcode, bytecodeLocation)

                    if opcode2 not= -1
                        methodWriter:VisitVariable(opcode2, bytecodeLocation)
                    end
                end
            end
        else
            Type type = field:GetType()
            methodWriter:VisitVariable(opcodes:GetObjectLoad(), bytecodeLocation)
            rightHandSide:Write()
            path = clazz:ConvertStaticKeyToBytecodeInterfacePath()
            getterName = clazz:ConvertToActionNameFromField(field, false)
            methodName = type:ConvertToSignatureFromField(false)
            methodWriter:VisitMethodInvoke(opcodes:GetInvokeInterface(), 
                path, getterName, methodName, true)
        end
    end

    action WriteJavaScript returns text 
        text result = ""
        result = result + variable:GetName() 
        result = result + " = " + rightHandSide:WriteJavaScript() + ";"

        return result
    end

    action GetTemplateCopy returns QuorumOpcode
        AssignmentOpcode op
        Type t = GetType()
        me:SetType(t:Copy())
        op:SetJavaOpcode(me:GetJavaOpcode())
        op:SetJavaOpcode2(me:GetJavaOpcode2())
        op:opcode = opcode
        return op
    end
end