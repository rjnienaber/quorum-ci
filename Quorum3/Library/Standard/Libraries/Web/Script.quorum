package Libraries.Web

use Libraries.Web.WebTag
use Libraries.Web.Attribute
use Libraries.Web.Attributes

/*
The Script class represents HTML's (Hypertext Markup Language) script tag which is
used to point to a client-side script (e.g. javascript). This can be used for
dynamic changes to content or validation reasons.

Attribute: Example

use Libraries.Web.all
class Main
   action main
      WebPage page
      
      Script script
      script:SetCode("//insert javascript here")

      page:AddToBody(script)
      output page:Generate()
   end
end
*/
class Script is WebTag

    text code = ""
    constant text async = "async"
    constant text charSet = "charset"
    constant text defer = "defer"
    constant text address = "src"
    constant text type = "type"

    public constant text charSetUnicode = "UTF-8"
    public constant text charSetLatin = "ISO-8859-1"

    /*
        This action gets the script code that has been entered into the script tag.

        Attribute: Returns The script code. 

        Attribute: Example
        use Libraries.Web.Script

        Script script
        text code = script:GetCode()
        
    */
    action GetCode returns text
        return code
    end

    /*
        This action sets the script code within the script tag.

        Attribute: Parameter code The script code.

        Attribute: Example
        use Libraries.Web.Script

        Script script
        text quote = ""
        quote = quote:GetDoubleQuote()
        script:SetCode("write.document(" + quote + "My webpage!" + quote +")")
        
    */
    action SetCode(text code)
        me:code = code
    end

    /*
        This action should be set to true if the the script should be run 
        asynchronously with the rest of the page. This will not wait for the 
        rest of the page to load before it runs. This is also only for external 
        scripts and should have an address set with it as well.


        Attribute: Example
        use Libraries.Web.Script        

        Script script
        script:SetAsync(true)
    */
    action SetAsync(boolean value)
        if value
            AddAttribute(async, async)
        else
            RemoveAttribute(async)
        end
    end

    /*
        This action returns true if the web page will run the external script 
        asynchronously of the rest of the page.

        Attribute: Returns This returns true if asych has been set.

        Attribute: Example
        use Libraries.Web.Script

        Script script
        boolean asych = script:GetAsync()
    */
    action GetAsync returns boolean
        Attribute isAsync = GetAttribute(async)
        if isAsync not= undefined
            return isAsync:GetValue() = async
        end
        return false
    end

    /*
        This action sets charset that will be used with the script. 
        The charset is used when the character encoding in an external script 
        file differs from the encoding in the HTML document.

        Attribute: Example
        use Libraries.Web.Script

        Script script
        script:SetCharSet(script:charSetUnicode)
        
    */
    action SetCharSet(text value)
        AddAttribute(charSet, value)
    end

    /*
        This action gets the charset that has been set to the script.

        Attribute: Returns The current charset to use.

        Attribute: Example
        use Libraries.Web.Script
        use Libraries.Web.Attribute

        Script script
        Attribute charSetValue = script:GetCharSet()
        
    */
    action GetCharSet returns Attribute
        return me:GetAttribute(charSet)
    end

    /*
        This action should be set to true if the the script should be run 
        after the rest of the page is done loading. This is also only for external 
        scripts and should have an address set with it as well.


        Attribute: Example
        use Libraries.Web.Script

        Script script
        script:SetDefer(true)
    */
    action SetDefer(boolean value)
        if value
            AddAttribute(defer, defer)
        else
            RemoveAttribute(defer)
        end
    end

    /*
        This action returns true if the web page will defer running the 
        external script until of the rest of the page is done loading.

        Attribute: Returns This returns true if defer has been set.

        Attribute: Example
        use Libraries.Web.Script

        Script script
        boolean defer = script:GetDefer()
    */
    action GetDefer returns boolean
        Attribute isDefer = GetAttribute(defer)
        if isDefer not= undefined
            return isDefer:GetValue() = defer
        end
        return false
    end

    /*
        This action sets the address attribute of script if the page will be 
        running an external script.

        Attribute: Parameter value The address of a external javascript file.

        Attribute: Example
        use Libraries.Web.Script

        Script script
        script:SetAddress("someJavaScriptFile.js")
        
    */
    action SetAddress(text value)
        AddAttribute(address, value)
    end

    /*
        This action gets the address of the external javascript file.

        Attribute: Returns The address of the external javascript file.

        Attribute: Example
        use Libraries.Web.Script
        use Libraries.Web.Attribute

        Script script
        Attribute addressValue = script:GetAddress()        
    */
    action GetAddress returns Attribute
        return me:GetAttribute(address)
    end

    /*
        This action sets the Type attribute of the script. The type attribute
        maps to a MIME type of the script

        Attribute: Parameter value The MIME type for the script.

        Attribute: Example
        use Libraries.Web.Script

        Script script
        script:SetType("text/html")
        
    */
    action SetType(text value)
        AddAttribute(type, value)
    end

    /*
        This action gets the MIME type attribute of the script. The type attribute
        maps to a MIME type of the script.

        Attribute: Returns The MIME type attribute of the script. 

        Attribute: Example
        use Libraries.Web.Script
        use Libraries.Web.Attribute

        Script script
        Attribute type = script:GetType()
    */
    action GetType returns Attribute
        return me:GetAttribute(type)
    end

    action Generate returns text
        text result = "<script " 
        Attributes attributes = parent:WebTag:GetAttributes()
        attributeText = attributes:Generate()
        result = result + attributeText + ">"
        result = result + me:GenerateNestedTags()
        result = result + code
        result = result + GetDescription() + "</script>"
        return result
    end


end