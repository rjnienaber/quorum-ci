package Libraries.Language.Compile.Test

use Libraries.Language.Compile.all
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Language.Compile.Parser
use Libraries.System.File
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Translate.JarGenerator
use Libraries.System.StackTraceItem

class InheritanceTester 
    CompilerTestSuite suite = undefined
    text path = "Library/Tests/Inheritance/"
    text passPath = path + "Pass/"
    text failPath = path + "Fail/"

    action Test
//PASS TESTS
        path = passPath
        AssignToParentsVariable()
        CallInheritedAction()
        CallInheritedActionFieldAssignment()
        CallMethodCallingBlueprint()
        CallMethodCallingInheritedBlueprint()
        CheckCast()
        DerivedCall()
        DogMain()
        InheritedTemplatedMethods()
        InheritanceOverloadingMain()
        MultipleInheritanceCallingAmbiguousBlueprints()
        OutputParentValue()
        OutputParentValueField()
        OutputParentValueClass()
        ParentActionCall()
        ParentFullyQualified()
        SimpleCast()
        SystemActionInherit()
        TruckMain()
        ParentActionTest2()
        //InheritanceOverloading()
//Tests in InheritanceTester.java that need to be implemented
//MultipleInheritanceBlueprints
//MultipleInheritanceCallingInheritedBlueprints
        
//FAIL tests
        path = failPath
        MultipleInheritanceAmbiguousMethod()
        CircularInheritance()
        BadTemplate()
        OutputPrivateParentValue()
        UsePrivateVariable()
        UsePrivateAction()
        UsePrivateActionSoloCall()
    end

    action GetName returns text
        return "Inheritance Tests"
    end

    action GetCompilerTestSuite returns CompilerTestSuite
        return suite
    end

    action SetCompilerTestSuite(CompilerTestSuite suite)
        me:suite = suite
    end

    action AssignToParentsVariable 
        Array<File> files
        Array<Text> results
        File main
        File dependent1
        File dependent2
        main:SetPath(path + "AssignToParentsVariable.quorum")
        dependent1:SetPath(path + "Test1.quorum")
        dependent2:SetPath(path + "Test2.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        results:Add(0, "6")
        results:Add(1, "5")
        results:Add(2, "117")
        results:Add(3, "117")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CallInheritedAction 
        Array<File> files
        Array<Text> results
        File main
        File dependent1
        File dependent2
        File dependent3
        main:SetPath(path + "CallInheritedAction.quorum")
        dependent1:SetPath(path + "A.quorum")
        dependent2:SetPath(path + "B.quorum")
        dependent3:SetPath(path + "C.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        files:Add(dependent3)
        results:Add(0, "implemented by A")
        results:Add(1, "implemented by B")
        results:Add(2, "implemented by B")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CallInheritedActionFieldAssignment
        Array<File> files
        Array<Text> results
        File main
        File dependent1
        File dependent2
        File dependent3
        main:SetPath(path + "CallInheritedActionFieldAssignment.quorum")
        dependent1:SetPath(path + "A.quorum")
        dependent2:SetPath(path + "B.quorum")
        dependent3:SetPath(path + "C.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        files:Add(dependent3)
        results:Add(0, "implemented by A")
        results:Add(1, "implemented by B")
        results:Add(2, "implemented by B")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CallMethodCallingBlueprint
        Array<File> files
        Array<Text> results
        File main
        File dependent1
        File dependent2
        main:SetPath(path + "CallMethodCallingBlueprint.quorum")
        dependent1:SetPath(path + "ParentCallingBlueprint.quorum")
        dependent2:SetPath(path + "ChildImplementingBlueprint.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        results:Add(0, "child")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CallMethodCallingInheritedBlueprint
        Array<File> files
        Array<Text> results
        File main
        File dependent1
        File dependent2
        File dependent3
        main:SetPath(path + "CallMethodCallingInheritedBlueprint.quorum")
        dependent1:SetPath(path + "ParentCallingBlueprint.quorum")
        dependent2:SetPath(path + "ChildCallingBlueprint.quorum")
        dependent3:SetPath(path + "GrandChildImplementingBlueprint.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        files:Add(dependent3)
        results:Add(0, "grandchild")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CheckCast
        Array<File> files
        Array<Text> results
        File main
        File dependent1
        File dependent2
        File dependent3
        main:SetPath(path + "CheckCast.quorum")
        dependent1:SetPath(path + "CastA.quorum")
        dependent2:SetPath(path + "CastB.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        results:Add(0, "hi")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action DerivedCall 
        Array<File> files
        Array<Text> results
        File main
        File dependent1
        File dependent2
        main:SetPath(path + "DerivedCall.quorum")
        dependent1:SetPath(path + "Test.quorum")
        dependent2:SetPath(path + "Kid.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        results:Add(0, "This is We Win.")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action DogMain 
        Array<File> files
        Array<Text> results
        File main
        File dependent1
        File dependent2
        main:SetPath(path + "DogMain.quorum")
        dependent1:SetPath(path + "Dog.quorum")
        dependent2:SetPath(path + "Mammal.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        results:Add(0, "true")
        results:Add(1, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action InheritedTemplatedMethods 
        Array<File> files
        Array<Text> results
        File main
        File dependent1
        File dependent2
        File dependent3
        File dependent4
        main:SetPath(path + "InheritTemplatedMethods.quorum")
        dependent1:SetPath(path + "ATemplated.quorum")
        dependent2:SetPath(path + "BTemplated.quorum")
        dependent3:SetPath(path + "CTemplated.quorum")
        dependent4:SetPath(path + "DTemplated.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        files:Add(dependent3)
        files:Add(dependent4)
        results:Add(0, "true")
        results:Add(1, "true")
        results:Add(2, "1.2")
        results:Add(3, "10")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action InheritanceOverloadingMain 
        Array<File> files
        Array<Text> results
        File main
        File dependent1
        File dependent2
        main:SetPath(path + "InheritanceOverloadingMain.quorum")
        dependent1:SetPath(path + "InheritanceOverloadingA.quorum")
        dependent2:SetPath(path + "InheritanceOverloadingB.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        results:Add(0, "Class")
        results:Add(1, "SubClass")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action MultipleInheritanceCallingAmbiguousBlueprints 
        Array<File> files
        Array<Text> results
        File main
        File dependent1
        File dependent2
        File dependent3
        File dependent4
        main:SetPath(path + "MultipleInheritanceCallingAmbiguousBlueprints.quorum")
        dependent1:SetPath(path + "ParentCallingBlueprint.quorum")
        dependent2:SetPath(path + "Aunt.quorum")
        dependent3:SetPath(path + "ChildInheritingBlueprintAction.quorum")
        dependent4:SetPath(path + "GrandChildWithMultiple.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        files:Add(dependent3)
        files:Add(dependent4)
        results:Add(0, "grandchild")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action OutputParentValue 
        Array<File> files
        Array<Text> results
        File main
        File dependent1
        File dependent2
        main:SetPath(path + "OutputParentValue.quorum")
        dependent1:SetPath(path + "Test1.quorum")
        dependent2:SetPath(path + "Test2.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        results:Add(0, "6")
        results:Add(1, "5")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action OutputParentValueField
        Array<File> files
        Array<Text> results
        File main
        File dependent1
        File dependent2
        main:SetPath(path + "OutputParentValueField.quorum")
        dependent1:SetPath(path + "Test1.quorum")
        dependent2:SetPath(path + "Test2.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        results:Add(0, "6")
        results:Add(1, "5")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action OutputParentValueClass
        Array<File> files
        Array<Text> results
        File main
        File dependent1
        File dependent2
        main:SetPath(path + "OutputParentValueClass.quorum")
        dependent1:SetPath(path + "Test1.quorum")
        dependent2:SetPath(path + "Test2.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        results:Add(0, "6")
        results:Add(1, "5")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ParentActionCall 
        Array<File> files
        Array<Text> results
        File main
        main:SetPath(path + "ParentActionCall.quorum")
        files:Add(main)
        results:Add(0, "success")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end
   
    action ParentFullyQualified 
        Array<File> files
        Array<Text> results
        File main
        main:SetPath(path + "ParentFullyQualified.quorum")
        files:Add(main)
        results:Add(0, "success")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action SimpleCast 
        Array<File> files
        Array<Text> results
        File main
        File dependent1
        File dependent2
        File dependent3
        main:SetPath(path + "SimpleCast.quorum")
        dependent1:SetPath(path + "A.quorum")
        dependent2:SetPath(path + "B.quorum")
        dependent3:SetPath(path + "C.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        files:Add(dependent3)
        results:Add(0, "implemented by B")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action SystemActionInherit 
        Array<File> files
        Array<Text> results
        File main
        main:SetPath(path + "SystemActionInherit.quorum")
        files:Add(main)
        results:Add(0, "success")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action TruckMain 
        Array<File> files
        Array<Text> results
        File main
        File dependent1
        File dependent2
        File dependent3
        main:SetPath(path + "TruckMain.quorum")
        dependent1:SetPath(path + "LandVehicle.quorum")
        dependent2:SetPath(path + "GasPoweredVehicle.quorum")
        dependent3:SetPath(path + "Truck.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        files:Add(dependent3)
        results:Add(0, "Number of wheels: 4")
        results:Add(1, "Size of gas tank (gallons): 20")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ParentActionTest2 
        Array<File> files
        Array<Text> results
        File main
        File dependent1
        File dependent2
        File dependent3
        main:SetPath(path + "ParentActionTest2.quorum")
        dependent1:SetPath(path + "A2.quorum")
        dependent2:SetPath(path + "B2.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        results:Add(0, "x = 1")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

//FAIL Tests
    action MultipleInheritanceAmbiguousMethod 
        Array<File> files
        File main
        File dependent1
        File dependent2
        File dependent3
        main:SetPath(path + "MultipleInheritanceAmbiguousMethod.quorum")
        dependent1:SetPath(path + "A.quorum")
        dependent2:SetPath(path + "B.quorum")
        dependent3:SetPath(path + "C.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        files:Add(dependent3)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action CircularInheritance 
        Array<File> files
        File main
        File dependent1
        File dependent2
        File dependent3
        main:SetPath(path + "CircularInheritance.quorum")
        dependent1:SetPath(path + "D.quorum")
        dependent2:SetPath(path + "E.quorum")
        dependent3:SetPath(path + "F.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        files:Add(dependent3)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action BadTemplate 
        Array<File> files
        File main
        File dependent1
        File dependent2
        File dependent3
        main:SetPath(path + "BadTemplate.quorum")
        dependent1:SetPath(path + "TemplateA.quorum")
        dependent2:SetPath(path + "TemplateB.quorum")
        dependent3:SetPath(path + "TemplateD.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        files:Add(dependent3)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action OutputPrivateParentValue() 
        Array<File> files
        File main
        File dependent1
        File dependent2
        File dependent3
        main:SetPath(path + "OutputPrivateParentValue.quorum")
        dependent1:SetPath(path + "Test1.quorum")
        dependent2:SetPath(path + "Test2.quorum")
        files:Add(main)
        files:Add(dependent1)
        files:Add(dependent2)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action UsePrivateVariable
        Array<File> files
        File main
        File dependent1
        File dependent2
        File dependent3
        main:SetPath(path + "UsePrivateVariable.quorum")
        dependent2:SetPath(path + "Test2.quorum")
        files:Add(main)
        files:Add(dependent2)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action UsePrivateAction
        Array<File> files
        File main
        File dependent1
        File dependent2
        File dependent3
        main:SetPath(path + "UsePrivateAction.quorum")
        dependent2:SetPath(path + "Test2.quorum")
        files:Add(main)
        files:Add(dependent2)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end

    action UsePrivateActionSoloCall
        Array<File> files
        File main
        File dependent1
        File dependent2
        File dependent3
        main:SetPath(path + "UsePrivateActionSoloCall.quorum")
        dependent2:SetPath(path + "Test2.quorum")
        files:Add(main)
        files:Add(dependent2)
        suite:TestFail(files)
        suite:TestJavaScriptFail(files)
    end
end