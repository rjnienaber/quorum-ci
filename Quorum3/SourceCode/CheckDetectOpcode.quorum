package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type
use Libraries.Language.Compile.Symbol.Block
use Libraries.Language.Compile.Translate.BlockOpcode
use Libraries.Language.Compile.Location
use Libraries.Containers.List
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Symbol.Class

class CheckDetectOpcode is QuorumOpcode
    BlockOpcode block = undefined
    DetectBlockOpcode alwaysBlock = undefined
    List<DetectBlockOpcode> detectBlocks
    JavaBytecodeOpcodes opcodes
    integer whichCheck = 0
    List<ErrorBlockLabels> detectValues
    List<ErrorBlockLabels> alwaysValues

    action AddDetectBlock(DetectBlockOpcode op)
        detectBlocks:Add(op)
    end

    action GetCheckLabelInteger returns integer
        return whichCheck
    end

    action SetCheckLabelInteger(integer value)
        whichCheck = value
    end

    action SetBlock(BlockOpcode block)
        me:block = block
    end

    action GetBlock returns BlockOpcode
        return block
    end

    action SetAlwaysBlock(DetectBlockOpcode block)
        me:alwaysBlock = block
    end

    action GetAlwaysBlock returns DetectBlockOpcode
        return alwaysBlock
    end

    action Write 
        JavaBytecodeLabel checkStart
        JavaBytecodeLabel checkEnd
        JavaBytecodeLabel fullEnd
        JavaBytecodeLabel finalAlways
        integer maxDetectBlockSize = 0
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        text null = undefined //workaround
        if block not= undefined
            methodWriter:VisitLabel(checkStart)
            block:Write()
            methodWriter:VisitLabel(checkEnd)

            if alwaysBlock not= undefined
                JavaBytecodeLabel alwaysStart
                methodWriter:VisitLabel(alwaysStart)
                alwaysBlock:Write()
                ErrorBlockLabels labels
                labels:left = checkStart
                labels:middle = checkEnd
                labels:right = finalAlways
                labels:type = null
                alwaysValues:Add(labels)
            end
            methodWriter:VisitJump(opcodes:GetGoto(), fullEnd)
        end

        
        Iterator<DetectBlockOpcode> it = detectBlocks:GetIterator()
        repeat while it:HasNext()
            DetectBlockOpcode det = it:Next()

            Iterator<Class> detects = det:GetDetectIterator()
            repeat while detects:HasNext()
                JavaBytecodeLabel detectStart
                methodWriter:VisitLabel(detectStart)
                Class clazz = detects:Next()

                ErrorBlockLabels detectLabels
                detectLabels:left = checkStart
                detectLabels:middle = checkEnd
                detectLabels:right = detectStart
                detectLabels:type = clazz:ConvertStaticKeyToBytecodePath()
                //detectValues:Add(detectLabels)
                WriteTableRow(detectLabels)

                BlockOpcode blockOpcode = det:GetBlock()
                Block block = blockOpcode:GetBlock()
                integer value = block:GetBytecodeLocation()
                if value - 1 > maxDetectBlockSize
                    maxDetectBlockSize = value - 1
                end
                det:Write()
                
                

                if alwaysBlock not= undefined
                    JavaBytecodeLabel alwaysStart
                    methodWriter:VisitLabel(alwaysStart)
                    alwaysBlock:Write()
                    methodWriter:VisitJump(opcodes:GetGoto(), fullEnd)

                    ErrorBlockLabels labels
                    labels:left = detectStart
                    labels:middle = alwaysStart
                    labels:right = finalAlways
                    labels:type = null
                    alwaysValues:Add(labels)
                else
                    //if there isn't another detect or an always, fall through
                    if it:HasNext() or detects:HasNext()
                        methodWriter:VisitJump(opcodes:GetGoto(), fullEnd)
                    end
                end
            end
        end

        if alwaysBlock not= undefined
            JavaBytecodeLabel finalAlwaysEnd
            methodWriter:VisitLabel(finalAlways)

            //get the parent block's final bytecode location and put it in as an offset.
            BlockOpcode bo = alwaysBlock:GetBlock()
            Block b = bo:GetBlock()
            integer loc = b:GetBytecodeLocation() + GetBytecodeOffset()
            integer max = maxDetectBlockSize
            if loc < maxDetectBlockSize + GetBytecodeOffset()
                loc = max + GetBytecodeOffset()
                //integer newloc = maxDetectBlockSize
                //loc = newloc
            end

            //put in the offset. This is somewhat expensive
            alwaysBlock:SetBytecodeWriteOffsetToAllChildren(loc)
            alwaysBlock:WriteExceptionVariable()
            methodWriter:VisitLabel(finalAlwaysEnd)
            alwaysBlock:Write()
            alwaysBlock:Rethrow()

            //reset it, in case someone else uses
            alwaysBlock:SetBytecodeWriteOffsetToAllChildren(0)
            
            ErrorBlockLabels labels
            labels:left = finalAlways
            labels:middle = finalAlwaysEnd
            labels:right = finalAlways
            labels:type = null
            alwaysValues:Add(labels)
        end

        //now write all the detect values
        WriteExceptionTable()
        methodWriter:VisitLabel(fullEnd)
    end

    private action WriteExceptionTable
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        Iterator<ErrorBlockLabels> it = undefined //detectValues:GetIterator()
//        repeat while it:HasNext()
//            ErrorBlockLabels labels = it:Next()
//            WriteTableRow(labels)
//        end

        it = alwaysValues:GetIterator()
        repeat while it:HasNext()
            ErrorBlockLabels labels = it:Next()
            WriteTableRow(labels)
        end
    end

    private action WriteTableRow(ErrorBlockLabels labels)
        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        methodWriter:VisitTryCatchBlock(labels:left, labels:middle, labels:right, labels:type)
    end

    action WriteJavaScript returns text
        return ""
    end

    action GetTemplateCopy returns QuorumOpcode
        CheckDetectOpcode op


        return op
    end
end