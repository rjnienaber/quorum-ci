package Libraries.Language.Compile.Translate

use Libraries.Language.Compile.Symbol.Type
use Libraries.Language.Compile.Translate.BlockOpcode
use Libraries.Language.Compile.Location
use Libraries.Containers.List
use Libraries.Containers.Blueprints.Iterator
use Libraries.Language.Compile.Symbol.Class

class CheckDetectOpcode is QuorumOpcode
    BlockOpcode block = undefined
    DetectBlockOpcode alwaysBlock = undefined
    List<DetectBlockOpcode> detectBlocks
    JavaBytecodeOpcodes opcodes
    integer whichCheck = 0


    action AddDetectBlock(DetectBlockOpcode op)
        detectBlocks:Add(op)
    end

    action GetCheckLabelInteger returns integer
        return whichCheck
    end

    action SetCheckLabelInteger(integer value)
        whichCheck = value
    end

    action SetBlock(BlockOpcode block)
        me:block = block
    end

    action GetBlock returns BlockOpcode
        return block
    end

    action SetAlwaysBlock(DetectBlockOpcode block)
        me:alwaysBlock = block
    end

    action GetAlwaysBlock returns DetectBlockOpcode
        return alwaysBlock
    end

    action Write 
        JavaBytecodeLabel checkStart
        //JavaBytecodeLabel alwaysStart
        JavaBytecodeLabel checkEnd
        JavaBytecodeLabel fullEnd
        JavaBytecodeLabel finalAlways

        JavaBytecodeMethodWriter methodWriter = GetMethodWriter()
        text null = undefined //workaround
        if block not= undefined
            methodWriter:VisitLabel(checkStart)
            block:Write()
            methodWriter:VisitLabel(checkEnd)

            if alwaysBlock not= undefined
                JavaBytecodeLabel alwaysStart
                methodWriter:VisitLabel(alwaysStart)
                alwaysBlock:Write()
                //methodWriter:VisitTryCatchBlock(checkStart, checkEnd, finalAlways, null)
                methodWriter:VisitTryCatchBlock(checkStart, checkEnd, finalAlways, null)
            end

            methodWriter:VisitJump(opcodes:GetGoto(), fullEnd)
            
        end

        Iterator<DetectBlockOpcode> it = detectBlocks:GetIterator()
        repeat while it:HasNext()
            DetectBlockOpcode det = it:Next()
            Iterator<Class> detects = det:GetDetectIterator()
            repeat while detects:HasNext()
                JavaBytecodeLabel detectStart
                methodWriter:VisitLabel(detectStart)
                Class clazz = detects:Next()
                det:Write()
                methodWriter:VisitTryCatchBlock(checkStart, checkEnd, detectStart, clazz:ConvertStaticKeyToBytecodePath())

                if alwaysBlock not= undefined
                    JavaBytecodeLabel alwaysStart
                    methodWriter:VisitLabel(alwaysStart)
                    alwaysBlock:Write()
                    methodWriter:VisitJump(opcodes:GetGoto(), fullEnd)
                    methodWriter:VisitTryCatchBlock(detectStart, alwaysStart, finalAlways, null)
                end
            end

            
        end

        if alwaysBlock not= undefined
            JavaBytecodeLabel finalAlwaysEnd
            methodWriter:VisitLabel(finalAlways)
            alwaysBlock:SetBytecodeWriteOffsetToAllChildren(3)
            alwaysBlock:WriteExceptionVariable()
            methodWriter:VisitLabel(finalAlwaysEnd)
            alwaysBlock:Write()
            alwaysBlock:Rethrow()
            
            methodWriter:VisitTryCatchBlock(finalAlways, finalAlwaysEnd, finalAlways, null)
        end

        methodWriter:VisitLabel(fullEnd)
    end

    action WriteJavaScript returns text
        return ""
    end

    action GetTemplateCopy returns QuorumOpcode
        CheckDetectOpcode op


        return op
    end
end