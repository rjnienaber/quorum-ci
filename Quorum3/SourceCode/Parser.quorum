package Libraries.Language.Compile

use Libraries.Language.Compile.Context.all
use Libraries.Containers.Stack
use Libraries.Language.Compile.Symbol.all
use Libraries.System.File
use Libraries.Containers.List
use Libraries.Containers.Blueprints.Iterator

class Parser is QuorumSourceListener
    QualifiedName packageValue = undefined
    Source source
    SymbolTable symbolTable = undefined
    Action currentAction = undefined
    Class currentClass = undefined

    action EnterStart(StartContext context) 
        source:SetFile(me:GetFile())
        symbolTable = me:GetSymbolTable()
    end

    action ExitPackageRule(PackageContext context) 
        packageValue = context:name
    end

    action EnterFullClassDeclaration(FullClassDeclarationContext context)
        text name = context:className
        AddClass(name)
    end

    action ExitFullClassDeclaration(FullClassDeclarationContext context) end

    action AddClass(text name)
        text key = packageValue:GetStaticKey() + "." + name
        Class clazz
        clazz:SetName(name)
        CompilerError error = symbolTable:Add(clazz)
        if error not= undefined
            CompilerErrorManager manager = GetCompilerErrorManager()
            manager:AddError(error)
        end
    end

    action EnterNoClassDeclaration(NoClassDeclarationContext context) 
        File file = me:GetFile()
        text name = file:GetFileName()
        text extension = file:GetFileExtension()
        length = extension:GetSize()
        name = name:GetSubtext(0, name:GetSize() - length - 1)
        AddClass(name)
    end

    action ExitNoClassDeclaration(NoClassDeclarationContext context)  end

    action EnterSystemAction(ActionContext context) 
        Action act
        currentAction = act
        currentAction:SetIsSystem(true)
    end

    action ExitSystemAction(ActionContext context) 
    end

    action EnterConstructor end
    action ExitConstructor end

    action EnterBlueprintAction(ActionContext context) 
        Action act
        currentAction = act
        currentAction:SetIsBluePrint(true)
    end

    action ExitBlueprintAction(ActionContext context)
    end

    action ExitActionHeader(ActionContext context)
        List<Variable> params = context:parameters
        Iterator<Variable> it = params:GetIterator()
        repeat while it:HasNext()
            Variable param = it:Next()
            params:Add(param)
        end

        currentAction:SetReturnType(context:returnType)
        currentAction:SetName(context:actionName)
        Location location = currentAction:GetLocation()
        location:SetFile(me:source:GetFile())

        //add it to the class
        currentClass:Add(currentAction)
    end

    action EnterAction(ActionContext context) 
        Action act
        currentAction = act
    end

    action ExitAction(ActionContext context) 
        currentAction = undefined
    end
end