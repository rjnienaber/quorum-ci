package Libraries.Language.Compile

use Libraries.Language.Compile.Context.all
use Libraries.Containers.Stack
use Libraries.Language.Compile.Symbol.all
use Libraries.System.File

class Parser is QuorumSourceListener
    Stack<Expression> stack
    Stack<integer> intStack
    QualifiedName packageValue = undefined
    Source source
    SymbolTable symbolTable = undefined

    action EnterStart(StartContext context) 
        source:SetFile(me:GetFile())
        symbolTable = me:GetSymbolTable()
    end

    action ExitPackageRule(PackageContext context) 
        packageValue = context:name
    end

    action EnterFullClassDeclaration(FullClassDeclarationContext context)
        text name = context:className
        AddClass(name)
    end

    action ExitFullClassDeclaration(FullClassDeclarationContext context) end

    action AddClass(text name)
        text key = packageValue:GetStaticKey() + "." + name
        Class clazz
        clazz:SetName(name)
        CompilerError error = symbolTable:Add(clazz)
        if error not= undefined
            CompilerErrorManager manager = GetCompilerErrorManager()
            manager:AddError(error)
        end
    end

    action EnterNoClassDeclaration(NoClassDeclarationContext context) 
        File file = me:GetFile()
        text name = file:GetFileName()
        text extension = file:GetFileExtension()
        length = extension:GetSize()
        name = name:GetSubtext(0, name:GetSize() - length - 1)
        AddClass(name)
    end

    action ExitNoClassDeclaration(NoClassDeclarationContext context)  end

    action ExitInteger(IntegerContext int)
        Expression e
        stack:Push(e)
        intStack:Push(int:value)
        output "pushed " + int:value
    end

    action EnterAssignmentStatement output "Enter Assignment" end
    action ExitAssignmentStatement output "Exit Assignment" end

    action EnterAssignmentDeclaration(AssignmentDeclaractionContext context) end
    action ExitAssignmentDeclaration(AssignmentDeclaractionContext context) end

    action ExitMultiplication 
        integer right = intStack:Pop()
        integer left = intStack:Pop()
        intStack:Push(left * right)

        output "* = " + (right * left)
    end

    action ExitAddition(Addition addition) 
        integer right = intStack:Pop()
        integer left = intStack:Pop()
        intStack:Push(left + right)

        output "+ = " + (right + left)  
    end
end