package Libraries.Web
use Libraries.Web.WebTag
use Libraries.Web.Attribute
use Libraries.Web.Attributes
use Libraries.Web.FormAttributeAccepter
use Libraries.Web.MouseAttributeAccepter
use Libraries.Web.KeyboardAttributeAccepter
/*
The Input class represents HTML's (Hypertext Markup Language) input tag which 
defines an input control within a Form. The type of control is defined by the 
type attribute. 
You can find more information about this tag at: 
    <a href="http://www.w3schools.com/tags/tag_input.asp">The input attribute</a>.

Attribute: Example

use Libraries.Web.all
class Main
    action main
        //make a web page
        WebPage page
        //make a Form
        Form myForm
        //make a input
        Input myInput
        myInput:SetType("tel")
        myForm:Add(myInput)
        page:AddToBody(myForm)
    end
end
*/

class Input is WebTag, FormAttributeAccepter, MouseAttributeAccepter, KeyboardAttributeAccepter
    constant text accept = "accept"
    constant text alternate = "alt"
    constant text autocomplete = "autocomplete"
    constant text autofocus = "autofocus"
    constant text checked = "checked"
    constant text disabled = "disabled"
    constant text formName = "form"
    constant text formAction = "formaction"
    constant text formEncType = "formenctype"
    constant text formMethod = "formmethod"
    constant text formNovalidate = "formnovalidate"
    constant text formTarget = "formtarget"
    constant text height = "height"
    constant text list = "list"
    constant text max = "max"
    constant text maxLength = "maxlength"
    constant text min = "min"
    constant text multiple = "multiple"
    constant text name = "name"
    constant text pattern = "pattern"
    constant text placeHolder = "placeholder"
    constant text readOnly = "readonly"
    constant text required = "required"
    constant text size = "size"
    constant text imageAddress = "src"
    constant text step = "step"
    constant text type = "type"
    constant text defaultValue = "value"
    constant text width = "width"

    /*
        This action gets the accept attribute. The value can be accessed by 
        calling the GetValue() action on the returned accept attribute. It specifies 
        the file types that will be accepted by the server. Multiple values are
        to be seperated by a coma.
            Accptable values:   audio/*
                                video/*
                                image/*
                                MIME_type

        Attribute: Returns The accept attribute.

        Attribute: Example
        use Libraries.Web.Input
        use Libraries.Web.Attribute
        Input myInput
        Attribute accept = myInput:GetAccept()
        text acceptValue = ""
        if accept not= undefined
            acceptValue = accept:GetValue()
        end
    */
    action GetAccept returns Attribute
        return GetAttribute(accept)
    end
    
    /*
        This action sets the accept attribute. This value is only considered when 
        the input type is file. It specifies the file types that will be accepted 
        by the server. Multiple values are to be seperated by a coma.
            Accptable values:   audio/*
                                video/*
                                image/*
                                MIME_type

        Attribute: Parameter value The accept of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetAccept("audio/*,text/txt")
    */
    action SetAccept(text value)
        AddAttribute(accept, value)
    end
    /*
        This action gets the alternate attribute. The value can be accessed by 
        calling the GetValue() action on the returned alternate attribute. The 
        alternate specifies alternate text for images.

        Attribute: Returns The alternate attribute.

        Attribute: Example
        use Libraries.Web.Input
        use Libraries.Web.Attribute
        Input myInput
        Attribute alternate = myInput:GetAlternate()
        text alternateValue = ""
        if alternate not= undefined
            alternateValue = alternate:GetValue()
        end
    */
    action GetAlternate returns Attribute
        return GetAttribute(alternate)
    end
    /*
        This action sets the alternate attribute. The alternate specifies 
        alternate text for images.

        Attribute: Parameter value The alternate of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetAlternate("Submit Button")
    */
    action SetAlternate(text value)
        AddAttribute(alternate, value)
    end
    /*
        This action gets the value of the autocomplete attribute. Autocomplete is
        true by default. When true the browser will attempt to autocomplete the 
        input field.

        Attribute: Returns The autocomplete attribute value.

        Attribute: Example
        use Libraries.Web.Input
        use Libraries.Web.Attribute
        Input myInput
        boolean inputAutocomplete = myInput:GetAutocomplete()
    */
    action GetAutocomplete returns boolean
        Attribute autocompleteAttribute =  GetAttribute(autocomplete)
        if autocompleteAttribute not= undefined
            return autocompleteAttribute:GetValue() = "on" 
        end
        return false
    end
    /*
        This action sets the autocomplete attribute. Autocomplete is true by default. 
        When true the browser will attempt to autocomplete the input field.

        Attribute: Parameter value Boolean value that represents the autocomplete of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetAutocomplete(true)
    */
    action SetAutocomplete(boolean value)
        if value
            AddAttribute(autocomplete, "on")
        else
            AddAttribute(autocomplete, "off")
        end
    end
    /*
        This action gets the value of the autofocus attribute. Autofocus is false 
        by default. When true the browser place the focus on the input value when
        the page loads.

        Attribute: Returns The autofocus attribute.

        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        boolean inputAutofocus = myInput:GetAutofocus()
    */
    action GetAutofocus returns boolean
        Attribute autofocusAttribute = GetAttribute(autofocus)
        if autofocusAttribute not= undefined
            return autofocusAttribute:GetValue() = autofocus
        end
        return false
    end
    /*
        This action sets the autofocus attribute. Autofocus is false by default.
        When true the browser place the focus on the input value when the page loads.

        Attribute: Parameter value The autofocus of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetAutofocus(true)
    */
    action SetAutofocus(boolean value)
        if value
            AddAttribute(autofocus, autofocus)
        else
            RemoveAttribute(autofocus)
        end
    end
    /*
        This action gets the value of the checked attribute. The checked attribute 
        is only valid when the input control is of type checkbox or radio. The 
        default value is false. When true the radio button or checkbox will be 
        checked after the page loads.

        Attribute: Returns The checked attribute.

        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        boolean inputChecked = myInput:GetChecked()
    */
    action GetChecked returns boolean
        Attribute checkedAttribute = GetAttribute(checked)
        if checkedAttribute not= undefined
            return checkedAttribute:GetValue() = checked
        end
        return false
    end
    /*
        This action sets the checked attribute. The checked attribute is only valid 
        when the input control is of type checkbox or radio. The default value is 
        false. When true the radio button or checkbox will be checked after the 
        page loads.

        Attribute: Parameter value The checked of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetChecked(true)
    */
    action SetChecked(boolean value)
        if value
            AddAttribute(checked, value)
        else
            RemoveAttribute(checked)
        end
    end
    /*
        This action gets the value of the disabled attribute. The default value 
        is false. When true the input control will not be clickable. This is ignored
        when the input control is of type hidden.

        Attribute: Returns The disabled attribute.

        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        boolean inputDisabled = myInput:GetDisabled()
    */
    action GetDisabled returns boolean
        Attribute disabledAttribute = GetAttribute(me:disabled)
        if disabledAttribute not= undefined
            return disabledAttribute:GetValue() = me:disabled
        end
        return false
    end
    /*
        This action sets the disabled attribute. The default value is false. When 
        true the input control will not be clickable. This is ignored when the 
        input control is of type hidden.

        Attribute: Parameter value The disabled of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetDisabled(true)
    */
    action SetDisabled (boolean value)
        if value
            AddAttribute(disabled, disabled)
        else
            RemoveAttribute(disabled)
        end
    end
    /*
        This action gets the formName attribute. The value can be accessed by 
        calling the GetValue() action on the returned formName attribute. The formId
        attribute specifies the form the input is accociated with.

        Attribute: Returns The formName attribute.

        Attribute: Example
        use Libraries.Web.Input
        use Libraries.Web.Attribute
        Input myInput
        Attribute formName = myInput:GetFormName()
        text formNameValue = ""
        if formName not= undefined
            formNameValue = formName:GetValue()
        end
    */
    action GetFormName returns Attribute
        return GetAttribute(formName)
    end
    /*
        This action sets the formName attribute. The formId attribute specifies 
        the form the input is accociated with.

        Attribute: Parameter value The formName of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetFormName("Input Form")
    */
    action SetFormName(text value)
        AddAttribute(formName, value)
    end
    /*
        This action gets the formAction attribute. The value can be accessed by 
        calling the GetValue() action on the returned formAction attribute. The 
        formAction attribute specifies the address of the file that will process
        the input control when the form is submitted.

        Attribute: Returns The formAction attribute.

        Attribute: Example
        use Libraries.Web.Input
        use Libraries.Web.Attribute
        Input myInput
        Attribute formAction = myInput:GetFormAction()
        text formActionValue = ""
        if formAction not= undefined
            formActionValue = formAction:GetValue()
        end
    */
    action GetFormAction returns Attribute
        return GetAttribute(formAction)
    end
    /*
        This action sets the formAction attribute. The  formAction attribute 
        specifies the address of the file that will process the input control when 
        the form is submitted.

        Attribute: Parameter value The formAction of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetFormAction("inputFormAction.quorum")
    */
    action SetFormAction(text value)
        AddAttribute(formAction, value)
    end
    /*
        This action gets the formEncodedType attribute. The value can be accessed by 
        calling the GetValue() action on the returned formEncodedType attribute. 
        The formEncodedType specifies the form encoding.
            Acceptable values:  application/x-www-form-urlencoded
                                multipart/form-data
                                text/plain
        
        Attribute: Returns The formEncodedType attribute.

        Attribute: Example
        use Libraries.Web.Input
        use Libraries.Web.Attribute
        Input myInput
        Attribute formEncodedType = myInput:GetFormEncodedType()
        text formEncodedTypeValue = ""
        if formEncodedType not= undefined
            formEncodedTypeValue = formEncodedType:GetValue()
        end
    */
    action GetFormEncodedType returns Attribute
        return GetAttribute(formEncType)
    end
    /*
        This action sets the formEncodedType attribute. The formEncodedType specifies 
        the form encoding.
            Acceptable values:  application/x-www-form-urlencoded
                                multipart/form-data
                                text/plain

        Attribute: Parameter value The formEncodedType of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetFormEncodedType("application/x-www-form-urlencoded")
    */
    action SetFormEncodedType(text value)
        AddAttribute(formEncType, value)
    end
    /*
        This action gets the formMethod attribute. The value can be accessed by 
        calling the GetValue() action on the returned formMethod attribute. The 
        formMethod attribute specifies the protocol method in which the form data 
        will be sent to the formAction address.

        Attribute: Returns The formMethod attribute.

        Attribute: Example
        use Libraries.Web.Input
        use Libraries.Web.Attribute
        Input myInput
        Attribute formMethod = myInput:GetFormMethod()
        text formMethodValue = ""
        if formMethod not= undefined
            formMethodValue = formMethod:GetValue()
        end
    */
    action GetFormMethod returns Attribute
        return GetAttribute(formMethod)
    end
    /*
        This action sets the formMethod attribute. The formMethod attribute specifies 
        the protocol method in which the form data will be sent to the formAction 
        address.

        Attribute: Parameter value The formMethod of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetFormMethod("get")
    */
    action SetFormMethod(text value)
        AddAttribute(formMethod, value)
    end
    /*
        This action gets the value of the formNovalidate attribute. The default 
        value is false. When true the form will not be validated upon submission.
        This attribute is only used for input controls of type submit.

        Attribute: Returns The formNovalidate attribute.

        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        boolean inputFormNovalidate = myInput:GetFormNovalidate()
    */
    action GetFormNovalidate returns boolean
        Attribute noValidate =  GetAttribute(formNovalidate)
        if noValidate not= undefined
            return formNovalidate = noValidate:GetValue()
        end
        return false
    end
    /*
        This action sets the formNovalidate attribute. The default value is false. 
        When true the form will not be validated upon submission. This attribute 
        is only used for input controls of type submit.

        Attribute: Parameter value The formNovalidate of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetFormNovalidate(true)
    */
    action SetFormNovalidate(boolean value)
        if value
            AddAttribute(formNovalidate, value)
        else
            RemoveAttribute(formNovalidate)
        end
    end
    /*
        This action gets the formTarget attribute. The value can be accessed by 
        calling the GetValue() action on the returned formTarget attribute. The 
        formTarget attribute specifies which frame the form response is to be 
        opened in.
            Acceptable Values:  _blank
                                _parent
                                _top
                                _self
                                existing frame name

        Attribute: Returns The formTarget attribute.

        Attribute: Example
        use Libraries.Web.Input
        use Libraries.Web.Attribute
        Input myInput
        Attribute formTarget = myInput:GetFormTarget()
        text formTarGetValue = ""
        if formTarget not= undefined
            formTarGetValue = formTarget:GetValue()
        end
    */
    action GetFormTarget returns Attribute
        return GetAttribute(formTarget)
    end
    /*
        This action sets the formTarget attribute. The formTarget attribute specifies 
        which frame the form response is to be opened in.
            Acceptable Values:  _blank
                                _parent
                                _top
                                _self
                                existing frame name

        Attribute: Parameter value The formTarget of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetFormTarget("_blank")
    */
    action SetFormTarget(text value)
        AddAttribute(formTarget, value)
    end
    /*
        This action gets the height attribute. The value can be accessed by 
        calling the GetValue() action on the returned height attribute. The height
        attribute is only used for input controls of type image and specifies the 
        height of the image.

        Attribute: Returns The height attribute.

        Attribute: Example
        use Libraries.Web.Input
        use Libraries.Web.Attribute
        Input myInput
        Attribute height = myInput:GetHeight()
        text heightValue = ""
        if height not= undefined
            heightValue = height:GetValue()
        end
    */
    action GetHeight returns Attribute
        return GetAttribute(height)
    end
    /*
        This action sets the height attribute. The height attribute is only used 
        for input controls of type image and specifies the height of the image.

        Attribute: Parameter value The height of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetHeight("50")
    */
    action SetHeight(text value)
        AddAttribute(height, value)
    end
    /*
        This action gets the list attribute. The value can be accessed by 
        calling the GetValue() action on the returned list attribute. The list 
        attribute specifies the pre-defined datalist that is to be used by the 
        input control.

        Attribute: Returns The list attribute.

        Attribute: Example
        use Libraries.Web.Input
        use Libraries.Web.Attribute
        Input myInput
        Attribute list = myInput:GetList()
        text listValue = ""
        if list not= undefined
            listValue = list:GetValue()
        end
    */
    action GetList returns Attribute
        return GetAttribute(list)
    end
    /*
        This action sets the list attribute. The list attribute specifies the pre-
        defined datalist that is to be used by the input control.

        Attribute: Parameter value The list of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetList("input_list")
    */
    action SetList(text value)
        AddAttribute(list, value)
    end
    /*
        This action gets the max attribute. The value can be accessed by 
        calling the GetValue() action on the returned max attribute. The max attribute 
        specifies the maximum value for controls of type number, range, date, datetime, 
        datetime-local, month, time and week.

        Attribute: Returns The max attribute.

        Attribute: Example
        use Libraries.Web.Input
        use Libraries.Web.Attribute
        Input myInput
        Attribute max = myInput:GetMax()
        text maxValue = ""
        if max not= undefined
            maxValue = max:GetValue()
        end
    */
    action GetMax returns Attribute
        return GetAttribute(max)
    end
    /*
        This action sets the max attribute. The max attribute specifies the maximum 
        value for controls of type number, range, date, datetime, datetime-local, 
        month, time and week.

        Attribute: Parameter value The max of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetMax("100")
    */
    action SetMax(text value)
        AddAttribute(max, value)
    end
    /*
        This action gets the maxLength attribute. The value can be accessed by 
        calling the GetValue() action on the returned maxLength attribute. The 
        maxLength attribute specifies the maximum number of characters allowed in
        an input control.

        Attribute: Returns The maxLength attribute.

        Attribute: Example
        use Libraries.Web.Input
        use Libraries.Web.Attribute
        Input myInput
        Attribute maxLength = myInput:GetMaxLength()
        text maxLengthValue = ""
        if maxLength not= undefined
            maxLengthValue = maxLength:GetValue()
        end
    */
    action GetMaxLength returns Attribute
        return GetAttribute(maxLength)
    end
    /*
        This action sets the maxLength attribute. The maxLength attribute specifies 
        the maximum number of characters allowed in an input control.

        Attribute: Parameter value The maxLength of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetMaxLength("55")
    */
    action SetMaxLength(text value)
        AddAttribute(maxLength, value)
    end
    /*
        This action gets the min attribute. The value can be accessed by 
        calling the GetValue() action on the returned min attribute. The min attribute 
        specifies the minimum value for controls of type number, range, date, datetime, 
        datetime-local, month, time and week.

        Attribute: Returns The min attribute.

        Attribute: Example
        use Libraries.Web.Input
        use Libraries.Web.Attribute
        Input myInput
        Attribute min = myInput:GetMin()
        text minValue = ""
        if min not= undefined
            minValue = min:GetValue()
        end
    */
    action GetMin returns Attribute
        return GetAttribute(min)
    end
    /*
        This action sets the min attribute. The min attribute specifies the minimum 
        value for controls of type number, range, date, datetime, datetime-local, 
        month, time and week.

        Attribute: Parameter value The min of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetMin("9")
    */
    action SetMin(text value)
        AddAttribute(min, value)
    end
    /*
        This action gets the value of the multiple attribute. The default value 
        is false. When true the email or file control will accept multiple values.

        Attribute: Returns The multiple attribute.

        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        boolean inputMultiple = myInput:GetMultiple()
    */
    action GetMultiple returns boolean
        Attribute multipleAttribute = GetAttribute(multiple)
        if multipleAttribute not= undefined
            return multipleAttribute:GetValue() = multiple
        end
        return false
    end
    /*
        This action sets the multiple attribute. The default value is false. When 
        true the email or file control will accept multiple values.

        Attribute: Parameter value The multiple of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetMultiple(true)
    */
    action SetMultiple(boolean value)
        if value
            AddAttribute(multiple, value)
        else
            RemoveAttribute(multiple)
        end
    end
    /*
        This action gets the name attribute. The value can be accessed by 
        calling the GetValue() action on the returned name attribute. The name 
        attribute specifies the name of the input control.

        Attribute: Returns The name attribute.

        Attribute: Example
        use Libraries.Web.Input
        use Libraries.Web.Attribute
        Input myInput
        Attribute name = myInput:GetName()
        text nameValue = ""
        if name not= undefined
            nameValue = name:GetValue()
        end
    */
    action GetName returns Attribute
        return GetAttribute(name)
    end
    /*
        This action sets the name attribute. The name attribute specifies the 
        name of the control.

        Attribute: Parameter value The name of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetName("Male_Gender_Input")
    */
    action SetName(text value)
        AddAttribute(name, value)
    end
    /*
        This action gets the pattern attribute. The value can be accessed by 
        calling the GetValue() action on the returned pattern attribute. The pattern 
        attribute defines a regular expression for the input control when it is 
        of type text, search, url, tel, email, or password.

        Attribute: Returns The pattern attribute.

        Attribute: Example
        use Libraries.Web.Input
        use Libraries.Web.Attribute
        Input myInput
        Attribute pattern = myInput:GetPattern()
        text patternValue = ""
        if pattern not= undefined
            patternValue = pattern:GetValue()
        end
    */
    action GetPattern returns Attribute
        return GetAttribute(pattern)
    end
    /*
        This action sets the pattern attribute.The pattern attribute defines a 
        regular expression for the input control when it is of type text, search,
        url, tel, email, or password. 

        Attribute: Parameter value The pattern of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetPattern("1?{{0..9}^3(-?)}^2{0..9}^4")
    */
    action SetPattern(text value)
        AddAttribute(pattern, value)
    end
    /*
        This action gets the placeHolder attribute. The value can be accessed by 
        calling the GetValue() action on the returned placeHolder attribute. The 
        placeHolder attribute acts as a description of the desired input. It will 
        be shown upon page load and dissappear when the value is edited. The 
        placeHolder attribute is only used when the input control is of type text, 
        search, url, tel, email, or password.

        Attribute: Returns The placeHolder attribute.

        Attribute: Example
        use Libraries.Web.Input
        use Libraries.Web.Attribute
        Input myInput
        Attribute placeHolder = myInput:GetPlaceHolder()
        text placeHolderValue = ""
        if placeHolder not= undefined
            placeHolderValue = placeHolder:GetValue()
        end
    */
    action GetPlaceHolder returns Attribute
        return GetAttribute(placeHolder)
    end
    /*
        This action sets the placeHolder attribute. The placeHolder attribute acts 
        as a description of the desired input. It will be shown upon page load and
        dissappear when the value is edited. The placeHolder attribute is only 
        used when the input control is of type text, search, url, tel, email, or
        password.

        Attribute: Parameter value The placeHolder of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetPlaceHolder("First Name")
    */
    action SetPlaceHolder(text value)
        AddAttribute(placeHolder, value)
    end
    /*
        This action gets the value of the readOnly attribute. The default value
        is false. When true the input control's value cannot be modified.

        Attribute: Returns The readOnly attribute.

        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        boolean inputReadOnly = myInput:GetReadOnly()
    */
    action GetReadOnly returns boolean
        Attribute readOnlyAttribute = GetAttribute(readOnly)
        if readOnlyAttribute not= undefined
            return readOnly = readOnlyAttribute:GetValue()
        end
        return false
    end
    /*
        This action sets the readOnly attribute. The default value is false. When
        true the input control's value cannot be modified.

        Attribute: Parameter value The readOnly of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetReadOnly(true)
    */
    action SetReadOnly(boolean value)
        if value
            AddAttribute(readOnly, value)
        else
            RemoveAttribute(readOnly)
        end
    end
    /*
        This action gets the value of the required attribute. The default value
        is false. When true the input control's value must be edited before submission.

        Attribute: Returns The required attribute.

        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        boolean inputRequired = myInput:GetRequired()
    */
    action GetRequired returns boolean
        Attribute requiredAttribute = GetAttribute(required)
        if requiredAttribute not= undefined
            return required = requiredAttribute:GetValue()
        end
        return false
    end
    /*
        This action sets the required attribute. The default value is false. When 
        true the input control's value must be edited before submission.

        Attribute: Parameter value The required of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetRequired(true)
    */
    action SetRequired(boolean value)
        if value
            AddAttribute(required, value)
        else
            RemoveAttribute(required)
        end
    end
    /*
        This action gets the size attribute. The value can be accessed by 
        calling the GetValue() action on the returned size attribute. The size 
        specifies the character width of an input control if it is of type  text, 
        search, tel, url, email, or password.

        Attribute: Returns The size attribute.

        Attribute: Example
        use Libraries.Web.Input
        use Libraries.Web.Attribute
        Input myInput
        Attribute size = myInput:GetSize()
        text sizeValue = ""
        if size not= undefined
            sizeValue = size:GetValue()
        end
    */
    action GetSize returns Attribute
        return GetAttribute(size)
    end
    /*
        This action sets the size attribute. The size specifies the character width 
        of an input control if it is of type  text, search, tel, url, email, or 
        password.

        Attribute: Parameter value The size of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetSize("50")
    */
    action SetSize(text value)
        AddAttribute(size, value)
    end
    /*
        This action gets the imageAddress attribute. The value can be accessed by 
        calling the GetValue() action on the returned imageAddress attribute. The 
        imageAddress attribute specifies the address of the image input control.

        Attribute: Returns The imageAddress attribute.

        Attribute: Example
        use Libraries.Web.Input
        use Libraries.Web.Attribute
        Input myInput
        Attribute imageAddress = myInput:GetImageAddress()
        text imageAddressValue = ""
        if imageAddress not= undefined
            imageAddressValue = imageAddress:GetValue()
        end
    */
    action GetImageAddress returns Attribute
        return GetAttribute(imageAddress)
    end
    /*
        This action sets the imageAddress attribute. The imageAddress attribute 
        specifies the address of the image input control.

        Attribute: Parameter value The imageAddress of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetImageAddress("go_button.jpg")
    */
    action SetImageAddress(text value)
        AddAttribute(imageAddress, value)
    end
    /*
        This action gets the step attribute. The value can be accessed by 
        calling the GetValue() action on the returned step attribute. The step 
        specifies the legal number intervals for the input control when it is of 
        type number, range, date, datetime, datetime-local, month, time or week.

        Attribute: Returns The step attribute.

        Attribute: Example
        use Libraries.Web.Input
        use Libraries.Web.Attribute
        Input myInput
        Attribute step = myInput:GetStep()
        text stepValue = ""
        if step not= undefined
            stepValue = step:GetValue()
        end
    */
    action GetStep returns Attribute
        return GetAttribute(step)
    end
    /*
        This action sets the step attribute. The step specifies the legal number 
        intervals for the input control when it is of type number, range, date, 
        datetime, datetime-local, month, time or week.

        Attribute: Parameter value The step of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetStep("5")
    */
    action SetStep(text value)
        AddAttribute(step, value)
    end
    /*
        This action gets the type attribute. The value can be accessed by 
        calling the GetValue() action on the returned type attribute. The type 
        attribute specifies the type of the input control.
            Acceptable values:  button
                                checkbox
                                color
                                date
                                datetime
                                datetime-local
                                email
                                file
                                hidden
                                image
                                month
                                number
                                password
                                radio
                                range
                                reset
                                search
                                submit
                                tel
                                text
                                time
                                url
                                week 

        Attribute: Returns The type attribute.

        Attribute: Example
        use Libraries.Web.Input
        use Libraries.Web.Attribute
        Input myInput
        Attribute type = myInput:GetType()
        text typeValue = ""
        if type not= undefined
            typeValue = type:GetValue()
        end
    */
    action GetType returns Attribute
        return GetAttribute(type)
    end
    /*
        This action sets the type attribute. The type attribute specifies the type 
        of the input control.
            Acceptable values:  button
                                checkbox
                                color
                                date
                                datetime
                                datetime-local
                                email
                                file
                                hidden
                                image
                                month
                                number
                                password
                                radio
                                range
                                reset
                                search
                                submit
                                tel
                                text
                                time
                                url
                                week 

        Attribute: Parameter value The type of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetType("button")
    */
    action SetType(text value)
        AddAttribute(type, value)
    end
    /*
        This action gets the defaultValue attribute. The value can be accessed by 
        calling the GetValue() action on the returned defaultValue attribute. The
        defaultValue attribute specifies the default value of the input control.

        Attribute: Returns The defaultValue attribute.

        Attribute: Example
        use Libraries.Web.Input
        use Libraries.Web.Attribute
        Input myInput
        Attribute defaultValue = myInput:GetDefaultValue()
        text defaultValueValue = ""
        if defaultValue not= undefined
            defaultValueValue = defaultValue:GetValue()
        end
    */
    action GetDefaultValue returns Attribute
        return GetAttribute(defaultValue)
    end
    /*
        This action sets the defaultValue attribute. The defaultValue attribute 
        specifies the default value of the input control.

        Attribute: Parameter value The defaultValue of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetDefaultValue("gender_female")
    */
    action SetDefaultValue(text value)
        AddAttribute(defaultValue, value)
    end
    /*
        This action gets the width attribute. The value can be accessed by 
        calling the GetValue() action on the returned width attribute. The width 
        attribute specifies the width of an image input control.

        Attribute: Returns The width attribute.

        Attribute: Example
        use Libraries.Web.Input
        use Libraries.Web.Attribute
        Input myInput
        Attribute width = myInput:GetWidth()
        text widthValue = ""
        if width not= undefined
            widthValue = width:GetValue()
        end
    */
    action GetWidth returns Attribute
        return GetAttribute(width)
    end
    /*
        This action sets the width attribute. The width attribute specifies the 
        width of an image input control.

        Attribute: Parameter value The width of the input.
        
        Attribute: Example
        use Libraries.Web.Input
        Input myInput
        myInput:SetWidth("15")
    */
    action SetWidth(text value)
        AddAttribute(width, value)
    end

    action Generate returns text
        text result = "<input " 
        Attributes attributes = parent:WebTag:GetAttributes()
        attributeText = attributes:Generate()
        result = result + attributeText + ">"
        result = result + me:GenerateNestedTags()
        result = result + GetDescription() + "</input>"
        return result
    end
end