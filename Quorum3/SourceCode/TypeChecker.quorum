package Libraries.Language.Compile.Symbol

use Libraries.Containers.HashTable
use Libraries.Language.Compile.CompilerErrorType
use Libraries.Language.Compile.Translate.all
use Libraries.Containers.Array

class TypeChecker
    HashTable<text, TypeCheckResult> results
    Type constants
    JavaBytecodeOpcodes opcodes
    on create
        GenerateTypeCheckingTable()
    end

    action GenerateTypeCheckingTable
        TypeCheckResult result = undefined
        Type type = undefined
        Operation opConstant
        JavaOpcodeWriter opcodeWriter = undefined
        ////////////////////////////////////////////////////////////////////////
        //INTEGER INTEGER
        ////////////////////////////////////////////////////////////////////////
        Operation op = GetOperation(opConstant:PLUS)
        text key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
                constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToInteger()
        BinaryOpcode binary = GetBinaryOpcode(opcodes:GetIntegerAdd(), -1, -1, type)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:MINUS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToInteger()
        binary = GetBinaryOpcode(opcodes:GetIntegerSubtract(), -1, -1, type)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:TIMES)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToInteger()
        binary = GetBinaryOpcode(opcodes:GetIntegerMultiply(), -1, -1, type)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:DIVIDE)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToInteger()
        binary = GetBinaryOpcode(opcodes:GetIntegerDivide(), -1, -1, type)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:MODULUS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToInteger()
        binary = GetBinaryOpcode(opcodes:GetIntegerModulus(), -1, -1, type)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:EQUALS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        ComparisonOpcode compare = GetBinaryComparisonOpcode(opcodes:GetIfIntegerNotEquals(), -1, -1, type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:NOT_EQUALS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfIntegerEquals(), -1, -1, type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:GREATER_EQUALS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfIntegerLessThan(), -1, -1, type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:GREATER)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfIntegerLessThanEquals(), -1, -1, type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:LESS_EQUALS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfIntegerGreaterThan(), -1, -1, type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:LESS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfIntegerGreaterThan(), -1, -1, type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        ////////////////////////////////////////////////////////////////////////
        //NUMBER NUMBER
        ////////////////////////////////////////////////////////////////////////
        op = GetOperation(opConstant:PLUS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleAdd(), -1, -1, type)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:MINUS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleSubtract(), -1, -1, type)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:TIMES)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleMultiply(), -1, -1, type)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:DIVIDE)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleDivide(), -1, -1, type)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:MODULUS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleModulus(), -1, -1, type)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:EQUALS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfNotEquals(), -1, opcodes:GetCompareDoubleLess(), type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:NOT_EQUALS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfEquals(), -1, opcodes:GetCompareDoubleLess(), type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:GREATER_EQUALS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfLessThan(), -1, opcodes:GetCompareDoubleLess(), type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:GREATER)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfLessThanEquals(), -1, opcodes:GetCompareDoubleLess(), type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:LESS_EQUALS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfGreaterThan(), -1, opcodes:GetCompareDoubleGreater(), type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:LESS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfGreaterThanEquals(), -1, opcodes:GetCompareDoubleGreater(), type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        ////////////////////////////////////////////////////////////////////////
        //Boolean Boolean
        ////////////////////////////////////////////////////////////////////////
        op = GetOperation(opConstant:AND)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY,
            constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)

        op = GetOperation(opConstant:OR)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY,
            constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)

        op = GetOperation(opConstant:EQUALS)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY,
            constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfIntegerNotEquals(), -1, -1, type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:NOT_EQUALS)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY,
            constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfIntegerEquals(), -1, -1, type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        ////////////////////////////////////////////////////////////////////////
        //TEXT TEXT
        ////////////////////////////////////////////////////////////////////////
        op = GetOperation(opConstant:PLUS)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
            constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToText()
        ConcatenateOpcode textConcat = GetConcatenateOpcode(false, false, constants:TEXT_PRIMITIVE_KEY, type)
        result:SetQuorumOpcode(textConcat)
        results:Add(key, result)

        op = GetOperation(opConstant:EQUALS)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
            constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfNotEquals(), -1, -1, type)
        compare:isTextCompare = true
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:NOT_EQUALS)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
            constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfEquals(), -1, -1, type)
        compare:isTextCompare = true
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:GREATER_EQUALS)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
            constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfLessThan(), -1, -1, type)
        compare:isTextCompare = true
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:GREATER)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
            constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfLessThanEquals(), -1, -1, type)
        compare:isTextCompare = true
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:LESS_EQUALS)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
            constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfGreaterThan(), -1, -1, type)
        compare:isTextCompare = true
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:LESS)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
            constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfGreaterThanEquals(), -1, -1, type)
        compare:isTextCompare = true
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        ////////////////////////////////////////////////////////////////////////
        //Assignment Operations
        ////////////////////////////////////////////////////////////////////////
        //Assign Integer integer
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, undefined, true, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToInteger()
        AssignmentOpcode assignment = GetAssignmentOpcode(opcodes:GetIntegerStore())
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        //Assign Text Text
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
            constants:TEXT_PRIMITIVE_KEY, undefined, true, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToText()
        assignment = GetAssignmentOpcode(opcodes:GetObjectStore())
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        //Assign Number Number
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, undefined, true, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToNumber()
        assignment = GetAssignmentOpcode(opcodes:GetDoubleStore())
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        //Assign Number Integer
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, undefined, true, false)
        result = GetWideningConvertResult()
        opcodeWriter = result:writer
        type = result:result
        type:SetToNumber()
        assignment = GetAssignmentOpcode(opcodes:GetIntegerToDouble(), opcodes:GetDoubleStore())
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        //Assign Boolean Boolean
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY,
            constants:BOOLEAN_PRIMITIVE_KEY, undefined, true, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        assignment = GetAssignmentOpcode(opcodes:GetIntegerStore())
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        ////////////////////////////////////////////////////////////////////////
        //Unary Operations
        ////////////////////////////////////////////////////////////////////////
        text null = undefined
        op = GetOperation(opConstant:NOT)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY,
            null, op, false, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        FlipBooleanOpcode flipper
        result:SetQuorumOpcode(flipper)
        results:Add(key, result)

        //unary negate integer
        op = GetOperation(opConstant:MINUS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            null, op, false, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToInteger()
        NegateUnaryOpcode negateInteger
        negateInteger:SetJavaOpcode(opcodes:GetNegateInteger())
        result:SetQuorumOpcode(negateInteger)
        results:Add(key, result)

        //unary negate number
        op = GetOperation(opConstant:MINUS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            null, op, false, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToNumber()
        NegateUnaryOpcode negateNumber
        negateNumber:SetJavaOpcode(opcodes:GetNegateDouble())
        result:SetQuorumOpcode(negateNumber)
        results:Add(key, result)

        ////////////////////////////////////////////////////////////////////////
        //Return types
        ////////////////////////////////////////////////////////////////////////
        //integer integer
        op = GetOperation(opConstant:RETURN)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToInteger()
        results:Add(key, result)

        //text text
        op = GetOperation(opConstant:RETURN)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
            constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToInteger()
        results:Add(key, result)

        //text undefined
        op = GetOperation(opConstant:RETURN)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
            constants:UNDEFINED_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToInteger()
        results:Add(key, result)

        //number number
        op = GetOperation(opConstant:RETURN)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToNumber()
        results:Add(key, result)

        //boolean boolean
        op = GetOperation(opConstant:RETURN)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY,
            constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)

        //number integer
        op = GetOperation(opConstant:RETURN)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        TypeConversionPoints points = result:points
        points:SetPoints(points:LOSSLESS_CONVERT)
        results:Add(key, result)

        //integer text
        op = GetOperation(opConstant:RETURN)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
            constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToText()
        points = result:points
        points:SetPoints(points:LOSSLESS_CONVERT)
        results:Add(key, result)

        //number text
        op = GetOperation(opConstant:RETURN)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
            constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToText()
        points = result:points
        points:SetPoints(points:LOSSLESS_CONVERT)
        results:Add(key, result)

        //boolean text
        op = GetOperation(opConstant:RETURN)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY,
            constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToText()
        points = result:points
        points:SetPoints(points:LOSSLESS_CONVERT)
        results:Add(key, result)

        ////////////////////////////////////////////////////////////////////////
        //INTEGER NUMBER
        ////////////////////////////////////////////////////////////////////////
        //+
        op = GetOperation(opConstant:PLUS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleAdd(), opcodes:GetIntegerToDouble(), -1, type)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:PLUS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleAdd(), -1, opcodes:GetIntegerToDouble(), type)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        //-
        op = GetOperation(opConstant:MINUS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleSubtract(), opcodes:GetIntegerToDouble(), -1, type)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:MINUS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleSubtract(), -1, opcodes:GetIntegerToDouble(), type)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        //+
        op = GetOperation(opConstant:TIMES)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleMultiply(), opcodes:GetIntegerToDouble(), -1, type)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:TIMES)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleMultiply(), -1, opcodes:GetIntegerToDouble(), type)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        // divide
        op = GetOperation(opConstant:DIVIDE)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleDivide(), opcodes:GetIntegerToDouble(), -1, type)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:DIVIDE)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleDivide(), -1, opcodes:GetIntegerToDouble(), type)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        //mod
        op = GetOperation(opConstant:MODULUS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleModulus(), opcodes:GetIntegerToDouble(), -1, type)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        op = GetOperation(opConstant:MODULUS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        binary = GetBinaryOpcode(opcodes:GetDoubleModulus(), -1, opcodes:GetIntegerToDouble(), type)
        result:SetQuorumOpcode(binary)
        results:Add(key, result)

        // >=
        op = GetOperation(opConstant:GREATER_EQUALS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfLessThan(), opcodes:GetIntegerToDouble(), opcodes:GetCompareDoubleLess(), type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:GREATER_EQUALS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryTwoOpComparisonOpcode(opcodes:GetIfLessThan(), -1,-1, opcodes:GetIntegerToDouble(), opcodes:GetCompareDoubleLess(), type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        // >
        op = GetOperation(opConstant:GREATER)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfLessThanEquals(), opcodes:GetIntegerToDouble(), opcodes:GetCompareDoubleLess(), type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:GREATER)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryTwoOpComparisonOpcode(opcodes:GetIfLessThanEquals(), -1,-1, opcodes:GetIntegerToDouble(), opcodes:GetCompareDoubleLess(), type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        // =
        op = GetOperation(opConstant:EQUALS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfNotEquals(), opcodes:GetIntegerToDouble(), opcodes:GetCompareDoubleLess(), type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:EQUALS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryTwoOpComparisonOpcode(opcodes:GetIfNotEquals(), -1,-1, opcodes:GetIntegerToDouble(), opcodes:GetCompareDoubleLess(), type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

         // not=
        op = GetOperation(opConstant:NOT_EQUALS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfEquals(), opcodes:GetIntegerToDouble(), opcodes:GetCompareDoubleLess(), type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:NOT_EQUALS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryTwoOpComparisonOpcode(opcodes:GetIfEquals(), -1,-1, opcodes:GetIntegerToDouble(), opcodes:GetCompareDoubleLess(), type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        // <=
        op = GetOperation(opConstant:LESS_EQUALS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfGreaterThan(), opcodes:GetIntegerToDouble(), opcodes:GetCompareDoubleLess(), type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:LESS_EQUALS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryTwoOpComparisonOpcode(opcodes:GetIfGreaterThan(), -1,-1, opcodes:GetIntegerToDouble(), opcodes:GetCompareDoubleLess(), type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        // <
        op = GetOperation(opConstant:LESS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryComparisonOpcode(opcodes:GetIfGreaterThanEquals(), opcodes:GetIntegerToDouble(), opcodes:GetCompareDoubleLess(), type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)

        op = GetOperation(opConstant:LESS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToBoolean()
        compare = GetBinaryTwoOpComparisonOpcode(opcodes:GetIfGreaterThanEquals(), -1,-1, opcodes:GetIntegerToDouble(), opcodes:GetCompareDoubleLess(), type)
        result:SetQuorumOpcode(compare)
        results:Add(key, result)
        
        ////////////////////////////////////////////////////////////////////////
        //Text Conversion
        ////////////////////////////////////////////////////////////////////////
        op = GetOperation(opConstant:PLUS)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToText()
        ConcatenateOpcode concat = GetConcatenateOpcode(true, false, constants:INTEGER_PRIMITIVE_KEY, type)
        result:SetQuorumOpcode(concat)
        results:Add(key, result)

        op = GetOperation(opConstant:PLUS)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToText()
        concat = GetConcatenateOpcode(false, true, constants:INTEGER_PRIMITIVE_KEY, type)
        result:SetQuorumOpcode(concat)
        results:Add(key, result)

        op = GetOperation(opConstant:PLUS)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToText()
        concat = GetConcatenateOpcode(true, false, constants:NUMBER_PRIMITIVE_KEY, type)
        result:SetQuorumOpcode(concat)
        results:Add(key, result)

        op = GetOperation(opConstant:PLUS)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToText()
        concat = GetConcatenateOpcode(false, true, constants:NUMBER_PRIMITIVE_KEY, type)
        result:SetQuorumOpcode(concat)
        results:Add(key, result)

        op = GetOperation(opConstant:PLUS)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToText()
        concat = GetConcatenateOpcode(true, false, constants:BOOLEAN_PRIMITIVE_KEY, type)
        result:SetQuorumOpcode(concat)
        results:Add(key, result)

        op = GetOperation(opConstant:PLUS)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToText()
        concat = GetConcatenateOpcode(false, true, constants:BOOLEAN_PRIMITIVE_KEY, type)
        result:SetQuorumOpcode(concat)
        results:Add(key, result)

        ////////////////////////////////////////////////////////////////////////
        //TYPE CASTING - EXPLICIT
        ////////////////////////////////////////////////////////////////////////
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToText()
        results:Add(key, result)

        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToInteger()
        results:Add(key, result)

        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToNumber()
        results:Add(key, result)

        //text to integer and back again
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNarrowingConvertResult()
        type = result:result
        type:SetToInteger()
        results:Add(key, result)

        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToText()
        results:Add(key, result)

        //text to number and back again
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNarrowingConvertResult()
        type = result:result
        type:SetToNumber()
        results:Add(key, result)

        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToText()
        results:Add(key, result)

        //number to integer and back again
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        results:Add(key, result)

        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNarrowingConvertResult()
        type = result:result
        type:SetToInteger()
        results:Add(key, result)

        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetNarrowingConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)

        //number to boolean and back again
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNarrowingConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)

        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        results:Add(key, result)

        //integer to boolean and back again
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNarrowingConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)

        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToInteger()
        results:Add(key, result)

        //text to boolean and back again
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNarrowingConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)

        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToText()
        results:Add(key, result)

        ////////////////////////////////////////////////////////////////////////
        //TYPE CASTING - IMPLICIT
        ////////////////////////////////////////////////////////////////////////
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToText()
        results:Add(key, result)

        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToInteger()
        results:Add(key, result)

        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToNumber()
        results:Add(key, result)

        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToText()
        results:Add(key, result)

        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToText()
        results:Add(key, result)

        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        results:Add(key, result)
        
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetNoConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)

        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToText()
        results:Add(key, result)

        AddAutoBoxedTypes()
    end

    action AddAutoBoxedTypes
        TypeCheckResult result = undefined
        Type type = undefined
        Operation opConstant
        JavaOpcodeWriter opcodeWriter = undefined
        TypeConversionPoints points = undefined

        //implicit cast from integer to object
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:OBJECT_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetSubclassWideningConvertResult()
        type = result:result
        type:SetToIntegerObject()
        points = result:points
        points:SetPoints(points:EXACT_AUTOBOX)
        results:Add(key, result)

        //implicit cast integer to Integer
        op = GetOperation(opConstant:AUTOBOX_CAST)
        key = GenerateTypeCheckKey(constants:INTEGER_OBJECT_KEY, constants:INTEGER_PRIMITIVE_KEY, op, false)
        result = GetSubclassWideningConvertResult()
        type = result:result
        type:SetToIntegerObject()
        points = result:points
        points:SetPoints(points:EXACT_AUTOBOX)
        results:Add(key, result)

        //implicit cast from Integer to integer
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:INTEGER_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToIntegerObject()
        points = result:points
        points:SetPoints(points:EXACT_AUTOBOX)
        results:Add(key, result)

        //implicit cast from Integer to text
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:INTEGER_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToText()
        results:Add(key, result)

        //implicit cast from Integer to boolean
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:INTEGER_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)

        //Assign Integer object to integer
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:INTEGER_OBJECT_KEY, undefined, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToInteger()
        results:Add(key, result)

        //Assign integer object to primitive number
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_OBJECT_KEY, undefined, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        results:Add(key, result)

        //explicit cast from Integer to integer
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:INTEGER_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToInteger()
        results:Add(key, result)

        //explicit cast from Integer to number
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:INTEGER_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToNumber()
        results:Add(key, result)

        //explicit cast from Integer to text
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:INTEGER_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToText()
        results:Add(key, result)

        //explicit cast from Integer to boolean
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:INTEGER_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)

        //explicit cast from Integer to boolean 1739
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:OBJECT_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToNumberObject()
        points = result:points
        points:SetPoints(points:PARENT_AUTOBOX)
        results:Add(key, result)

        //explicit cast from Integer to boolean 1749
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_OBJECT_KEY, constants:NUMBER_PRIMITIVE_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToNumberObject()
        points = result:points
        points:SetPoints(points:EXACT_AUTOBOX)
        results:Add(key, result)

        //Implicit cast from number object to number: 1760
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:NUMBER_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToNumber()
        points = result:points
        points:SetPoints(points:EXACT_AUTOBOX)
        results:Add(key, result)

        //Implicit cast from number object to number: 1778
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:NUMBER_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToText()
        results:Add(key, result)

        //Implicit cast from number object to boolean: 1787
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:NUMBER_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)

        //Assgin number object to number: 1797
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:NUMBER_OBJECT_KEY, undefined, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToNumber()
        results:Add(key, result)

        //Cast number object to integer: 1823
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:NUMBER_OBJECT_KEY, undefined, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToInteger()
        results:Add(key, result)

        //Cast number object to text: 1832
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:NUMBER_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToText()
        results:Add(key, result)

        //Cast number object to boolean: 1840
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:NUMBER_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)

        //Cast text to object: 1850
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:OBJECT_KEY, constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetSubclassWideningConvertResult()
        type = result:result
        type:SetToTextObject()
        points = result:points
        points:SetPoints(points:PARENT_AUTOBOX)
        results:Add(key, result)

        //Cast text to text object: 1860
        op = GetOperation(opConstant:AUTOBOX_CAST)
        key = GenerateTypeCheckKey(constants:TEXT_OBJECT_KEY, constants:TEXT_PRIMITIVE_KEY, op, false)
        result = GetSubclassWideningConvertResult()
        type = result:result
        type:SetToTextObject()
        points = result:points
        points:SetPoints(points:EXACT_AUTOBOX)
        results:Add(key, result)

        //Cast text object to text: 1870
        op = GetOperation(opConstant:AUTOBOX_CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:TEXT_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToText()
        points = result:points
        points:SetPoints(points:EXACT_AUTOBOX)
        results:Add(key, result)

        //Cast text object to integer: 1880
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:TEXT_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToInteger()
        results:Add(key, result)

        //Cast text object to number: 1889
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:TEXT_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToNumber()
        results:Add(key, result)

        //Cast text object to boolean: 1898
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:TEXT_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)

        //assign: 1907
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:TEXT_OBJECT_KEY, undefined, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToText()
        results:Add(key, result)

        //assign: 1923
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:TEXT_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToText()
        results:Add(key, result)

        //assign: 1932
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:TEXT_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToInteger()
        results:Add(key, result)

        //assign: 1942
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:TEXT_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToNumber()
        results:Add(key, result)

        //assign: 1951
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:TEXT_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)

        //assign: 1960
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:OBJECT_KEY, constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetSubclassWideningConvertResult()
        type = result:result
        type:SetToBooleanObject()
        points = result:points
        points:SetPoints(points:PARENT_AUTOBOX)
        results:Add(key, result)

        //assign: 1970
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:BOOLEAN_OBJECT_KEY, constants:BOOLEAN_PRIMITIVE_KEY, op, false)
        result = GetSubclassWideningConvertResult()
        type = result:result
        type:SetToBooleanObject()
        points = result:points
        points:SetPoints(points:EXACT_AUTOBOX)
        results:Add(key, result)

        //assign: 1980
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:BOOLEAN_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToBoolean()
        points = result:points
        points:SetPoints(points:EXACT_AUTOBOX)
        results:Add(key, result)

        //assign: 1990
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:BOOLEAN_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToInteger()
        results:Add(key, result)

        //assign: 1999
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:BOOLEAN_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToNumber()
        results:Add(key, result)

        //assign: 2008
        op = GetOperation(opConstant:IMPLICIT_CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:BOOLEAN_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToText()
        results:Add(key, result)

        //assign: 2016
        op = undefined
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:BOOLEAN_OBJECT_KEY, op, false)
        result = GetWideningConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)

        //assign: 2033
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:BOOLEAN_PRIMITIVE_KEY, constants:BOOLEAN_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToBoolean()
        results:Add(key, result)

        //assign: 2042
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:INTEGER_PRIMITIVE_KEY, constants:BOOLEAN_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToInteger()
        results:Add(key, result)

        //assign: 2051
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:NUMBER_PRIMITIVE_KEY, constants:BOOLEAN_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToNumber()
        results:Add(key, result)

        //assign: 2060
        op = GetOperation(opConstant:CAST)
        key = GenerateTypeCheckKey(constants:TEXT_PRIMITIVE_KEY, constants:BOOLEAN_OBJECT_KEY, op, false)
        result = GetSubclassNarrowingConvertResult()
        type = result:result
        type:SetToText()
        results:Add(key, result)
    end

    private action GetAssignmentOpcode(integer opcode) returns AssignmentOpcode
        AssignmentOpcode op
        op:SetJavaOpcode(opcode)
        return op
    end

    private action GetAssignmentOpcode(integer opcode, integer secondOpcode) returns AssignmentOpcode
        AssignmentOpcode op
        op:SetJavaOpcode(opcode)
        op:SetJavaOpcode2(secondOpcode)
        return op
    end

    private action GetBinaryComparisonOpcode(integer opcode, integer leftOpcode,
        integer rightOpcode, Type type) returns ComparisonOpcode
        ComparisonOpcode op
        op:SetJavaOpcode(opcode)
        op:SetJavaLeftOpcode(leftOpcode)
        op:SetJavaRightOpcode(rightOpcode)
        op:SetType(type)
        return op
    end

    private action GetBinaryTwoOpComparisonOpcode(integer opcode, integer leftOpcode1,
        integer leftOpcode2, integer rightOpcode1, integer rightOpcode2, Type type) returns ComparisonOpcode
        ComparisonOpcode op
        op:SetJavaOpcode(opcode)
        op:SetJavaLeftOpcode(leftOpcode1)
        op:SetJavaLeftOpcode2(leftOpcode2)
        op:SetJavaRightOpcode(rightOpcode1)
        op:SetJavaRightOpcode2(rightOpcode2)
        op:SetType(type)
        return op
    end

    private action GetBinaryOpcode(integer opcode, integer leftOpcode, 
        integer rightOpcode, Type type) returns BinaryOpcode
        BinaryOpcode op
        op:SetJavaOpcode(opcode)
        op:SetJavaLeftOpcode(leftOpcode)
        op:SetJavaRightOpcode(rightOpcode)
        op:SetType(type)
        return op
    end

    private action GetConcatenateOpcode(boolean left, boolean right, 
        text convertText, Type type) returns ConcatenateOpcode
        ConcatenateOpcode op
        op:convertLeftToText = left
        op:convertRightToText = right
        op:SetConvertStringForConcatenation(convertText)
        op:SetType(type)
        return op
    end

    private action GetSwapOpcodes(text top, text second) returns Array<integer>
        Array<integer> array
        text num = constants:NUMBER_PRIMITIVE_KEY
        if top not= num and second not= num
            array:Add(opcodes:GetSwap())
        elseif top = num and second = num
            array:Add(opcodes:GetDuplicateDoubleUp2())
            array:Add(opcodes:GetPopDouble())
        elseif top = num
            array:Add(opcodes:GetDuplicateDoubleUp1())
            array:Add(opcodes:GetPopDouble())
        else
            array:Add(opcodes:GetDuplicateUp2())
            array:Add(opcodes:GetPop())
        end
        return array
    end

    action GetOperation(integer value) returns Operation
        Operation op
        op:SetOperation(value)
        return op
    end

    action GetNoConvertResult returns TypeCheckResult
        TypeCheckResult result
        TypeConversionConstants c = result:conversion
        c:SetConversion(c:NONE)
        result:errorMessage = ""
        return result
    end

    action GetWideningConvertResult returns TypeCheckResult
        TypeCheckResult result
        TypeConversionConstants c = result:conversion
        c:SetConversion(c:WIDENING)
        result:errorMessage = ""
        return result
    end

    action GetSubclassWideningConvertResult returns TypeCheckResult
        TypeCheckResult result
        TypeConversionConstants c = result:conversion
        c:SetConversion(c:SUBCLASS_WIDENING)
        result:errorMessage = ""
        return result
    end

    action GetSubclassNarrowingConvertResult returns TypeCheckResult
        TypeCheckResult result
        TypeConversionConstants c = result:conversion
        c:SetConversion(c:SUBCLASS_NARROWING)
        result:errorMessage = ""
        return result
    end

    action GetNarrowingConvertResult returns TypeCheckResult
        TypeCheckResult result
        TypeConversionConstants c = result:conversion
        c:SetConversion(c:NARROWING)
        result:errorMessage = ""
        return result
    end

    action GenerateTypeCheckKey(text left, text right,
            Operation op, boolean assignment) returns text
        return GenerateTypeCheckKey(left, right, op, assignment, false)
    end

    action GenerateTypeCheckKey(text left, text right,
            Operation op, boolean assignment, boolean local) returns text

        if right = undefined
            right = "|nullType|"
        end
        text a = "f"
        if assignment 
            a = "t"
        end

        if op not= undefined 
            return left  + "$" + right + "$" + op:GetText() + "$" + a + "$" + local
        else
            return left  + "$" + right + "$" + a + "$" + local
        end
    end
    
    action Check(Type left, Type right, Operation op) returns TypeCheckResult
        return Check(left, right, op, false, false)
    end

    action Check(Type left, Type right, Operation op, boolean assignment) returns TypeCheckResult
        return Check(left, right, op, assignment, false)
    end

    action Check(Type left, Type right, Operation op, boolean assignment, boolean local) returns TypeCheckResult
        text leftKey = ""
        text rightKey = ""

        if left not= undefined
            leftKey = left:GetStaticKey()
        end

        if right not= undefined
            rightKey = right:GetStaticKey()
        end

        text key = GenerateTypeCheckKey(leftKey, rightKey, op, assignment, local)
        TypeCheckResult result = results:GetValue(key)

        if result = undefined
            TypeCheckResult newResult
            CompilerErrorType error
            result = newResult

            TypeConversionConstants convert = result:conversion
            convert:SetConversion(convert:INCOMPATIBLE)
            text quote = leftKey:GetDoubleQuote()
            if assignment
                //leftKey = "" //account for generics later
                //rightKey = "" //account for generics later

                result:errorMessage = "Cannot assign a value of type " + quote + 
                    rightKey + quote + "" + " to a variable of type " + quote + leftKey + quote + "."
                error:SetCurrentType(error:INVALID_OPERATOR)
                result:errorType = error
            else 
                result:errorMessage = "The operation " + quote + leftKey + quote + " " + op:GetText()
                    + " " + quote + rightKey + quote + ", is not allowed."
                error:SetCurrentType(error:INCOMPATIBLE_TYPES)
                result:errorType = error
            end
        end
        
        return result
    end

    action Check(Type left, Operation op) returns TypeCheckResult
        text leftKey = ""
        if left not= undefined
            leftKey = left:GetStaticKey()
        end

        text value = undefined
        text key = GenerateTypeCheckKey(leftKey, value, op, false)
        TypeCheckResult result = results:GetValue(key)

        text quote = key:GetDoubleQuote()
        if result = undefined
            TypeCheckResult newResult
            CompilerErrorType error
            result = newResult
            TypeConversionConstants convert = result:conversion
            convert:SetConversion(convert:INCOMPATIBLE)
                result:errorMessage = "The unary operation " + quote + op:GetText() + 
                    quote + " " + leftKey + " is not allowed."

                error:SetCurrentType(error:INVALID_OPERATOR)
                result:errorType = error
        end
        return result
    end
end