use Libraries.Compute.Random

class Biology
    Random random //required up here to seed correctly
    action IsDNA(text dna) returns boolean
        index = 0
        repeat dna:GetSize() times
            if dna:GetCharacter(index) not= "A" and dna:GetCharacter(index) not= "C" and dna:GetCharacter(index) not= "G" and dna:GetCharacter(index) not= "T"
                text character = dna:GetCharacter(index)
                return false
            end
            index = index + 1
        end
        return true
    end

    action Clone(text DNA) returns text
        //loop through DNA string and change a letter within it 10% of the time
        
        
        integer randomNumber = random:RandomIntegerBetween(1,10)
        if(randomNumber = 7)
        //cause mutation on random character
        text mutatedDNA = ""

        integer randomIndex = random:RandomIntegerBetween(0, DNA:GetSize() - 1)
        integer randomNumber2 = random:RandomIntegerBetween(1, 3)
        text nucleotide = DNA:GetCharacter(randomIndex)

            if nucleotide not= "A" and nucleotide not= "C" and nucleotide not= "G" and nucleotide not= "T"
                return "GATTACA"
            else
                //if the random index isn't the first or last character in the string
                if randomIndex not= 0 and randomIndex not= DNA:GetSize() - 1
                    mutatedDNA = DNA:GetSubtext(0, randomIndex)
                    mutatedDNA = mutatedDNA + mutateDNA(nucleotide, randomNumber2)
                    mutatedDNA = mutatedDNA + DNA:GetSubtext(randomIndex + 1)
                end

                //if the random index is 0
                if randomIndex = 0
                    mutatedDNA = mutatedDNA + mutateDNA(nucleotide, randomNumber2)
                    mutatedDNA = mutatedDNA + DNA:GetSubtext(1)
                end
                
                //if the random index is at the end of the character array
                if randomIndex = DNA:GetSize() - 1
                    mutatedDNA = mutatedDNA + DNA:GetSubtext(0, DNA:GetSize() - 1)
                    mutatedDNA = mutatedDNA + mutateDNA(nucleotide, randomNumber2)
                end
            end

            return mutatedDNA
        end
        return DNA
    end

    action mutateDNA(text nucleotide, integer mutateNumber) returns text
    // if nucleotide = "A", 1 = C, 2 = G, 3 = T
        if nucleotide = "A"
            if mutateNumber = 1
                return "C"
            elseif mutateNumber = 2
                return "G"
            elseif mutateNumber = 3
                return "T"
            end
        end

    // if nucleotide = "C", 1 = A, 2 = G, 3 = T
        if nucleotide = "C"
            if mutateNumber = 1
                return "A"
            elseif mutateNumber = 2
                return "G"
            elseif mutateNumber = 3
                return "T"
            end
        end

    // if nucleotide = "G", 1 = A, 2 = C, 3 = T
        if nucleotide = "G"
            if mutateNumber = 1
                return "A"
            elseif mutateNumber = 2
                return "C"
            elseif mutateNumber = 3
                return "T"
            end
        end

    // if nucleotide = "T", 1 = A, 2 = C, 3 = G
        if nucleotide = "T"
            if mutateNumber = 1
                return "A"
            elseif mutateNumber = 2
                return "C"
            elseif mutateNumber = 3
                return "G"
            end
        end
        return ""
    end

    action IsParent(text child, text possibleParent) returns boolean
        // Check if both the child and possible parent are DNA at all; also check that child and possible parent DNA are the same size
        if(child:GetSize() = possibleParent:GetSize() and IsDNA(child) and IsDNA(possibleParent))
            // If they are, loop through the characters of child and possible parent and count how many of them are the same
            integer index = 0
            integer count = 0
            repeat child:GetSize() times
                if child:GetCharacter(index) = possibleParent:GetCharacter(index)
                    count = count + 1
                end
                index = index + 1
            end
            // The DNA counts as a parent if the DNA has at least 25% equal characters
            number percentSimilar = 1.0 * count / child:GetSize()
            if(percentSimilar > 0.25)
                return true
            end
        end
        return false
    end

    action Breed(text parent1, text parent2) returns text
        // Check that both parents are valid DNA sequences, and of the same length
        Biology bio
        text child = ""
        Random rand
        if(parent1:GetSize() = parent2:GetSize() and bio:IsDNA(parent1) and bio:IsDNA(parent2))
            // Loop through each character, create a new string that will either take the parent1's or parent2's character randomly
            integer index = 0
            repeat parent1:GetSize() times
                if(rand:RandomIntegerBetween(0,1) = 0)
                    child = child + parent1:GetCharacter(index)
                else
                    child = child + parent2:GetCharacter(index)
                end
                index = index + 1
            end
            return child
        end
        return "These parents aren't compatible"
    end


//part 6 stuff

    action BattleBugs(text mutantBug, text opponentBug) returns text
        Biology bio

        //validate the combatants
        if bio:IsValidBattleBugDNA(mutantBug) not= true and bio:IsValidBattleBugDNA(opponentBug) not= true
            return "Both bugs are already dead, nobody wins."

        elseif bio:IsValidBattleBugDNA(mutantBug) not= true
            return "Your bug is dead, giving the opponent bug an automatic victory."
        elseif bio:IsValidBattleBugDNA(opponentBug) not= true
            return "The opponent bug is already dead, thus earning your bug an empty victory."
        end

        //both bugs are valid strings
        if mutantBug = opponentBug
            return "The battle results in a stalemate.  Neither bug wins or loses."
        end

        integer yourBP = 0
        integer opponentBP = 0

        if mutantBug:Contains("X")
            yourBP = 2 * mutantBug:IndexOf("X")
        elseif mutantBug:Contains("Y")
            yourBP = 2 * mutantBug:IndexOf("Y") + 1
        else
        //cheat code
            yourBP = -1
        end

        if opponentBug:Contains("X")
            opponentBP = 2 * opponentBug:IndexOf("X")
        elseif opponentBug:Contains("Y")
            opponentBP = 2 * opponentBug:IndexOf("Y") + 1
        else
        //cheat code
            opponentBP = -1
        end

        //I originally meant for the bug with the higher BP to win, but it turned out to be like golf; the lower score wins
        if yourBP <= opponentBP
            //win
            return "Your bug, with the power of " + bio:GenerateSuperpower(mutantBug) + ", overwhelmed the opposing bug that was capable of " + bio:GenerateSuperpower(opponentBug) + ".  Your bug is victorious and all shall know its name... except for the fact that it doesn't have a name."
        else
            //lose
            return "Your bug, capable of " + bio:GenerateSuperpower(mutantBug) + ", was no match for the opposing bug, which had the power of " + bio:GenerateSuperpower(opponentBug) + ".  Your bug has suffered an honorable defeat on the battlefield today.  RIP bug."
        end
        
        return "Nobody wins!"
    end

    action IsValidBattleBugDNA(text DNA) returns boolean
        //check for cheat codes
        if DNA = "CHEETOS"
            return true

        //remove X or Y, check for "GATTACA"
        elseif DNA:Contains("X")
            integer index = DNA:IndexOf("X")
            text subStrand = ""
            //remove the X, check for GATTACA by concatenating the parts around it

            //get first part, assuming X isn't at the beginning
            if index not= 0
                subStrand = DNA:GetSubtext(0, index)
            end
            //get second part, assuming X isn't at the end
            if index not= DNA:GetSize() - 1
                subStrand = subStrand + DNA:GetSubtext(index + 1)
            end

            if subStrand = "GATTACA"
                return true
            else
                return false
            end
            
        elseif DNA:Contains("Y")
            integer index = DNA:IndexOf("Y")
            text subStrand = ""

            if index not= 0
                subStrand = DNA:GetSubtext(0, index)
            end

            if index not= DNA:GetSize() - 1
                subStrand = subStrand + DNA:GetSubtext(index + 1)
            end

            if subStrand = "GATTACA"
                return true
            else
                return false
            end
            
        else
            return false
        end
        return false
    end

    action GenerateSuperpower(text bugDNA) returns text
        text superpower = ""
        boolean isValidMutation = true
        if(bugDNA = "CHEETOS")
            superpower = "winning (the bug has an endless supply of Cheetos and can never lose)"
        elseif(bugDNA = "XGATTACA")
            superpower = "shooting laser beams out of its eyes"
        elseif(bugDNA = "GXATTACA")
            superpower = "mind control"
        elseif(bugDNA = "GAXTTACA")
            superpower = "controlling electricity"
        elseif(bugDNA = "GATXTACA")
            superpower = "super strength"
        elseif(bugDNA = "GATTXACA")
            superpower = "passing through solid objects"
        elseif(bugDNA = "GATTAXCA")
            superpower = "controlling weather"
        elseif(bugDNA = "GATTACXA")
            superpower = "manipulating its size"
        elseif(bugDNA = "GATTACAX")
            superpower = "X-Ray Vision"
        elseif(bugDNA = "YGATTACA")
            superpower = "immortality"
        elseif(bugDNA = "GYATTACA")
            superpower = "mimicking other powers"
        elseif(bugDNA = "GAYTTACA")
            superpower = "time travel"
        elseif(bugDNA = "GATYTACA")
            superpower = "invisibility"
        elseif(bugDNA = "GATTYACA")
            superpower = "controlling machines"
        elseif(bugDNA = "GATTAYCA")
            superpower = "shapeshifting"
        elseif(bugDNA = "GATTACYA")
            superpower = "summoning zombies"
        elseif(bugDNA = "GATTACAY")
            superpower = "telepathy"
        else
            isValidMutation = false
        end
        if(isValidMutation)
            return superpower
        else
            output "This is not a valid DNA sequence. The bug has died."
        end
        return superpower
    end

//part 7
    action SendDNA(text DNA) returns text
        //if trigger word
        //call screenMelt

        return DNA
    end

end