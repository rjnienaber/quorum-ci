package Libraries.Data.Formats

use Libraries.Containers.Array

/*
The DocumentTypeDefinitionElement class represents an element that has been 
parsed from a document type definition. 

Attribute: Example

use Libraries.System.File
use Libraries.Data.Formats

// DTD Element example: <!ELEMENT note (to,from,heading,body)>
DocumentTypeDefinitionElement MyDTDElement                  
MyDTDElement:SetElementName("note")
MyDTDElement:SetCategory("(to,from,heading,body)")

boolean pcdata = MyDTDElement:IsParsedCharacterData() // pcdata will be false
boolean empty = MyDTDElement:IsEmptyElement() // empty will be false
boolean any = MyDTDElement:IsAnyContentElement() // any will be false
boolean children = MyDTDElement:HasChildren() // children will be true
*/
class DocumentTypeDefinitionElement 
    text elementName = ""
    boolean empty = false
    boolean anyContent = false
    boolean parsedCharacterData = false
    text childrenDescription = ""

    /*
        This action gets the element name.

        Attribute: Returns The value of the element name. 

        Attribute: Example
        use Libraries.Data.Formats
        DocumentTypeDefinitionElement MyDTDElement                  
        MyDTDElement:SetElementName("note")
        text value = MyDTDElement:GetElementName() // value will be "note"
    */
    public action GetElementName() returns text
        return elementName
    end
 
    /*
        This action sets the element name to the given text value.

        Attribute: Parameter name The value to set the element name to. 

        Attribute: Example
        use Libraries.Data.Formats
        DocumentTypeDefinitionElement MyDTDElement                  
        MyDTDElement:SetElementName("note")
    */   
    public action SetElementName(text name)
        elementName = name:Trim()
    end

    /*
        This action determines if the category of the element is empty. 

        Attribute: Returns True if the category of the element is empty and false if it is not. 

        Attribute: Example
        use Libraries.Data.Formats
        DocumentTypeDefinitionElement MyDTDElement                  
        MyDTDElement:SetCategory("EMPTY")
        boolean value = MyDTDElement:IsEmptyElement() // value will be true
    */
    public action IsEmptyElement() returns boolean
        return empty
    end

    /*
        This action determines if the category of the element is any content. 

        Attribute: Returns True if the category of the element is any content and false if it is not. 

        Attribute: Example
        use Libraries.Data.Formats
        DocumentTypeDefinitionElement MyDTDElement                  
        MyDTDElement:SetCategory("ANY")
        boolean value = MyDTDElement:IsAnyContentElement() // value will be true
    */
    public action IsAnyContentElement() returns boolean
        return anyContent
    end

    /*
        This action determines if the category of the element is parsed character data. 

        Attribute: Returns True if the category of the element is parsed character data and false if it is not. 

        Attribute: Example
        use Libraries.Data.Formats
        DocumentTypeDefinitionElement MyDTDElement
        MyDTDElement:SetCategory("(#PCDATA)")
        boolean value = MyDTDElement:HasParsedCharacterData() // value will be true
    */
    public action IsParsedCharacterData() returns boolean
        return parsedCharacterData
    end

    /*
        This action determines if the category of the element has children elements. 

        Attribute: Returns True if the category of the element has children elements and false if it is not. 

        Attribute: Example
        use Libraries.Data.Formats
        DocumentTypeDefinitionElement MyDTDElement
        MyDTDElement:SetCategory("(to,from,heading,body)")
        boolean value = MyDTDElement:HasChildren() // value will be true
    */
    public action HasChildren() returns boolean
        trimmed = childrenDescription:Trim()
        return not trimmed:IsEmpty()
    end

    /*
        This action gets the element name.

        Attribute: Returns The value of the element name. 

        Attribute: Example
        use Libraries.Data.Formats
        DocumentTypeDefinitionElement MyDTDElement                  
        MyDTDElement:SetCategory("(to,from,heading,body)")
        if MyDTDElement:HasChildren()
           text children = MyDTDElement:GetChildren() // children will be (to,from,heading,body)
        end
    */
    public action GetChildren() returns text
        return childrenDescription
    end

    /*
        This action sets the element category to the given text value. It will 
        check to see if the value is empty, any, PCDATA, or a list of children.

        Attribute: Parameter name The value to set the element category to. 

        Attribute: Example
        use Libraries.Data.Formats
        DocumentTypeDefinitionElement MyDTDElement                  
        MyDTDElement:SetCategory("(to,from,heading,body)")
        // or
        MyDTDElement:SetCategory("EMPTY")
    */
    public action SetCategory(text category)
        category = category:Trim()
        if category:Equals("EMPTY")
            empty = true
        elseif category:Equals("ANY")
            anyContent = true
        elseif category:Equals("(#PCDATA)")
            parsedCharacterData = true
        else
            childrenDescription = category
        end
    end

end