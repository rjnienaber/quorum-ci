package Libraries.Data.Formats.ExtensibleMarkup

use Libraries.Containers.Array
use Libraries.Containers.Blueprints.Iterator
use Libraries.System.File

/*
The DocumentTypeDefinition class reads document type definition declarations 
defined within an XML document. 

Attribute: Example

use Libraries.System.File
use Libraries.Data.Formats.ExtensibleMarkup

DocumentTypeDefinition reader //first create the reader
File dtd //then create a file
dtd:SetPath("Data.dtd") //set its path to a file we've created
reader:Read(dtd) //read the dtd file
*/
class DocumentTypeDefinition 
    text rootElement = ""
    text externalFileName = ""
    File sourceDirectory
    
    Array<DocumentTypeDefinitionElement> elements
    Array<DocumentTypeDefinitionEntity> entities
    Array<DocumentTypeDefinitionAttribute> attributes
    
    /*
        This action gets the name of the root element for this document type definition. 

        Attribute: Returns The name of the root element.
        
        Attribute: Example
        use Libraries.System.File
        use Libraries.Data.Formats.ExtensibleMarkup
        
        DocumentTypeDefinition MyDocumentTypeDefinition
        File dtd 
        dtd:SetPath("Data.dtd")
        MyDocumentTypeDefinition:Read(dtd)
        text value = MyDocumentTypeDefinition:GetRootElement()
    */
    public action GetRootElement() returns text
        return rootElement
    end

    /*
        This action sets the name of the root element for this document type definition. 

        Attribute: Parameter root The name of the root element.
    */
    private action SetRootElement(text root)
        rootElement = root:Trim()
    end

    /*
        This action checks to see if there is an external file for this document type definition. 

        Attribute: Returns True if an external file was used when parsing the 
        document type definition, false otherwise.
        
        Attribute: Example
        use Libraries.System.File
        use Libraries.Data.Formats.ExtensibleMarkup
        
        DocumentTypeDefinition MyDocumentTypeDefinition
        File dtd 
        dtd:SetPath("Data.dtd")
        MyDocumentTypeDefinition:Read(dtd)
        boolean value = MyDocumentTypeDefinition:HasExternalFile() // value will be true
    */
    public action HasExternalFile() returns boolean
        trimmed = externalFileName:Trim()
        return not trimmed:IsEmpty()
    end

    /*
        This action gets the external file for this document type definition. 

        Attribute: Returns The name of the external file used durring parsing.
        
        Attribute: Example
        use Libraries.System.File
        use Libraries.Data.Formats.ExtensibleMarkup
        
        DocumentTypeDefinition MyDocumentTypeDefinition
        File dtd 
        dtd:SetPath("Data.dtd")
        MyDocumentTypeDefinition:Read(dtd)

        if MyDocumentTypeDefinition:HasExternalFile()
            output MyDocumentTypeDefinition:GetExternalFileName() // output will be "Data.dtd"
        end
    */
    public action GetExternalFileName() returns text
        return externalFileName
    end

    /*
        This action sets the name of the external file for this document type definition. 

        Attribute: Parameter root The name of the external file.
    */
    private action SetExternalFileName(text name)
        externalFileName = name:Trim()
    end

    /*
        This action sets the source directory for the document type definition. 
        If the DTD uses external sources, they need to be in this directory.

        Attribute: Parameter directory The directory of external sources.
        
        Attribute: Example
        use Libraries.Data.Formats.ExtensibleMarkup
        
        DocumentTypeDefinition MyDocumentTypeDefinition
        MyDocumentTypeDefinition:SetSourceDirectory("C:\")
        MyDocumentTypeDefinition:Read("<!DOCTYPE note SYSTEM "note.dtd">")
    */
    public action SetSourceDirectory(text directory)
        sourceDirectory:SetWorkingDirectory(directory)
    end

    /*
        This action gets the data from the file for the DTD. 

        Attribute: Returns The data in the external file.
    */
    private action GetDTDFileData() returns text
        File dtd
        if sourceDirectory:Exists()
            dtd:SetWorkingDirectory(sourceDirectory:GetWorkingDirectory())
        end

        dtd:SetPath(externalFileName)
        if dtd:Exists()
            return dtd:Read()
        end
        return ""
    end

    /*
        This action gets the entity value for the entity name passed to it.

        Attribute: Returns The value of the entity.
        
        Attribute: Example
        use Libraries.Data.Formats.ExtensibleMarkup
        
        DocumentTypeDefinition MyDocumentTypeDefinition
        MyDocumentTypeDefinition:Read("<!DOCTYPE note [<!ENTITY language "Quorum">]>")
        output MyDocumentTypeDefinition:GetEntityValue("language") // output will be Quorum
    */
    public action GetEntityValue(text name) returns text
        Iterator<DocumentTypeDefinitionEntity> els = entities:GetIterator()
        DocumentTypeDefinitionEntity e

        repeat while els:HasNext()
            e = els:Next()
            entityName = e:GetName()
            if entityName:Equals(name)
                return e:GetValue()
            end
        end
        
        return name
    end

    /*
        This action gets the data from the given file and parses the document 
        type definition in it.
        
        Attribute: Parameter directory The file of the document type definition.

        Attribute: Example
        use Libraries.System.File
        use Libraries.Data.Formats.ExtensibleMarkup
        
        DocumentTypeDefinition MyDocumentTypeDefinition
        File dtd 
        dtd:SetPath("Data.dtd")
        MyDocumentTypeDefinition:Read(dtd)
    */
    public action Read(File file)
        directory = file:GetWorkingDirectory()
        sourceDirectory:SetWorkingDirectory(directory)
        externalFileName = file:GetFileName()
        text result = file:Read()
        Read(result)
    end

    /*
        This action parses the given text as a document type definition
        
        Attribute: Parameter dtd The text representing the document type dfinition to be parsed.

        Attribute: Example
        use Libraries.System.File
        use Libraries.Data.Formats.ExtensibleMarkup
        
        DocumentTypeDefinition MyDocumentTypeDefinition
        MyDocumentTypeDefinition:Read("<!DOCTYPE note [<!ENTITY language "Quorum">]>")
    */
    public action Read(text dtd)
        size = dtd:GetSize()
        doubleQuote = dtd:GetDoubleQuote()

        seenWhiteSpace = false
        seenAttributeCarriageReturn = false
        inElement = false
        elementWhiteSpaceCount = 0
        inAttlist = false
        attributeWhiteSpaceCount = 0
        inEntity = false
        entityWhiteSpaceCount = 0
        inDefinition = false
        inBrackets = false
        setRootElement = false

        inSingleQuote = false
        inDoubleQuote = false

        DocumentTypeDefinitionAttribute currentAttribute
        DocumentTypeDefinitionElement currentElement
        DocumentTypeDefinitionEntity currentEntity
        value = ""
        i = 0 

        if size > 9
            text start = dtd:GetSubtext(0, 9)
            if start:Equals("<!DOCTYPE")
                i = 10 // skip the space after DOCTYPE as well
            else
                inDefinition = true
            end
        else
             inDefinition = true
        end 

        repeat while i < size
            
            next = dtd:GetCharacter(i)
            trimmed = next:Trim()

            if next = dtd:GetCarriageReturn() and inAttlist 
                if seenAttributeCarriageReturn
                    seenAttributeCarriageReturn = true
                else
                    name = currentAttribute:GetElementName()
                    trimmed = name:Trim()
                    if not trimmed:IsEmpty()
                        currentAttribute:SetValue(value)
                        attributes:Add(currentAttribute)
                        DocumentTypeDefinitionAttribute newAttribute
                        newAttribute:SetElementName(currentAttribute:GetElementName())
                        currentAttribute = newAttribute
                        attributeWhiteSpaceCount = 2
                        value = ""
                    end
                end
            elseif trimmed:IsEmpty() and not inDoubleQuote and not inSingleQuote
                valueTrimmed = value:Trim()
                if not valueTrimmed:IsEmpty()
                    if inElement
                        elementWhiteSpaceCount = elementWhiteSpaceCount + 1
                        if elementWhiteSpaceCount = 2
                            currentElement:SetElementName(value)
                            value = ""                      
                        end
                    elseif inAttlist
                        attributeWhiteSpaceCount = attributeWhiteSpaceCount + 1
                        if attributeWhiteSpaceCount = 2                      
                            currentAttribute:SetElementName(value)
                            value = ""
                        elseif attributeWhiteSpaceCount = 3
                            currentAttribute:SetAttributeName(value)
                            value = ""
                        elseif attributeWhiteSpaceCount = 4
                            currentAttribute:SetType(value)
                            value = ""
                        elseif attributeWhiteSpaceCount = 5
                            //currentAttribute:SetValue(value)
                            //value = ""
                        end
                    elseif inEntity
                        entityWhiteSpaceCount = entityWhiteSpaceCount + 1
                        if entityWhiteSpaceCount = 2
                            currentEntity:SetName(value)
                            value = ""                        
                        end
                    elseif not setRootElement
                        rootElement = value
                        setRootElement = true
                        value = ""
                    end
                end
            end

            
            if not inBrackets and dtd:GetCharacter(i) = "S"
                if i + 6 < size and
                    dtd:GetCharacter(i + 1) = "Y" and
                    dtd:GetCharacter(i + 2) = "S" and
                    dtd:GetCharacter(i + 3) = "T" and
                    dtd:GetCharacter(i + 4) = "E" and
                    dtd:GetCharacter(i + 5) = "M" 

                    isFileName = true
                    isInDoubleQuotes = false
                    isInSingleQuotes = false
                    fileName = ""
                    j = i + 6
                    next = ""

                    repeat while isFileName and j < size
                        next = dtd:GetCharacter(j)
                        if next = doubleQuote and not isInSingleQuotes
                            if isInDoubleQuotes 
                                isFileName = false
                                isInDoubleQuotes = false
                            else
                                isInDoubleQuotes = true
                            end
                        elseif next = "'" and not isInDoubleQuotes
                            if isInSingleQuotes
                                isFileName = false
                                isInSingleQuotes = false
                            else
                                isInSingleQuotes = true
                            end
                        elseif isInDoubleQuotes or isInSingleQuotes
                            fileName = fileName + next
                        end
                        j = j + 1
                   end 
                   
                   SetExternalFileName(fileName)
                   dtd = GetDTDFileData()
                   //output dtd
                   i = -1
                   size = dtd:GetSize()
                   inDefinition = true
                   inDoubleQuote = false
                   next = ""
                end
            end
            
            if next = "[" and not inDoubleQuote and not inSingleQuote
                inDefinition = true
            elseif next = "]" and not inDoubleQuote and not inSingleQuote
                inDefinition = false
            elseif inDefinition and next = "<" and not inDoubleQuote and not inSingleQuote
                inBrackets = true
            elseif inBrackets and next = "!" and not inDoubleQuote and not inSingleQuote
                if i + 6 < size and 
                        dtd:GetCharacter(i + 1) = "E" and
                        dtd:GetCharacter(i + 2) = "N" and
                        dtd:GetCharacter(i + 3) = "T" and
                        dtd:GetCharacter(i + 4) = "I" and
                        dtd:GetCharacter(i + 5) = "T" and
                        dtd:GetCharacter(i + 6) = "Y" 
                    inEntity = true
                    DocumentTypeDefinitionEntity newEntity
                    newEntity:SetSourceDirectory(sourceDirectory:GetWorkingDirectory())
                    currentEntity = newEntity
                    value = ""
                    i = i + 7 // skip the whitespace after
                   entityWhiteSpaceCount =  1
                elseif i + 7 < size and
                        dtd:GetCharacter(i + 1) = "E" and
                        dtd:GetCharacter(i + 2) = "L" and
                        dtd:GetCharacter(i + 3) = "E" and
                        dtd:GetCharacter(i + 4) = "M" and
                        dtd:GetCharacter(i + 5) = "E" and
                        dtd:GetCharacter(i + 6) = "N" and
                        dtd:GetCharacter(i + 7) = "T" 
                    inElement = true
                    DocumentTypeDefinitionElement newElement
                    currentElement = newElement
                    value = ""
                    i = i + 8 // skip the whitespace after
                    elementWhiteSpaceCount =  1
                elseif i + 7 < size and 
                        dtd:GetCharacter(i + 1) = "A" and
                        dtd:GetCharacter(i + 2) = "T" and
                        dtd:GetCharacter(i + 3) = "T" and
                        dtd:GetCharacter(i + 4) = "L" and
                        dtd:GetCharacter(i + 5) = "I" and
                        dtd:GetCharacter(i + 6) = "S" and
                        dtd:GetCharacter(i + 7) = "T"
                    inAttlist = true
                    DocumentTypeDefinitionAttribute newAttribute
                    currentAttribute = newAttribute
                    value = ""
                    
                    i = i + 8 // skip the whitespace after
                    attributeWhiteSpaceCount =  1
                end
            elseif inBrackets and next = ">" and not inDoubleQuote and not inSingleQuote
                inBrackets = false
                if inElement
                    currentElement:SetCategory(value)
                    elements:Add(currentElement)
                    DocumentTypeDefinitionElement newElement
                    currentElement = newElement
                    value = ""
                    inElement = false
                elseif inAttlist
                    currentAttribute:SetValue(value)
                    attributes:Add(currentAttribute)
                    DocumentTypeDefinitionAttribute newAttribute
                    currentAttribute = newAttribute
                    seenAttributeCarriageReturn = false
                    inAttlist = false
                elseif inEntity
                    currentEntity:SetValue(value)
                    entities:Add(currentEntity)
                    DocumentTypeDefinitionEntity newEntity
                    newEntity:SetSourceDirectory(sourceDirectory:GetWorkingDirectory())
                    currentEntity = newEntity
                    inEntity = false
                else
                    
                end
            elseif inDefinition and next = doubleQuote and not inSingleQuote
                inDoubleQuote = not inDoubleQuote
            elseif inDefinition and next = "'" and not inDoubleQuote
                inSingleQuote = not inSingleQuote
            else
                value = value + next
                //output value
            end

            i = i + 1
        end
    end

    /*
        This action outputs all of the entities, elements and attributes in this 
        document type definition. 
    */
    private action Print()
        output "Root Element:" + rootElement
        output "File:" + externalFileName
        Iterator<DocumentTypeDefinitionElement> elementIterator = elements:GetIterator()
        repeat while elementIterator:HasNext()
            DocumentTypeDefinitionElement element = elementIterator:Next()
            category = ""
            if element:IsParsedCharacterData()
                category = "PCDATA"
            elseif element:IsEmptyElement()
                category = "EMPTY"
            elseif element:IsAnyContentElement()
                category = "ANY"
            else
                category = element:GetChildren()
            end

            output "Element name:" + element:GetElementName() + " category:" + category
        end

        Iterator<DocumentTypeDefinitionEntity> entityIterator = entities:GetIterator()
        repeat while entityIterator:HasNext()
            DocumentTypeDefinitionEntity entity = entityIterator:Next()
            output "Entity name:" + entity:GetName() + " value:" + entity:GetValue()
        end

        Iterator<DocumentTypeDefinitionAttribute> attributeIterator = attributes:GetIterator()
        repeat while attributeIterator:HasNext()
            DocumentTypeDefinitionAttribute attribute = attributeIterator:Next()
            value = ""
            if attribute:IsRequiredValue()
                value = "REQUIRED"
            elseif attribute:IsImpliedValue()
                value = "IMPLIED"
            elseif attribute:IsFixedValue()
                value = "FIXED" + " value:" + attribute:GetValue()
            else
                value = attribute:GetValue()
            end

            if attribute:HasEnumeratedValues()
                output "Attribute element:" + attribute:GetElementName() + " name:" + attribute:GetAttributeName() + " value:" + value 
                Array<text> values = attribute:GetEnumeratedValues()
                Iterator<text> valuesIterator = values:GetIterator()
                text valuesText = ""
                repeat while valuesIterator:HasNext()
                    value = valuesIterator:Next()
                    trimmed = valuesText:Trim()
                    if trimmed:IsEmpty()
                        valuesText =  value
                    else
                        valuesText = valuesText + "," + value
                    end
                end
                output "    enumerated values: " + valuesText
            else
                output "Attribute element:" + attribute:GetElementName() + " name:" + attribute:GetAttributeName() + " type:" + attribute:GetType() + " #:" + value 
            end 
        end
    end
end